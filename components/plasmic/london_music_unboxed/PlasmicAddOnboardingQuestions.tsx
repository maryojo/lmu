/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: 9bHtm1sDPX3Z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AdminPageLayout from "../../AdminPageLayout"; // plasmic-import: NXXR6Sd3NRz9/component
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import QuizHeading from "../../QuizHeading"; // plasmic-import: u5QUcEvtH2vy/component
import QuizQuestion from "../../QuizQuestion"; // plasmic-import: HQ7S7EYcQqWT/component
import { CustomAccordionItem } from "../../CustomAccordionItem"; // plasmic-import: Th4N3i4J4xsp/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Unauthorized from "../../Unauthorized"; // plasmic-import: ZnrbZI7AiPSe/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicAddOnboardingQuestions.module.css"; // plasmic-import: 9bHtm1sDPX3Z/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: QolWKAS9_Lau/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: CQpcpFiNaBOI/icon

createPlasmicElementProxy;

export type PlasmicAddOnboardingQuestions__VariantMembers = {};
export type PlasmicAddOnboardingQuestions__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddOnboardingQuestions__VariantsArgs;
export const PlasmicAddOnboardingQuestions__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAddOnboardingQuestions__ArgsType = {};
type ArgPropType = keyof PlasmicAddOnboardingQuestions__ArgsType;
export const PlasmicAddOnboardingQuestions__ArgProps = new Array<ArgPropType>();

export type PlasmicAddOnboardingQuestions__OverridesType = {
  root?: Flex__<typeof AdminPageLayout>;
  h5?: Flex__<"h5">;
  allQuizzesTable?: Flex__<typeof RichTable>;
  quizHeading?: Flex__<typeof QuizHeading>;
  quizQuestion?: Flex__<typeof QuizQuestion>;
  customAccordionItem?: Flex__<typeof CustomAccordionItem>;
  newQuestionForm?: Flex__<typeof FormWrapper>;
  h6?: Flex__<"h6">;
  deleteQuestionModal?: Flex__<typeof AntdModal>;
  modal?: Flex__<typeof AntdModal>;
  form2?: Flex__<typeof FormWrapper>;
  section?: Flex__<"section">;
  unauthorized?: Flex__<typeof Unauthorized>;
};

export interface DefaultAddOnboardingQuestionsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddOnboardingQuestions__RenderFunc(props: {
  variants: PlasmicAddOnboardingQuestions__VariantsArgs;
  args: PlasmicAddOnboardingQuestions__ArgsType;
  overrides: PlasmicAddOnboardingQuestions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "allQuizzesTable.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "allQuizzesTable.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "allQuizzesTable.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "allQuizzesTable.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "fullFormValues",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "newQuestionForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "newQuestionForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "newQuestionForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "newQuestionForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "selectedQuizInfo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "selectedRowId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isNotUniqueQuiz",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isUpdateTitleLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "updatedQuizDetails",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "deleteQuestionModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "questionIdToDelete",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isQuestionEditMode",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getOnboardingQuizzes: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "0bb4e4c3-b5bc-477c-a0a9-6118a2519034",
        userArgs: {},
        cacheKey: `plasmic.$.0bb4e4c3-b5bc-477c-a0a9-6118a2519034.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <AdminPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $ctx?.SupabaseUser?.user !== null &&
                      $ctx?.SupabaseUser?.user?.user_metadata.userRole ===
                        "admin"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nnYb)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v91B8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hYhH5
                        )}
                      >
                        <h5
                          data-plasmic-name={"h5"}
                          data-plasmic-override={overrides.h5}
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5
                          )}
                        >
                          {"Onboarding Quiz"}
                        </h5>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jLp1X
                          )}
                        >
                          {
                            "Add new quiz and quiz questions here for onboarding"
                          }
                        </div>
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ea9N7
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tLdDi
                            )}
                          >
                            {"Add New Quiz"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jfrCw)}
                    >
                      {(() => {
                        const child$Props = {
                          canSelectRows: "click",
                          className: classNames(
                            "__wab_instance",
                            sty.allQuizzesTable
                          ),
                          data: (() => {
                            try {
                              return $queries.getOnboardingQuizzes;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          defaultSize: "large",
                          fields: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id", isHidden: null },
                              {
                                key: "title",
                                fieldId: "title",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "instrument_type",
                                fieldId: "instrument_type",
                                title: null
                              },
                              { key: "level", fieldId: "level", title: null },
                              {
                                key: "question_count",
                                fieldId: "question_count",
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "quiz_type",
                                fieldId: "quiz_type",
                                disableSorting: null,
                                isHidden: null
                              },
                              {
                                key: "course_id",
                                fieldId: "course_id",
                                isHidden: null
                              }
                            ];
                            __composite["0"]["isHidden"] = true;
                            __composite["1"]["title"] = "Quiz Title";
                            __composite["1"]["disableSorting"] = true;
                            __composite["2"]["title"] = "Instrument Type";
                            __composite["3"]["title"] = "Quiz Level";
                            __composite["4"]["title"] = "No. of Questions";
                            __composite["4"]["disableSorting"] = true;
                            __composite["5"]["disableSorting"] = false;
                            __composite["5"]["isHidden"] = true;
                            __composite["6"]["isHidden"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideDensity: true,
                          hideExports: true,
                          hideSearch: true,
                          hideSelectionBar: true,
                          onRowClick: async (rowKey, row, event) => {
                            const $steps = {};

                            $steps["fetchQuizInfoById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "718444ab-0dcb-4bcb-86f7-c906331ee065",
                                      userArgs: {
                                        filters: [
                                          $state.allQuizzesTable?.selectedRowKey
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: null,
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["fetchQuizInfoById"] != null &&
                              typeof $steps["fetchQuizInfoById"] === "object" &&
                              typeof $steps["fetchQuizInfoById"].then ===
                                "function"
                            ) {
                              $steps["fetchQuizInfoById"] = await $steps[
                                "fetchQuizInfoById"
                              ];
                            }

                            $steps["updateSelectedQuizInfo"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["selectedQuizInfo"]
                                    },
                                    operation: 0,
                                    value: $steps.fetchQuizInfoById?.data
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSelectedQuizInfo"] != null &&
                              typeof $steps["updateSelectedQuizInfo"] ===
                                "object" &&
                              typeof $steps["updateSelectedQuizInfo"].then ===
                                "function"
                            ) {
                              $steps["updateSelectedQuizInfo"] = await $steps[
                                "updateSelectedQuizInfo"
                              ];
                            }
                          },
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["allQuizzesTable", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["allQuizzesTable", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["allQuizzesTable", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["allQuizzesTable", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pageSize: 12,
                          pagination: true,
                          rowActions: [],
                          rowKey: "id",
                          scopeClassName: sty["allQuizzesTable__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "allQuizzesTable",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "allQuizzesTable",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            styleTokensClassNames
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "allQuizzesTable.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "allQuizzesTable.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "allQuizzesTable.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName:
                                "allQuizzesTable.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"allQuizzesTable"}
                            data-plasmic-override={overrides.allQuizzesTable}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        try {
                          return (
                            $state.allQuizzesTable.selectedRow !== undefined &&
                            $state.allQuizzesTable.selectedRow !== null &&
                            $state.selectedQuizInfo !== null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___00BIn
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6CkEr
                            )}
                          >
                            <QuizHeading
                              data-plasmic-name={"quizHeading"}
                              data-plasmic-override={overrides.quizHeading}
                              className={classNames(
                                "__wab_instance",
                                sty.quizHeading
                              )}
                              handleSaveClick={async newTitle => {
                                const $steps = {};

                                $steps["updateIsUpdateTitleLoading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["isUpdateTitleLoading"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIsUpdateTitleLoading"] !=
                                    null &&
                                  typeof $steps[
                                    "updateIsUpdateTitleLoading"
                                  ] === "object" &&
                                  typeof $steps["updateIsUpdateTitleLoading"]
                                    .then === "function"
                                ) {
                                  $steps["updateIsUpdateTitleLoading"] =
                                    await $steps["updateIsUpdateTitleLoading"];
                                }

                                $steps["postgresUpdateById"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                          opId: "7a10a86b-90f8-4b78-9f2e-53e0d81bdfb7",
                                          userArgs: {
                                            keys: [
                                              $state.allQuizzesTable
                                                ?.selectedRowKey
                                            ],

                                            variables: [newTitle]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "4853205b-c7e6-4fad-90f8-e9c574f6b3d4"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["postgresUpdateById"] != null &&
                                  typeof $steps["postgresUpdateById"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateById"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateById"] = await $steps[
                                    "postgresUpdateById"
                                  ];
                                }

                                $steps["updateIsUpdateTitleLoading2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["isUpdateTitleLoading"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIsUpdateTitleLoading2"] !=
                                    null &&
                                  typeof $steps[
                                    "updateIsUpdateTitleLoading2"
                                  ] === "object" &&
                                  typeof $steps["updateIsUpdateTitleLoading2"]
                                    .then === "function"
                                ) {
                                  $steps["updateIsUpdateTitleLoading2"] =
                                    await $steps["updateIsUpdateTitleLoading2"];
                                }
                              }}
                              heading={(() => {
                                try {
                                  return (() => {
                                    let index =
                                      $queries.getOnboardingQuizzes.data.findIndex(
                                        quiz =>
                                          quiz.id ===
                                          $state.allQuizzesTable.selectedRow.id
                                      );
                                    return $queries.getOnboardingQuizzes.data[
                                      index
                                    ].title;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              isSaving={(() => {
                                try {
                                  return $state.isUpdateTitleLoading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.selectedQuizInfo;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ammZv
                                )}
                                key={currentIndex}
                              >
                                <QuizQuestion
                                  data-plasmic-name={"quizQuestion"}
                                  data-plasmic-override={overrides.quizQuestion}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.quizQuestion
                                  )}
                                  currentIndex={currentIndex}
                                  editQuestionVariant={(() => {
                                    try {
                                      return $state.isQuestionEditMode;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  handleSaveChangeClick={async questionInfo => {
                                    const $steps = {};

                                    $steps["postgresUpdateById"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "6C2N6jYLs31t3Z2ygT9rD6",
                                              opId: "6ac58608-f0dd-4afd-94d4-c82385885afc",
                                              userArgs: {
                                                keys: [
                                                  $state.selectedQuizInfo[
                                                    currentIndex
                                                  ].id
                                                ],

                                                variables: [
                                                  $state.updatedQuizDetails
                                                    .correctAnswer &&
                                                    $state.updatedQuizDetails
                                                      ?.correctAnswer,

                                                  $state.updatedQuizDetails
                                                    .questionText &&
                                                    $state.updatedQuizDetails
                                                      ?.questionText
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresUpdateById"] != null &&
                                      typeof $steps["postgresUpdateById"] ===
                                        "object" &&
                                      typeof $steps["postgresUpdateById"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresUpdateById"] =
                                        await $steps["postgresUpdateById"];
                                    }

                                    $steps["updateIsQuestionEditMode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "isQuestionEditMode"
                                              ]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateIsQuestionEditMode"] !=
                                        null &&
                                      typeof $steps[
                                        "updateIsQuestionEditMode"
                                      ] === "object" &&
                                      typeof $steps["updateIsQuestionEditMode"]
                                        .then === "function"
                                    ) {
                                      $steps["updateIsQuestionEditMode"] =
                                        await $steps[
                                          "updateIsQuestionEditMode"
                                        ];
                                    }

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "success",
                                              "Changes saved!",
                                              undefined,
                                              undefined,
                                              "top"
                                            ]
                                          };
                                          return $globalActions[
                                            "plasmic-antd5-config-provider.showNotification"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["fetchQuizInfoById"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "6C2N6jYLs31t3Z2ygT9rD6",
                                              opId: "718444ab-0dcb-4bcb-86f7-c906331ee065",
                                              userArgs: {
                                                filters: [
                                                  $state.selectedQuizInfo[0]
                                                    ?.quiz_id
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: null,
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["fetchQuizInfoById"] != null &&
                                      typeof $steps["fetchQuizInfoById"] ===
                                        "object" &&
                                      typeof $steps["fetchQuizInfoById"]
                                        .then === "function"
                                    ) {
                                      $steps["fetchQuizInfoById"] =
                                        await $steps["fetchQuizInfoById"];
                                    }

                                    $steps["updateSelectedQuizInfo"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["selectedQuizInfo"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.fetchQuizInfoById?.data
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateSelectedQuizInfo"] !=
                                        null &&
                                      typeof $steps[
                                        "updateSelectedQuizInfo"
                                      ] === "object" &&
                                      typeof $steps["updateSelectedQuizInfo"]
                                        .then === "function"
                                    ) {
                                      $steps["updateSelectedQuizInfo"] =
                                        await $steps["updateSelectedQuizInfo"];
                                    }
                                  }}
                                  onCorrectAnswerChange={async correctAnswerValue => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return ($state.updatedQuizDetails.correctAnswer =
                                                correctAnswerValue);
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }
                                  }}
                                  onDeleteQuestion={async () => {
                                    const $steps = {};

                                    $steps["updateDeleteQuestionModalOpen"] =
                                      true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "deleteQuestionModal",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateDeleteQuestionModalOpen"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDeleteQuestionModalOpen"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateDeleteQuestionModalOpen"
                                      ].then === "function"
                                    ) {
                                      $steps["updateDeleteQuestionModalOpen"] =
                                        await $steps[
                                          "updateDeleteQuestionModalOpen"
                                        ];
                                    }

                                    $steps["updateQuestionIdToDelete"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "questionIdToDelete"
                                              ]
                                            },
                                            operation: 0,
                                            value: currentItem?.id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateQuestionIdToDelete"] !=
                                        null &&
                                      typeof $steps[
                                        "updateQuestionIdToDelete"
                                      ] === "object" &&
                                      typeof $steps["updateQuestionIdToDelete"]
                                        .then === "function"
                                    ) {
                                      $steps["updateQuestionIdToDelete"] =
                                        await $steps[
                                          "updateQuestionIdToDelete"
                                        ];
                                    }
                                  }}
                                  onEditClick={async () => {
                                    const $steps = {};

                                    $steps["updateIsQuestionEditMode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "isQuestionEditMode"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateIsQuestionEditMode"] !=
                                        null &&
                                      typeof $steps[
                                        "updateIsQuestionEditMode"
                                      ] === "object" &&
                                      typeof $steps["updateIsQuestionEditMode"]
                                        .then === "function"
                                    ) {
                                      $steps["updateIsQuestionEditMode"] =
                                        await $steps[
                                          "updateIsQuestionEditMode"
                                        ];
                                    }
                                  }}
                                  onQuestionTextChange={async questionTextValue => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return (() => {
                                                return ($state.updatedQuizDetails.questionText =
                                                  questionTextValue);
                                              })();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }
                                  }}
                                  selectedQuizInfo={$state.selectedQuizInfo}
                                />
                              </div>
                            );
                          })}
                          <CustomAccordionItem
                            data-plasmic-name={"customAccordionItem"}
                            data-plasmic-override={
                              overrides.customAccordionItem
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.customAccordionItem
                            )}
                            expandIcon={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dhb9M
                                )}
                              >
                                <Icon21Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__rnZfy
                                  )}
                                  role={"img"}
                                />
                              </div>
                            }
                            summary={
                              <h6
                                data-plasmic-name={"h6"}
                                data-plasmic-override={overrides.h6}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h6,
                                  projectcss.__wab_text,
                                  sty.h6
                                )}
                              >
                                {"Add New Question"}
                              </h6>
                            }
                          >
                            {(() => {
                              const child$Props = {
                                children: null,
                                className: classNames(
                                  "__wab_instance",
                                  sty.newQuestionForm
                                ),
                                data: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "7ed0e6ce-093c-4727-818e-600d8b5b8615",
                                  userArgs: {},
                                  cacheKey: `plasmic.$.${(() => {
                                    try {
                                      return "getSchema";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}.$.7ed0e6ce-093c-4727-818e-600d8b5b8615.$.`,
                                  invalidatedKeys: null,
                                  roleId: null
                                },
                                dataFormItems: (() => {
                                  const __composite = [
                                    {
                                      key: "id",
                                      inputType: "Text",
                                      fieldId: "id",
                                      label: "id",
                                      name: "id",
                                      hidden: null
                                    },
                                    {
                                      key: "quiz_id",
                                      inputType: "Text",
                                      fieldId: "quiz_id",
                                      label: "quiz_id",
                                      name: "quiz_id",
                                      initialValue: null,
                                      hidden: null
                                    },
                                    {
                                      key: "question_text",
                                      inputType: "Text",
                                      fieldId: "question_text",
                                      label: null,
                                      name: "question_text",
                                      rules: null
                                    },
                                    {
                                      key: "options",
                                      inputType: "Text",
                                      fieldId: "options",
                                      label: null,
                                      name: "options",
                                      rules: null
                                    },
                                    {
                                      key: "point",
                                      inputType: "Text",
                                      fieldId: "point",
                                      label: "point",
                                      name: "point",
                                      initialValue: null,
                                      hidden: null
                                    },
                                    {
                                      key: "correct_answer",
                                      inputType: "Text",
                                      fieldId: "correct_answer",
                                      label: null,
                                      name: "correct_answer",
                                      rules: null
                                    }
                                  ];
                                  __composite["0"]["hidden"] = true;
                                  __composite["1"]["initialValue"] =
                                    $state.allQuizzesTable.selectedRowKey;
                                  __composite["1"]["hidden"] = true;
                                  __composite["2"]["label"] =
                                    "What's the question?";
                                  __composite["2"]["rules"] = [
                                    {
                                      ruleType: "required",
                                      message: "The question is required"
                                    }
                                  ];

                                  __composite["3"]["label"] =
                                    "What are the options available? (options should be seperated by comma e.g true, false)";
                                  __composite["3"]["rules"] = [
                                    {
                                      ruleType: "required",
                                      message: "The options are required"
                                    }
                                  ];

                                  __composite["4"]["initialValue"] = "10";
                                  __composite["4"]["hidden"] = true;
                                  __composite["5"]["label"] =
                                    "What's the correct answer from the given options?";
                                  __composite["5"]["rules"] = [
                                    {
                                      ruleType: "required",
                                      message: "Correct answer is required"
                                    }
                                  ];

                                  return __composite;
                                })(),

                                extendedOnValuesChange: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["newQuestionForm", "value"],
                                    FormWrapper_Helpers
                                  ).apply(null, eventArgs);
                                },
                                formItems: [],
                                labelCol: { span: 8, horizontalOnly: true },
                                layout: "vertical",
                                mode: "simplified",
                                onFinish: async values => {
                                  const $steps = {};

                                  $steps["updateFullFormValues"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["fullFormValues"]
                                          },
                                          operation: 0,
                                          value: {
                                            ...$state?.newQuestionForm?.value,
                                            options:
                                              $state?.newQuestionForm?.value?.options?.split(
                                                ","
                                              )
                                          }
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateFullFormValues"] != null &&
                                    typeof $steps["updateFullFormValues"] ===
                                      "object" &&
                                    typeof $steps["updateFullFormValues"]
                                      .then === "function"
                                  ) {
                                    $steps["updateFullFormValues"] =
                                      await $steps["updateFullFormValues"];
                                  }

                                  $steps["defaultSubmit"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                            opId: "0c5515a0-ac2a-4a37-9e83-c3b5f1480ae6",
                                            userArgs: {
                                              variables: [$state.fullFormValues]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["defaultSubmit"] != null &&
                                    typeof $steps["defaultSubmit"] ===
                                      "object" &&
                                    typeof $steps["defaultSubmit"].then ===
                                      "function"
                                  ) {
                                    $steps["defaultSubmit"] = await $steps[
                                      "defaultSubmit"
                                    ];
                                  }

                                  $steps["fetchQuizInfoById"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                            opId: "718444ab-0dcb-4bcb-86f7-c906331ee065",
                                            userArgs: {
                                              filters: [
                                                $state.allQuizzesTable
                                                  ?.selectedRowKey
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: null,
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["fetchQuizInfoById"] != null &&
                                    typeof $steps["fetchQuizInfoById"] ===
                                      "object" &&
                                    typeof $steps["fetchQuizInfoById"].then ===
                                      "function"
                                  ) {
                                    $steps["fetchQuizInfoById"] = await $steps[
                                      "fetchQuizInfoById"
                                    ];
                                  }

                                  $steps["invokeGlobalAction"] = $steps
                                    .fetchQuizInfoById?.data
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "success",
                                            "New Question Added",
                                            undefined,
                                            undefined,
                                            "top"
                                          ]
                                        };
                                        return $globalActions[
                                          "plasmic-antd5-config-provider.showNotification"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }

                                  $steps["updateSelectedQuizInfo"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["selectedQuizInfo"]
                                          },
                                          operation: 0,
                                          value: $steps?.fetchQuizInfoById?.data
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSelectedQuizInfo"] != null &&
                                    typeof $steps["updateSelectedQuizInfo"] ===
                                      "object" &&
                                    typeof $steps["updateSelectedQuizInfo"]
                                      .then === "function"
                                  ) {
                                    $steps["updateSelectedQuizInfo"] =
                                      await $steps["updateSelectedQuizInfo"];
                                  }
                                },
                                onIsSubmittingChange: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "isSubmitting",
                                    ["newQuestionForm", "isSubmitting"],
                                    FormWrapper_Helpers
                                  ).apply(null, eventArgs);
                                },
                                ref: ref => {
                                  $refs["newQuestionForm"] = ref;
                                },
                                requiredMark: false,
                                submitSlot: (
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__cdgM6
                                    )}
                                    disabled={(() => {
                                      try {
                                        return $state.newQuestionForm
                                          .isSubmitting;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    submitsForm={true}
                                    type={"primary"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__z7TgW
                                      )}
                                    >
                                      {"Submit"}
                                    </div>
                                  </AntdButton>
                                ),
                                wrapperCol: { span: 16, horizontalOnly: true }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "newQuestionForm.value"
                                  },
                                  {
                                    name: "isSubmitting",
                                    plasmicStateName:
                                      "newQuestionForm.isSubmitting"
                                  }
                                ],
                                [],
                                FormWrapper_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <FormWrapper
                                  data-plasmic-name={"newQuestionForm"}
                                  data-plasmic-override={
                                    overrides.newQuestionForm
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                          </CustomAccordionItem>
                          <AntdModal
                            data-plasmic-name={"deleteQuestionModal"}
                            data-plasmic-override={
                              overrides.deleteQuestionModal
                            }
                            cancelText={"No, cancel"}
                            className={classNames(
                              "__wab_instance",
                              sty.deleteQuestionModal
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              styleTokensClassNames
                            )}
                            modalScopeClassName={
                              sty["deleteQuestionModal__modal"]
                            }
                            okText={"Yes, delete"}
                            onOk={async () => {
                              const $steps = {};

                              $steps["postgresDeleteMany"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                        opId: "5b4fe856-77ec-4bda-945c-aa68b4598107",
                                        userArgs: {
                                          conditions: [
                                            $state.questionIdToDelete
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "4853205b-c7e6-4fad-90f8-e9c574f6b3d4",
                                          "0bb4e4c3-b5bc-477c-a0a9-6118a2519034"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresDeleteMany"] != null &&
                                typeof $steps["postgresDeleteMany"] ===
                                  "object" &&
                                typeof $steps["postgresDeleteMany"].then ===
                                  "function"
                              ) {
                                $steps["postgresDeleteMany"] = await $steps[
                                  "postgresDeleteMany"
                                ];
                              }

                              $steps["updateQuestionIdToDelete"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["questionIdToDelete"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateQuestionIdToDelete"] != null &&
                                typeof $steps["updateQuestionIdToDelete"] ===
                                  "object" &&
                                typeof $steps["updateQuestionIdToDelete"]
                                  .then === "function"
                              ) {
                                $steps["updateQuestionIdToDelete"] =
                                  await $steps["updateQuestionIdToDelete"];
                              }

                              $steps["fetchQuizInfoById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                        opId: "718444ab-0dcb-4bcb-86f7-c906331ee065",
                                        userArgs: {
                                          filters: [
                                            $state.allQuizzesTable
                                              ?.selectedRowKey
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: null,
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["fetchQuizInfoById"] != null &&
                                typeof $steps["fetchQuizInfoById"] ===
                                  "object" &&
                                typeof $steps["fetchQuizInfoById"].then ===
                                  "function"
                              ) {
                                $steps["fetchQuizInfoById"] = await $steps[
                                  "fetchQuizInfoById"
                                ];
                              }

                              $steps["updateSelectedQuizInfo"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["selectedQuizInfo"]
                                      },
                                      operation: 0,
                                      value: $steps.fetchQuizInfoById?.data
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelectedQuizInfo"] != null &&
                                typeof $steps["updateSelectedQuizInfo"] ===
                                  "object" &&
                                typeof $steps["updateSelectedQuizInfo"].then ===
                                  "function"
                              ) {
                                $steps["updateSelectedQuizInfo"] = await $steps[
                                  "updateSelectedQuizInfo"
                                ];
                              }
                            }}
                            onOpenChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "deleteQuestionModal",
                                "open"
                              ]).apply(null, eventArgs);
                            }}
                            open={generateStateValueProp($state, [
                              "deleteQuestionModal",
                              "open"
                            ])}
                            title={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0CS
                                )}
                              >
                                <Icon20Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___5JgZr
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t2Is3
                                  )}
                                >
                                  {
                                    "Are you sure you want to delete the question?"
                                  }
                                </div>
                              </div>
                            }
                            trigger={null}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jAwn
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___04DFb
                                )}
                              >
                                {
                                  "If you delete this question, it will be permanently removed from this quiz"
                                }
                              </div>
                            </div>
                          </AntdModal>
                        </div>
                      ) : null}
                    </div>
                    <AntdModal
                      data-plasmic-name={"modal"}
                      data-plasmic-override={overrides.modal}
                      className={classNames("__wab_instance", sty.modal)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames
                      )}
                      hideFooter={true}
                      modalScopeClassName={sty["modal__modal"]}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "modal",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, ["modal", "open"])}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tI7Qn
                          )}
                        >
                          {"Add New Quiz"}
                        </div>
                      }
                      trigger={null}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form2),
                          data: {
                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                            opId: "33891d7b-e265-4db9-b18f-f2fcf84bf7f4",
                            userArgs: {},
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getSchema";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.JZTM1S5D2QfZ.$.33891d7b-e265-4db9-b18f-f2fcf84bf7f4.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              {
                                key: "id",
                                inputType: "Text",
                                fieldId: "id",
                                label: "id",
                                name: "id",
                                hidden: null
                              },
                              {
                                key: "title",
                                inputType: "Text",
                                fieldId: "title",
                                label: null,
                                name: "title",
                                rules: null
                              },
                              {
                                key: "instrument_type",
                                inputType: null,
                                fieldId: "instrument_type",
                                label: null,
                                name: "instrument_type",
                                options: null,
                                rules: null
                              },
                              {
                                key: "level",
                                inputType: null,
                                fieldId: "level",
                                label: null,
                                name: "level",
                                options: null,
                                rules: null
                              },
                              {
                                key: "question_count",
                                inputType: "Number",
                                fieldId: "question_count",
                                label: "question_count",
                                name: "question_count",
                                hidden: null
                              },
                              {
                                key: "quiz_type",
                                inputType: "Text",
                                fieldId: "quiz_type",
                                label: "quiz_type",
                                name: "quiz_type",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "course_id",
                                inputType: "Text",
                                fieldId: "course_id",
                                label: "course_id",
                                name: "course_id",
                                hidden: null
                              }
                            ];
                            __composite["0"]["hidden"] = true;
                            __composite["1"]["label"] =
                              "Quiz Title (e.g Guitar for Advanced Level Quiz)";
                            __composite["1"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Quiz title is required"
                              }
                            ];

                            __composite["2"]["inputType"] = "Select";
                            __composite["2"]["label"] =
                              "Select Instrument Type";
                            __composite["2"]["options"] = (() => {
                              const __composite = [
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null }
                              ];
                              __composite["0"]["label"] = "Voice";
                              __composite["0"]["value"] = "VOICE";
                              __composite["1"]["label"] = "Guitar";
                              __composite["1"]["value"] = "GUITAR";
                              __composite["2"]["label"] = "Strings";
                              __composite["2"]["value"] = "STRINGS";
                              __composite["3"]["label"] = "Woodwind";
                              __composite["3"]["value"] = "WOODWIND";
                              __composite["4"]["label"] = "Piano";
                              __composite["4"]["value"] = "PIANO";
                              __composite["5"]["label"] = "Percussion";
                              __composite["5"]["value"] = "PERCUSSION";
                              return __composite;
                            })();
                            __composite["2"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Instrument type is required"
                              }
                            ];

                            __composite["3"]["inputType"] = "Select";
                            __composite["3"]["label"] = "Select Training Level";
                            __composite["3"]["options"] = (() => {
                              const __composite = [
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null }
                              ];
                              __composite["0"]["label"] = "Beginner";
                              __composite["0"]["value"] = "BEGINNER";
                              __composite["1"]["label"] = "Novice";
                              __composite["1"]["value"] = "NOVICE";
                              __composite["2"]["label"] = "Intermediate";
                              __composite["2"]["value"] = "INTERMEDIATE";
                              __composite["3"]["label"] = "Skilled";
                              __composite["3"]["value"] = "SKILLED";
                              __composite["4"]["label"] = "Advanced";
                              __composite["4"]["value"] = "ADVANCED";
                              return __composite;
                            })();
                            __composite["3"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Training level is required"
                              }
                            ];

                            __composite["4"]["hidden"] = true;
                            __composite["5"]["initialValue"] = "ONBOARDING";
                            __composite["5"]["hidden"] = true;
                            __composite["6"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form2", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["updateIsNotUniqueQuiz"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["isNotUniqueQuiz"]
                                    },
                                    operation: 0,
                                    value:
                                      $queries.getOnboardingQuizzes?.data.some(
                                        item =>
                                          item.level ==
                                            $state.form2.value.level &&
                                          item.instrument_type ==
                                            $state.form2.value.instrument_type
                                      )
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIsNotUniqueQuiz"] != null &&
                              typeof $steps["updateIsNotUniqueQuiz"] ===
                                "object" &&
                              typeof $steps["updateIsNotUniqueQuiz"].then ===
                                "function"
                            ) {
                              $steps["updateIsNotUniqueQuiz"] = await $steps[
                                "updateIsNotUniqueQuiz"
                              ];
                            }

                            $steps["invokeGlobalAction2"] =
                              $state.isNotUniqueQuiz
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "This quiz has been created already",
                                        ``,
                                        undefined,
                                        "top"
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["invokeGlobalAction2"] != null &&
                              typeof $steps["invokeGlobalAction2"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction2"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction2"] = await $steps[
                                "invokeGlobalAction2"
                              ];
                            }

                            $steps["defaultSubmit"] = !$state.isNotUniqueQuiz
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "63a79c7c-ccc3-4405-bd40-1d4056bf34a1",
                                      userArgs: {
                                        variables: [$state.form2.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }

                            $steps["invokeGlobalAction"] =
                              $steps.defaultSubmit &&
                              !$steps.defaultSubmit?.error
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "success",
                                        "Your new quiz has been added!",
                                        "You can proceed by adding questions to the quiz",
                                        20,
                                        "top"
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }

                            $steps["updateModalOpen"] = !$state.isNotUniqueQuiz
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modal", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalOpen"] != null &&
                              typeof $steps["updateModalOpen"] === "object" &&
                              typeof $steps["updateModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalOpen"] = await $steps[
                                "updateModalOpen"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form2", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form2"] = ref;
                          },
                          requiredMark: false,
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__rudas
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6Jhv6
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form2.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form2.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form2"}
                            data-plasmic-override={overrides.form2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </AntdModal>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return (
                      $ctx.SupabaseUser.user &&
                      $ctx.SupabaseUser.user.user_metadata.userRole !== "admin"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Unauthorized
                      data-plasmic-name={"unauthorized"}
                      data-plasmic-override={overrides.unauthorized}
                      className={classNames("__wab_instance", sty.unauthorized)}
                    />
                  </section>
                ) : null}
              </React.Fragment>
            )}
          </DataCtxReader__>
        </AdminPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h5",
    "allQuizzesTable",
    "quizHeading",
    "quizQuestion",
    "customAccordionItem",
    "newQuestionForm",
    "h6",
    "deleteQuestionModal",
    "modal",
    "form2",
    "section",
    "unauthorized"
  ],
  h5: ["h5"],
  allQuizzesTable: ["allQuizzesTable"],
  quizHeading: ["quizHeading"],
  quizQuestion: ["quizQuestion"],
  customAccordionItem: ["customAccordionItem", "newQuestionForm", "h6"],
  newQuestionForm: ["newQuestionForm"],
  h6: ["h6"],
  deleteQuestionModal: ["deleteQuestionModal"],
  modal: ["modal", "form2"],
  form2: ["form2"],
  section: ["section", "unauthorized"],
  unauthorized: ["unauthorized"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof AdminPageLayout;
  h5: "h5";
  allQuizzesTable: typeof RichTable;
  quizHeading: typeof QuizHeading;
  quizQuestion: typeof QuizQuestion;
  customAccordionItem: typeof CustomAccordionItem;
  newQuestionForm: typeof FormWrapper;
  h6: "h6";
  deleteQuestionModal: typeof AntdModal;
  modal: typeof AntdModal;
  form2: typeof FormWrapper;
  section: "section";
  unauthorized: typeof Unauthorized;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddOnboardingQuestions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddOnboardingQuestions__VariantsArgs;
    args?: PlasmicAddOnboardingQuestions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddOnboardingQuestions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAddOnboardingQuestions__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddOnboardingQuestions__ArgProps,
          internalVariantPropNames: PlasmicAddOnboardingQuestions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddOnboardingQuestions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddOnboardingQuestions";
  } else {
    func.displayName = `PlasmicAddOnboardingQuestions.${nodeName}`;
  }
  return func;
}

export const PlasmicAddOnboardingQuestions = Object.assign(
  // Top-level PlasmicAddOnboardingQuestions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h5: makeNodeComponent("h5"),
    allQuizzesTable: makeNodeComponent("allQuizzesTable"),
    quizHeading: makeNodeComponent("quizHeading"),
    quizQuestion: makeNodeComponent("quizQuestion"),
    customAccordionItem: makeNodeComponent("customAccordionItem"),
    newQuestionForm: makeNodeComponent("newQuestionForm"),
    h6: makeNodeComponent("h6"),
    deleteQuestionModal: makeNodeComponent("deleteQuestionModal"),
    modal: makeNodeComponent("modal"),
    form2: makeNodeComponent("form2"),
    section: makeNodeComponent("section"),
    unauthorized: makeNodeComponent("unauthorized"),

    // Metadata about props expected for PlasmicAddOnboardingQuestions
    internalVariantProps: PlasmicAddOnboardingQuestions__VariantProps,
    internalArgProps: PlasmicAddOnboardingQuestions__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAddOnboardingQuestions;
/* prettier-ignore-end */
