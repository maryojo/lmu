/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: OZ09O_elizqY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { CustomAccordionItem } from "../../CustomAccordionItem"; // plasmic-import: Th4N3i4J4xsp/codeComponent
import CourseLessonItem from "../../CourseLessonItem"; // plasmic-import: xJvF3d0NbFPY/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicEditCourseModuleItem.module.css"; // plasmic-import: OZ09O_elizqY/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicEditCourseModuleItem__VariantMembers = {};
export type PlasmicEditCourseModuleItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditCourseModuleItem__VariantsArgs;
export const PlasmicEditCourseModuleItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEditCourseModuleItem__ArgsType = {
  courseData?: any;
  newModuleId?: string;
  courseLessons?: any;
  courseModules?: any;
  currentIndex?: any;
  onNewCoureLessonsListChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicEditCourseModuleItem__ArgsType;
export const PlasmicEditCourseModuleItem__ArgProps = new Array<ArgPropType>(
  "courseData",
  "newModuleId",
  "courseLessons",
  "courseModules",
  "currentIndex",
  "onNewCoureLessonsListChange"
);

export type PlasmicEditCourseModuleItem__OverridesType = {
  root?: Flex__<typeof CustomAccordionItem>;
  h4?: Flex__<"h4">;
  courseLessonItem?: Flex__<typeof CourseLessonItem>;
  table?: Flex__<typeof RichTable>;
  modal5?: Flex__<typeof AntdModal>;
  form8?: Flex__<typeof FormWrapper>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  svg?: Flex__<"svg">;
};

export interface DefaultEditCourseModuleItemProps {
  courseData?: any;
  newModuleId?: string;
  courseLessons?: any;
  courseModules?: any;
  currentIndex?: any;
  onNewCoureLessonsListChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditCourseModuleItem__RenderFunc(props: {
  variants: PlasmicEditCourseModuleItem__VariantsArgs;
  args: PlasmicEditCourseModuleItem__ArgsType;
  overrides: PlasmicEditCourseModuleItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          newModuleId: "",
          courseLessons: [],
          courseModules: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form8.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form8",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form8.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form8",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "newCoureLessonsList",
        type: "readonly",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [],

        onChangeProp: "onNewCoureLessonsListChange"
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getLessonsByModule: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "7fcbf6dd-4e58-4306-9949-ee23370993e1",
        userArgs: {
          filters: [$props.courseModules[$props?.currentIndex]?.id]
        },
        cacheKey: `plasmic.$.7fcbf6dd-4e58-4306-9949-ee23370993e1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <CustomAccordionItem
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      expandIcon={
        <ChevronDownIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      }
      summary={
        <div className={classNames(projectcss.all, sty.freeBox__tnhUl)}>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5___6ZyIe
            )}
          >
            {"Module 1"}
          </h5>
        </div>
      }
    >
      <div className={classNames(projectcss.all, sty.freeBox__jqwbn)}>
        <div className={classNames(projectcss.all, sty.freeBox__estjj)}>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__hXhhz
            )}
          >
            {"Module Details"}
          </h5>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zOvvC
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.courseModules?.[$props?.currentIndex]?.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___2Gr8O)} />

        <div className={classNames(projectcss.all, sty.freeBox___6Ftha)}>
          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4
            )}
          >
            {"You won't believe what happens next."}
          </h4>
          <div className={classNames(projectcss.all, sty.freeBox__rr9K)}>
            <div className={classNames(projectcss.all, sty.freeBox__xv2R)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.courseLessons;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <CourseLessonItem
                    data-plasmic-name={"courseLessonItem"}
                    data-plasmic-override={overrides.courseLessonItem}
                    className={classNames(
                      "__wab_instance",
                      sty.courseLessonItem
                    )}
                    key={currentIndex}
                  />
                );
              })}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fm9PC)}>
            {(() => {
              const child$Props = {
                canSelectRows: "click",
                className: classNames("__wab_instance", sty.table),
                data: (() => {
                  try {
                    return $queries.getLessonsByModule;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                defaultSize: "small",
                fields: (() => {
                  const __composite = [
                    {
                      key: "course_id",
                      fieldId: "course_id",
                      disableSorting: null,
                      isHidden: null
                    },
                    { key: "id", fieldId: "id", isHidden: null },
                    {
                      key: "created_at",
                      fieldId: "created_at",
                      isHidden: null
                    },
                    { key: "module_id", fieldId: "module_id", isHidden: null },
                    { key: "resources", fieldId: "resources" },
                    {
                      key: "status",
                      fieldId: "status",
                      disableSorting: null,
                      isHidden: null
                    },
                    { key: "description", fieldId: "description" },
                    { key: "content", fieldId: "content" },
                    { key: "title", fieldId: "title" }
                  ];
                  __composite["0"]["disableSorting"] = false;
                  __composite["0"]["isHidden"] = true;
                  __composite["1"]["isHidden"] = true;
                  __composite["2"]["isHidden"] = true;
                  __composite["3"]["isHidden"] = true;
                  __composite["5"]["disableSorting"] = false;
                  __composite["5"]["isHidden"] = true;
                  return __composite;
                })(),

                hideColumnPicker: true,
                hideExports: true,
                hideSearch: true,
                onRowSelectionChanged: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKey",
                    ["table", "selectedRowKey"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRow",
                    ["table", "selectedRow"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRows",
                    ["table", "selectedRows"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedRowKeys",
                    ["table", "selectedRowKeys"],
                    RichTable_Helpers
                  ).apply(null, eventArgs);
                },
                pagination: false,
                rowActions: (() => {
                  const __composite = [
                    { type: "item", label: null, onClick: null }
                  ];
                  __composite["0"]["label"] = "Edit";
                  __composite["0"]["onClick"] = async (rowKey, row) => {
                    const $steps = {};

                    $steps["updateTableSelectedRowKey"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["table", "selectedRowKey"]
                            },
                            operation: 0,
                            value: rowKey
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateTableSelectedRowKey"] != null &&
                      typeof $steps["updateTableSelectedRowKey"] === "object" &&
                      typeof $steps["updateTableSelectedRowKey"].then ===
                        "function"
                    ) {
                      $steps["updateTableSelectedRowKey"] = await $steps[
                        "updateTableSelectedRowKey"
                      ];
                    }

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  };
                  return __composite;
                })(),

                rowKey: (() => {
                  try {
                    return "id";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                scopeClassName: sty["table__instance"],
                selectedRowKey: generateStateValueProp($state, [
                  "table",
                  "selectedRowKey"
                ]),
                selectedRowKeys: generateStateValueProp($state, [
                  "table",
                  "selectedRowKeys"
                ]),
                themeResetClassName: classNames(
                  projectcss.root_reset,
                  projectcss.root_reset_tags,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  styleTokensClassNames
                )
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "selectedRowKey",
                    plasmicStateName: "table.selectedRowKey"
                  },
                  {
                    name: "selectedRow",
                    plasmicStateName: "table.selectedRow"
                  },
                  {
                    name: "selectedRows",
                    plasmicStateName: "table.selectedRows"
                  },
                  {
                    name: "selectedRowKeys",
                    plasmicStateName: "table.selectedRowKeys"
                  }
                ],
                [],
                RichTable_Helpers ?? {},
                child$Props
              );

              return (
                <RichTable
                  data-plasmic-name={"table"}
                  data-plasmic-override={overrides.table}
                  {...child$Props}
                />
              );
            })()}
            <div className={classNames(projectcss.all, sty.freeBox__sA7Gq)}>
              <AntdModal
                data-plasmic-name={"modal5"}
                data-plasmic-override={overrides.modal5}
                className={classNames("__wab_instance", sty.modal5)}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  styleTokensClassNames
                )}
                hideFooter={true}
                modalScopeClassName={sty["modal5__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal5", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["modal5", "open"])}
                title={"Modal title"}
                trigger={
                  <AntdButton
                    className={classNames("__wab_instance", sty.button___1RkEa)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bW4Xx
                      )}
                    >
                      {"Add a New Lesson"}
                    </div>
                  </AntdButton>
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__yApQ)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hboRt
                    )}
                  >
                    {"New lesson"}
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form8),
                      data: {
                        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                        opId: "7b1f646f-5d08-4334-ba54-5a85ca24030a",
                        userArgs: {},
                        cacheKey: `plasmic.$.${(() => {
                          try {
                            return "getSchema";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}.$.MyaTTXpoOId0.$.7b1f646f-5d08-4334-ba54-5a85ca24030a.$.`,
                        invalidatedKeys: null,
                        roleId: null
                      },
                      dataFormItems: (() => {
                        const __composite = [
                          {
                            key: "course_id",
                            inputType: "Text",
                            fieldId: "course_id",
                            label: "course_id",
                            name: "course_id",
                            initialValue: null
                          },
                          {
                            key: "id",
                            inputType: "Text",
                            fieldId: "id",
                            label: "id",
                            name: "id",
                            hidden: null
                          },
                          {
                            key: "created_at",
                            inputType: "Text",
                            fieldId: "created_at",
                            label: "created_at",
                            name: "created_at",
                            hidden: null
                          },
                          {
                            key: "module_id",
                            inputType: "Text",
                            fieldId: "module_id",
                            label: "module_id",
                            name: "module_id",
                            initialValue: null,
                            hidden: null
                          },
                          {
                            key: "resources",
                            inputType: "Text",
                            fieldId: "resources",
                            label: "resources",
                            name: "resources"
                          },
                          {
                            key: "status",
                            inputType: "Text",
                            fieldId: "status",
                            label: "status",
                            name: "status"
                          },
                          {
                            key: "description",
                            inputType: "Text",
                            fieldId: "description",
                            label: "description",
                            name: "description"
                          },
                          {
                            key: "content",
                            inputType: "Text",
                            fieldId: "content",
                            label: "content",
                            name: "content"
                          },
                          {
                            key: "title",
                            inputType: "Text",
                            fieldId: "title",
                            label: "title",
                            name: "title"
                          }
                        ];
                        __composite["0"]["initialValue"] =
                          $props.courseData?.id;
                        __composite["1"]["hidden"] = true;
                        __composite["2"]["hidden"] = true;
                        __composite["3"]["initialValue"] =
                          $props.courseModules[$props?.currentIndex]?.id;
                        __composite["3"]["hidden"] = false;
                        return __composite;
                      })(),

                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form8", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [],
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "simplified",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["defaultSubmit"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "7368049f-87c4-4bd7-8c92-92bedf3affc9",
                                  userArgs: {
                                    variables: [$state.form8?.value]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["defaultSubmit"] != null &&
                          typeof $steps["defaultSubmit"] === "object" &&
                          typeof $steps["defaultSubmit"].then === "function"
                        ) {
                          $steps["defaultSubmit"] = await $steps[
                            "defaultSubmit"
                          ];
                        }

                        $steps["getLessonsByModuleId"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "7fcbf6dd-4e58-4306-9949-ee23370993e1",
                                  userArgs: {
                                    filters: [
                                      $props.courseModules[$props.currentIndex]
                                        ?.id
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: null,
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["getLessonsByModuleId"] != null &&
                          typeof $steps["getLessonsByModuleId"] === "object" &&
                          typeof $steps["getLessonsByModuleId"].then ===
                            "function"
                        ) {
                          $steps["getLessonsByModuleId"] = await $steps[
                            "getLessonsByModuleId"
                          ];
                        }

                        $steps["updateNewCourseLessonsList"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["newCoureLessonsList"]
                                },
                                operation: 0,
                                value: $steps.getLessonsByModuleId?.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateNewCourseLessonsList"] != null &&
                          typeof $steps["updateNewCourseLessonsList"] ===
                            "object" &&
                          typeof $steps["updateNewCourseLessonsList"].then ===
                            "function"
                        ) {
                          $steps["updateNewCourseLessonsList"] = await $steps[
                            "updateNewCourseLessonsList"
                          ];
                        }

                        $steps["updateModal5Open"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["modal5", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModal5Open"] != null &&
                          typeof $steps["updateModal5Open"] === "object" &&
                          typeof $steps["updateModal5Open"].then === "function"
                        ) {
                          $steps["updateModal5Open"] = await $steps[
                            "updateModal5Open"
                          ];
                        }
                      },
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form8", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["form8"] = ref;
                      },
                      submitSlot: (
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__yojbj
                          )}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tBkN0
                            )}
                          >
                            {"Submit"}
                          </div>
                        </AntdButton>
                      ),
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form8.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form8.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form8"}
                        data-plasmic-override={overrides.form8}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </AntdModal>
            </div>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                styleTokensClassNames
              )}
              hideFooter={true}
              modalScopeClassName={sty["modal__modal"]}
              onCancel={async () => {
                const $steps = {};

                $steps["updateTableSelectedRowKey"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["table", "selectedRowKey"]
                        },
                        operation: 0,
                        value: undefined
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTableSelectedRowKey"] != null &&
                  typeof $steps["updateTableSelectedRowKey"] === "object" &&
                  typeof $steps["updateTableSelectedRowKey"].then === "function"
                ) {
                  $steps["updateTableSelectedRowKey"] = await $steps[
                    "updateTableSelectedRowKey"
                  ];
                }
              }}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["modal", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={"Modal title"}
              trigger={null}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iAil)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gDlbo
                  )}
                >
                  {"Modal content"}
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    data: {
                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                      opId: "979a45e1-b781-4c68-8a52-6f716227539a",
                      userArgs: {
                        filters: [$state?.table?.selectedRowKey]
                      },
                      cacheKey: `plasmic.$.${(() => {
                        try {
                          return "getOne";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}.$.979a45e1-b781-4c68-8a52-6f716227539a.$.`,
                      invalidatedKeys: null,
                      roleId: null
                    },
                    dataFormItems: (() => {
                      const __composite = [
                        {
                          key: "course_id",
                          inputType: "Text",
                          fieldId: "course_id",
                          label: "course_id",
                          name: "course_id",
                          hidden: null
                        },
                        {
                          key: "id",
                          inputType: "Text",
                          fieldId: "id",
                          label: "id",
                          name: "id"
                        },
                        {
                          key: "created_at",
                          inputType: "Text",
                          fieldId: "created_at",
                          label: "created_at",
                          name: "created_at"
                        },
                        {
                          key: "module_id",
                          inputType: "Text",
                          fieldId: "module_id",
                          label: "module_id",
                          name: "module_id"
                        },
                        {
                          key: "resources",
                          inputType: "Text",
                          fieldId: "resources",
                          label: "resources",
                          name: "resources"
                        },
                        {
                          key: "status",
                          inputType: "Text",
                          fieldId: "status",
                          label: "status",
                          name: "status"
                        },
                        {
                          key: "description",
                          inputType: "Text",
                          fieldId: "description",
                          label: "description",
                          name: "description"
                        },
                        {
                          key: "content",
                          inputType: "Text",
                          fieldId: "content",
                          label: "content",
                          name: "content"
                        },
                        {
                          key: "title",
                          inputType: "Text",
                          fieldId: "title",
                          label: "title",
                          name: "title"
                        }
                      ];
                      __composite["0"]["hidden"] = false;
                      return __composite;
                    })(),

                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "simplified",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["defaultSubmit"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                opId: "12568e04-8074-4026-8e04-dabf35fbccd3",
                                userArgs: {
                                  conditions: [$state?.table?.selectedRowKey],

                                  variables: [$state.form.value]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["defaultSubmit"] != null &&
                        typeof $steps["defaultSubmit"] === "object" &&
                        typeof $steps["defaultSubmit"].then === "function"
                      ) {
                        $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                      }

                      $steps["updateTableSelectedRowKey"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["table", "selectedRowKey"]
                              },
                              operation: 0,
                              value: undefined
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTableSelectedRowKey"] != null &&
                        typeof $steps["updateTableSelectedRowKey"] ===
                          "object" &&
                        typeof $steps["updateTableSelectedRowKey"].then ===
                          "function"
                      ) {
                        $steps["updateTableSelectedRowKey"] = await $steps[
                          "updateTableSelectedRowKey"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: (
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__ixwpv
                        )}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oIqrc
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    ),
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </AntdModal>
          </div>
        </div>
      </div>
    </CustomAccordionItem>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h4",
    "courseLessonItem",
    "table",
    "modal5",
    "form8",
    "modal",
    "form",
    "svg"
  ],
  h4: ["h4"],
  courseLessonItem: ["courseLessonItem"],
  table: ["table"],
  modal5: ["modal5", "form8"],
  form8: ["form8"],
  modal: ["modal", "form"],
  form: ["form"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof CustomAccordionItem;
  h4: "h4";
  courseLessonItem: typeof CourseLessonItem;
  table: typeof RichTable;
  modal5: typeof AntdModal;
  form8: typeof FormWrapper;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditCourseModuleItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditCourseModuleItem__VariantsArgs;
    args?: PlasmicEditCourseModuleItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditCourseModuleItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditCourseModuleItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditCourseModuleItem__ArgProps,
          internalVariantPropNames: PlasmicEditCourseModuleItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditCourseModuleItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditCourseModuleItem";
  } else {
    func.displayName = `PlasmicEditCourseModuleItem.${nodeName}`;
  }
  return func;
}

export const PlasmicEditCourseModuleItem = Object.assign(
  // Top-level PlasmicEditCourseModuleItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    courseLessonItem: makeNodeComponent("courseLessonItem"),
    table: makeNodeComponent("table"),
    modal5: makeNodeComponent("modal5"),
    form8: makeNodeComponent("form8"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicEditCourseModuleItem
    internalVariantProps: PlasmicEditCourseModuleItem__VariantProps,
    internalArgProps: PlasmicEditCourseModuleItem__ArgProps
  }
);

export default PlasmicEditCourseModuleItem;
/* prettier-ignore-end */
