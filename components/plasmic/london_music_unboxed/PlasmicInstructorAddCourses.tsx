/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: XKFrkAIa6kPS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import InstructorPageLayout from "../../InstructorPageLayout"; // plasmic-import: KRlgGOfWJ9fO/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { CustomAccordionItem } from "../../CustomAccordionItem"; // plasmic-import: Th4N3i4J4xsp/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicInstructorAddCourses.module.css"; // plasmic-import: XKFrkAIa6kPS/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicInstructorAddCourses__VariantMembers = {};
export type PlasmicInstructorAddCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstructorAddCourses__VariantsArgs;
export const PlasmicInstructorAddCourses__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInstructorAddCourses__ArgsType = {};
type ArgPropType = keyof PlasmicInstructorAddCourses__ArgsType;
export const PlasmicInstructorAddCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicInstructorAddCourses__OverridesType = {
  root?: Flex__<typeof InstructorPageLayout>;
  h4?: Flex__<"h4">;
  progress?: Flex__<typeof AntdProgress>;
  form?: Flex__<typeof FormWrapper>;
  customAccordionItem?: Flex__<typeof CustomAccordionItem>;
  form2?: Flex__<typeof FormWrapper>;
  form3?: Flex__<typeof FormWrapper>;
  h5?: Flex__<"h5">;
  formField?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  svg?: Flex__<"svg">;
};

export interface DefaultInstructorAddCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstructorAddCourses__RenderFunc(props: {
  variants: PlasmicInstructorAddCourses__VariantsArgs;
  args: PlasmicInstructorAddCourses__ArgsType;
  overrides: PlasmicInstructorAddCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "formStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "courseId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <InstructorPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__qIug)}>
                <div className={classNames(projectcss.all, sty.freeBox__vJecs)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kuShR)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nAxiG)}
                    >
                      <h4
                        data-plasmic-name={"h4"}
                        data-plasmic-override={overrides.h4}
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4
                        )}
                      >
                        {"Add New Course"}
                      </h4>
                      <AntdProgress
                        data-plasmic-name={"progress"}
                        data-plasmic-override={overrides.progress}
                        className={classNames("__wab_instance", sty.progress)}
                        percent={50}
                        size={"default"}
                        status={"normal"}
                        stepColors={[{}]}
                        steps={3}
                        strokeColor={true ? "#93C5FD" : undefined}
                        trailColor={true ? "#DBEAFE" : undefined}
                        type={"line"}
                      />
                    </div>
                  </div>
                  {(() => {
                    try {
                      return $state.formStep === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form),
                          data: {
                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                            opId: "f7d839c1-d12f-450a-94d2-e76b0d61edcc",
                            userArgs: {},
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getSchema";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.f7d839c1-d12f-450a-94d2-e76b0d61edcc.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              {
                                key: "title",
                                inputType: "Text",
                                fieldId: "title",
                                label: null,
                                name: "title",
                                rules: null
                              },
                              {
                                key: "description",
                                inputType: null,
                                fieldId: "description",
                                label: null,
                                name: "description",
                                rules: null
                              },
                              {
                                key: "training_level",
                                inputType: "Text",
                                fieldId: "training_level",
                                label: null,
                                name: "training_level",
                                rules: null
                              },
                              {
                                key: "instrument_category",
                                inputType: null,
                                fieldId: "instrument_category",
                                label: null,
                                name: "instrument_category",
                                options: null,
                                rules: null
                              },
                              {
                                key: "cover_image",
                                inputType: "Text",
                                fieldId: "cover_image",
                                label: null,
                                name: "cover_image",
                                rules: null
                              },
                              {
                                key: "status",
                                inputType: "Text",
                                fieldId: "status",
                                label: "status",
                                name: "status",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "created_by",
                                inputType: "Text",
                                fieldId: "created_by",
                                label: "created_by",
                                name: "created_by",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "id",
                                inputType: "Text",
                                fieldId: "id",
                                label: "id",
                                name: "id",
                                hidden: null
                              },
                              {
                                key: "created_at",
                                inputType: "Text",
                                fieldId: "created_at",
                                label: "created_at",
                                name: "created_at",
                                hidden: null
                              }
                            ];
                            __composite["0"]["label"] = "Title";
                            __composite["0"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Course title is required"
                              }
                            ];

                            __composite["1"]["inputType"] = "Text Area";
                            __composite["1"]["label"] = "Description";
                            __composite["1"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Course description is required"
                              }
                            ];

                            __composite["2"]["label"] = "Training Level";
                            __composite["2"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Training level is required"
                              }
                            ];

                            __composite["3"]["inputType"] = "Text";
                            __composite["3"]["label"] = "Instrument Category";
                            __composite["3"]["options"] = [];
                            __composite["3"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Instrument category is required"
                              }
                            ];

                            __composite["4"]["label"] = "Link to Cover Image";
                            __composite["4"]["rules"] = [
                              {
                                ruleType: "advanced",
                                custom: (rule, value) => {
                                  return (() => {
                                    if ($state.form?.value?.cover_image) {
                                      let url = $state.form?.value?.cover_image;
                                      const urlPattern =
                                        /^(ftp|http|https):\/\/[^ "]+$/;
                                      return urlPattern.test(url);
                                    } else {
                                      return true;
                                    }
                                  })();
                                },
                                message: "Link should be a valid URL"
                              }
                            ];

                            __composite["5"]["initialValue"] = "INACTIVE";
                            __composite["5"]["hidden"] = true;
                            __composite["6"]["initialValue"] =
                              $ctx.SupabaseUser?.user?.id;
                            __composite["6"]["hidden"] = true;
                            __composite["7"]["hidden"] = true;
                            __composite["8"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "6e68e792-327d-49b7-a9b2-2ad404628b3f",
                                      userArgs: {
                                        variables: [$state.form.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }

                            $steps["updateCourseId"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["courseId"]
                                    },
                                    operation: 0,
                                    value: $steps?.defaultSubmit?.data[0]?.id
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCourseId"] != null &&
                              typeof $steps["updateCourseId"] === "object" &&
                              typeof $steps["updateCourseId"].then ===
                                "function"
                            ) {
                              $steps["updateCourseId"] = await $steps[
                                "updateCourseId"
                              ];
                            }

                            $steps["updateFormStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["formStep"]
                                    },
                                    operation: 0,
                                    value: 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFormStep"] != null &&
                              typeof $steps["updateFormStep"] === "object" &&
                              typeof $steps["updateFormStep"].then ===
                                "function"
                            ) {
                              $steps["updateFormStep"] = await $steps[
                                "updateFormStep"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form"] = ref;
                          },
                          requiredMark: "optional",
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button___7P03P
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__if2Jw
                                )}
                              >
                                {"Next"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                  {(() => {
                    try {
                      return $state.formStep === 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <CustomAccordionItem
                      data-plasmic-name={"customAccordionItem"}
                      data-plasmic-override={overrides.customAccordionItem}
                      className={classNames(
                        "__wab_instance",
                        sty.customAccordionItem
                      )}
                      expandIcon={
                        <ChevronDownIcon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      }
                      summary={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4YtkN
                          )}
                        >
                          <h5
                            data-plasmic-name={"h5"}
                            data-plasmic-override={overrides.h5}
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5
                            )}
                          >
                            {"Module 1"}
                          </h5>
                          <FormItemWrapper
                            data-plasmic-name={"formField"}
                            data-plasmic-override={overrides.formField}
                            className={classNames(
                              "__wab_instance",
                              sty.formField
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eYg1M
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            noLabel={true}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input2
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input2", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: "Enter mdule title",
                                value: generateStateValueProp($state, [
                                  "input2",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input2.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input2"}
                                  data-plasmic-override={overrides.input2}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__qvpMk
                            )}
                            size={"small"}
                            type={"default"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___17D9Q
                              )}
                            >
                              {"Save"}
                            </div>
                          </AntdButton>
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form2),
                          data: {
                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                            opId: "768eb389-cca8-4009-a49e-fdba05bcc295",
                            userArgs: {},
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getSchema";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.768eb389-cca8-4009-a49e-fdba05bcc295.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              {
                                key: "title",
                                inputType: "Text",
                                fieldId: "title",
                                label: "title",
                                name: "title",
                                noLabel: null
                              },
                              {
                                key: "description",
                                inputType: "Text",
                                fieldId: "description",
                                label: "description",
                                name: "description",
                                hidden: null
                              },
                              {
                                key: "id",
                                inputType: "Text",
                                fieldId: "id",
                                label: "id",
                                name: "id",
                                hidden: null
                              },
                              {
                                key: "position",
                                inputType: "Number",
                                fieldId: "position",
                                label: "position",
                                name: "position",
                                hidden: null
                              },
                              {
                                key: "created_at",
                                inputType: "Text",
                                fieldId: "created_at",
                                label: "created_at",
                                name: "created_at",
                                hidden: null
                              },
                              {
                                key: "course_id",
                                inputType: "Text",
                                fieldId: "course_id",
                                label: "course_id",
                                name: "course_id",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "status",
                                inputType: "Text",
                                fieldId: "status",
                                label: "status",
                                name: "status",
                                hidden: null
                              }
                            ];
                            __composite["0"]["noLabel"] = true;
                            __composite["1"]["hidden"] = true;
                            __composite["2"]["hidden"] = true;
                            __composite["3"]["hidden"] = true;
                            __composite["4"]["hidden"] = true;
                            __composite["5"]["initialValue"] = $state?.courseId;
                            __composite["5"]["hidden"] = true;
                            __composite["6"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form2", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "inline",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "589ae5f9-4a9d-45fe-9bd2-f1e680d5886d",
                                      userArgs: {
                                        variables: [$state.form2.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form2", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form2"] = ref;
                          },
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__nSx17
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2SIxc
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form2.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form2.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form2"}
                            data-plasmic-override={overrides.form2}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form3),
                          data: {
                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                            opId: "7b1f646f-5d08-4334-ba54-5a85ca24030a",
                            userArgs: {},
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getSchema";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.7b1f646f-5d08-4334-ba54-5a85ca24030a.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              {
                                key: "title",
                                inputType: "Text",
                                fieldId: "title",
                                label: null,
                                name: "title"
                              },
                              {
                                key: "description",
                                inputType: "Text",
                                fieldId: "description",
                                label: "description",
                                name: "description",
                                hidden: null
                              },
                              {
                                key: "id",
                                inputType: "Text",
                                fieldId: "id",
                                label: "id",
                                name: "id",
                                hidden: null
                              },
                              {
                                key: "content",
                                inputType: null,
                                fieldId: "content",
                                label: null,
                                name: "content"
                              },
                              {
                                key: "module_id",
                                inputType: "Text",
                                fieldId: "module_id",
                                label: "module_id",
                                name: "module_id",
                                hidden: null
                              },
                              {
                                key: "created_at",
                                inputType: "Text",
                                fieldId: "created_at",
                                label: "created_at",
                                name: "created_at",
                                hidden: null
                              },
                              {
                                key: "status",
                                inputType: "Text",
                                fieldId: "status",
                                label: "status",
                                name: "status",
                                hidden: null
                              },
                              {
                                key: "resources",
                                inputType: "Text",
                                fieldId: "resources",
                                label: null,
                                name: "resources"
                              }
                            ];
                            __composite["0"]["label"] = "Lesson Title";
                            __composite["1"]["hidden"] = true;
                            __composite["2"]["hidden"] = true;
                            __composite["3"]["inputType"] = "Text Area";
                            __composite["3"]["label"] = "Lesson Content";
                            __composite["4"]["hidden"] = true;
                            __composite["5"]["hidden"] = true;
                            __composite["6"]["hidden"] = true;
                            __composite["7"]["label"] = "Learning Resources";
                            return __composite;
                          })(),

                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form3", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "81a36d92-0e6d-4040-b600-480713ff98f5",
                                      userArgs: {
                                        variables: [$state.form3.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form3", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form3"] = ref;
                          },
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__az2Lt
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oasKf
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form3.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form3.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form3"}
                            data-plasmic-override={overrides.form3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </CustomAccordionItem>
                  ) : null}
                </div>
              </div>
            )}
          </DataCtxReader__>
        </InstructorPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h4",
    "progress",
    "form",
    "customAccordionItem",
    "form2",
    "form3",
    "h5",
    "formField",
    "input2",
    "svg"
  ],
  h4: ["h4"],
  progress: ["progress"],
  form: ["form"],
  customAccordionItem: [
    "customAccordionItem",
    "form2",
    "form3",
    "h5",
    "formField",
    "input2",
    "svg"
  ],
  form2: ["form2"],
  form3: ["form3"],
  h5: ["h5"],
  formField: ["formField", "input2"],
  input2: ["input2"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof InstructorPageLayout;
  h4: "h4";
  progress: typeof AntdProgress;
  form: typeof FormWrapper;
  customAccordionItem: typeof CustomAccordionItem;
  form2: typeof FormWrapper;
  form3: typeof FormWrapper;
  h5: "h5";
  formField: typeof FormItemWrapper;
  input2: typeof AntdInput;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstructorAddCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstructorAddCourses__VariantsArgs;
    args?: PlasmicInstructorAddCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstructorAddCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstructorAddCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstructorAddCourses__ArgProps,
          internalVariantPropNames: PlasmicInstructorAddCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstructorAddCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstructorAddCourses";
  } else {
    func.displayName = `PlasmicInstructorAddCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicInstructorAddCourses = Object.assign(
  // Top-level PlasmicInstructorAddCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    progress: makeNodeComponent("progress"),
    form: makeNodeComponent("form"),
    customAccordionItem: makeNodeComponent("customAccordionItem"),
    form2: makeNodeComponent("form2"),
    form3: makeNodeComponent("form3"),
    h5: makeNodeComponent("h5"),
    formField: makeNodeComponent("formField"),
    input2: makeNodeComponent("input2"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicInstructorAddCourses
    internalVariantProps: PlasmicInstructorAddCourses__VariantProps,
    internalArgProps: PlasmicInstructorAddCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstructorAddCourses;
/* prettier-ignore-end */
