/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: ongOogzLEdrq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import GeneralResourceCard from "../../GeneralResourceCard"; // plasmic-import: aJ1uzNYjouuX/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicResourceGrid.module.css"; // plasmic-import: ongOogzLEdrq/css

createPlasmicElementProxy;

export type PlasmicResourceGrid__VariantMembers = {};
export type PlasmicResourceGrid__VariantsArgs = {};
type VariantPropType = keyof PlasmicResourceGrid__VariantsArgs;
export const PlasmicResourceGrid__VariantProps = new Array<VariantPropType>();

export type PlasmicResourceGrid__ArgsType = {
  resourceList?: any;
  maximumItemCount?: number;
};
type ArgPropType = keyof PlasmicResourceGrid__ArgsType;
export const PlasmicResourceGrid__ArgProps = new Array<ArgPropType>(
  "resourceList",
  "maximumItemCount"
);

export type PlasmicResourceGrid__OverridesType = {
  root?: Flex__<"div">;
  generalResourceCard?: Flex__<typeof GeneralResourceCard>;
};

export interface DefaultResourceGridProps {
  resourceList?: any;
  maximumItemCount?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResourceGrid__RenderFunc(props: {
  variants: PlasmicResourceGrid__VariantsArgs;
  args: PlasmicResourceGrid__ArgsType;
  overrides: PlasmicResourceGrid__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return (() => {
              if ($props.maximumItemCount) {
                return $props?.resourceList?.data?.slice(
                  0,
                  $props.maximumItemCount
                );
              } else {
                return $props?.resourceList?.data;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.column__eQoFz)}
            key={currentIndex}
          >
            <GeneralResourceCard
              data-plasmic-name={"generalResourceCard"}
              data-plasmic-override={overrides.generalResourceCard}
              className={classNames("__wab_instance", sty.generalResourceCard)}
            />
          </div>
        );
      })}
      <div className={classNames(projectcss.all, sty.column__qM23)} />

      <div className={classNames(projectcss.all, sty.column__kPcoD)} />

      <div className={classNames(projectcss.all, sty.column__jbj1W)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "generalResourceCard"],
  generalResourceCard: ["generalResourceCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  generalResourceCard: typeof GeneralResourceCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResourceGrid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResourceGrid__VariantsArgs;
    args?: PlasmicResourceGrid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResourceGrid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicResourceGrid__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResourceGrid__ArgProps,
          internalVariantPropNames: PlasmicResourceGrid__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResourceGrid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResourceGrid";
  } else {
    func.displayName = `PlasmicResourceGrid.${nodeName}`;
  }
  return func;
}

export const PlasmicResourceGrid = Object.assign(
  // Top-level PlasmicResourceGrid renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    generalResourceCard: makeNodeComponent("generalResourceCard"),

    // Metadata about props expected for PlasmicResourceGrid
    internalVariantProps: PlasmicResourceGrid__VariantProps,
    internalArgProps: PlasmicResourceGrid__ArgProps
  }
);

export default PlasmicResourceGrid;
/* prettier-ignore-end */
