/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: 9B6tkusLLrZw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CustomAccordionItem } from "../../CustomAccordionItem"; // plasmic-import: Th4N3i4J4xsp/codeComponent
import { RichList } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-list";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicViewCourseModuleItem.module.css"; // plasmic-import: 9B6tkusLLrZw/css

createPlasmicElementProxy;

export type PlasmicViewCourseModuleItem__VariantMembers = {};
export type PlasmicViewCourseModuleItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicViewCourseModuleItem__VariantsArgs;
export const PlasmicViewCourseModuleItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicViewCourseModuleItem__ArgsType = {
  currentIndex?: number;
  courseModules?: any;
  courseLessons?: any;
  currentItem?: any;
  currentViewCourse?: any;
  setCurrentDisplayLesson?: (lesson: any) => void;
};
type ArgPropType = keyof PlasmicViewCourseModuleItem__ArgsType;
export const PlasmicViewCourseModuleItem__ArgProps = new Array<ArgPropType>(
  "currentIndex",
  "courseModules",
  "courseLessons",
  "currentItem",
  "currentViewCourse",
  "setCurrentDisplayLesson"
);

export type PlasmicViewCourseModuleItem__OverridesType = {
  root?: Flex__<typeof CustomAccordionItem>;
  freeBox?: Flex__<"div">;
  dataList?: Flex__<typeof RichList>;
};

export interface DefaultViewCourseModuleItemProps {
  currentIndex?: number;
  courseModules?: any;
  courseLessons?: any;
  currentItem?: any;
  currentViewCourse?: any;
  setCurrentDisplayLesson?: (lesson: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicViewCourseModuleItem__RenderFunc(props: {
  variants: PlasmicViewCourseModuleItem__VariantsArgs;
  args: PlasmicViewCourseModuleItem__ArgsType;
  overrides: PlasmicViewCourseModuleItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <CustomAccordionItem
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      expandIcon={">"}
      summary={
        <React.Fragment>
          {(() => {
            try {
              return $props.courseModules?.[$props.currentIndex]?.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Accordion Summary";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      }
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <RichList
          data-plasmic-name={"dataList"}
          data-plasmic-override={overrides.dataList}
          bordered={true}
          className={classNames("__wab_instance", sty.dataList)}
          content={(() => {
            const __composite = [{ key: "id", fieldId: null, role: "content" }];
            __composite["0"]["fieldId"] = "description";
            return __composite;
          })()}
          data={(() => {
            try {
              return $props.courseLessons.filter(
                lesson => lesson.module_id === $props.currentItem?.id
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          hideSearch={true}
          pagination={false}
          rowActions={(() => {
            const __composite = [{ type: "item", label: null, onClick: null }];
            __composite["0"]["label"] = "Start";
            __composite["0"]["onClick"] = async (rowKey, row) => {
              const $steps = {};

              $steps["runSetCurrentDisplayLesson"] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props["setCurrentDisplayLesson"],
                      args: [
                        (() => {
                          try {
                            return row;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runSetCurrentDisplayLesson"] != null &&
                typeof $steps["runSetCurrentDisplayLesson"] === "object" &&
                typeof $steps["runSetCurrentDisplayLesson"].then === "function"
              ) {
                $steps["runSetCurrentDisplayLesson"] = await $steps[
                  "runSetCurrentDisplayLesson"
                ];
              }
            };
            return __composite;
          })()}
          subtitle={[{}]}
        />
      </div>
    </CustomAccordionItem>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "dataList"],
  freeBox: ["freeBox", "dataList"],
  dataList: ["dataList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof CustomAccordionItem;
  freeBox: "div";
  dataList: typeof RichList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicViewCourseModuleItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicViewCourseModuleItem__VariantsArgs;
    args?: PlasmicViewCourseModuleItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicViewCourseModuleItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicViewCourseModuleItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicViewCourseModuleItem__ArgProps,
          internalVariantPropNames: PlasmicViewCourseModuleItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicViewCourseModuleItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicViewCourseModuleItem";
  } else {
    func.displayName = `PlasmicViewCourseModuleItem.${nodeName}`;
  }
  return func;
}

export const PlasmicViewCourseModuleItem = Object.assign(
  // Top-level PlasmicViewCourseModuleItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    dataList: makeNodeComponent("dataList"),

    // Metadata about props expected for PlasmicViewCourseModuleItem
    internalVariantProps: PlasmicViewCourseModuleItem__VariantProps,
    internalArgProps: PlasmicViewCourseModuleItem__ArgProps
  }
);

export default PlasmicViewCourseModuleItem;
/* prettier-ignore-end */
