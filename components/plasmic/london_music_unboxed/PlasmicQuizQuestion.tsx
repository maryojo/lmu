/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: HQ7S7EYcQqWT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CustomAccordionItem } from "../../CustomAccordionItem"; // plasmic-import: Th4N3i4J4xsp/codeComponent
import RadioGroup from "../../RadioGroup"; // plasmic-import: 9fgJVBRabwM8/component
import Radio from "../../Radio"; // plasmic-import: TM1IOUI2mayj/component
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import TextInput from "../../TextInput"; // plasmic-import: DoqLM-i_9RsN/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicQuizQuestion.module.css"; // plasmic-import: HQ7S7EYcQqWT/css

import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: NdSpYtsShF-m/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: dYXFQotiGoff/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon

createPlasmicElementProxy;

export type PlasmicQuizQuestion__VariantMembers = {
  editQuestionVariant: "editQuestionVariant";
};
export type PlasmicQuizQuestion__VariantsArgs = {
  editQuestionVariant?: SingleBooleanChoiceArg<"editQuestionVariant">;
};
type VariantPropType = keyof PlasmicQuizQuestion__VariantsArgs;
export const PlasmicQuizQuestion__VariantProps = new Array<VariantPropType>(
  "editQuestionVariant"
);

export type PlasmicQuizQuestion__ArgsType = {
  selectedQuizInfo?: any;
  currentIndex?: any;
  handleSaveChangeClick?: (questionInfo: any) => void;
  isSaving?: boolean;
  updatedQuizInfo?: any;
  onDeleteQuestion?: () => void;
  onQuestionTextChange?: (questionTextValue: string) => void;
  onCorrectAnswerChange?: (correctAnswerValue: string) => void;
  onEditClick?: () => void;
};
type ArgPropType = keyof PlasmicQuizQuestion__ArgsType;
export const PlasmicQuizQuestion__ArgProps = new Array<ArgPropType>(
  "selectedQuizInfo",
  "currentIndex",
  "handleSaveChangeClick",
  "isSaving",
  "updatedQuizInfo",
  "onDeleteQuestion",
  "onQuestionTextChange",
  "onCorrectAnswerChange",
  "onEditClick"
);

export type PlasmicQuizQuestion__OverridesType = {
  root?: Flex__<typeof CustomAccordionItem>;
  radioGroup?: Flex__<typeof RadioGroup>;
  h6?: Flex__<"h6">;
  textInput?: Flex__<typeof TextInput>;
};

export interface DefaultQuizQuestionProps {
  selectedQuizInfo?: any;
  currentIndex?: any;
  handleSaveChangeClick?: (questionInfo: any) => void;
  isSaving?: boolean;
  updatedQuizInfo?: any;
  onDeleteQuestion?: () => void;
  onQuestionTextChange?: (questionTextValue: string) => void;
  onCorrectAnswerChange?: (correctAnswerValue: string) => void;
  onEditClick?: () => void;
  editQuestionVariant?: SingleBooleanChoiceArg<"editQuestionVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuizQuestion__RenderFunc(props: {
  variants: PlasmicQuizQuestion__VariantsArgs;
  args: PlasmicQuizQuestion__ArgsType;
  overrides: PlasmicQuizQuestion__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          selectedQuizInfo: (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })(),
          isSaving: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "editQuestionVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.editQuestionVariant
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props?.selectedQuizInfo[$props?.currentIndex]
                ?.question_text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <CustomAccordionItem
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rooteditQuestionVariant]: hasVariant(
            $state,
            "editQuestionVariant",
            "editQuestionVariant"
          )
        }
      )}
      expandIcon={
        <ChevronDownIcon
          className={classNames(projectcss.all, sty.svg__iG4F1)}
          role={"img"}
        />
      }
      summary={
        <React.Fragment>
          <h6
            data-plasmic-name={"h6"}
            data-plasmic-override={overrides.h6}
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6,
              {
                [sty.h6editQuestionVariant]: hasVariant(
                  $state,
                  "editQuestionVariant",
                  "editQuestionVariant"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.selectedQuizInfo[$props.currentIndex]
                    .question_text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h6>
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput, {
              [sty.textInputeditQuestionVariant]: hasVariant(
                $state,
                "editQuestionVariant",
                "editQuestionVariant"
              )
            })}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["textInput", "value"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["runOnQuestionTextChange"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onQuestionTextChange"],
                        args: [
                          (() => {
                            try {
                              return $state.textInput?.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnQuestionTextChange"] != null &&
                  typeof $steps["runOnQuestionTextChange"] === "object" &&
                  typeof $steps["runOnQuestionTextChange"].then === "function"
                ) {
                  $steps["runOnQuestionTextChange"] = await $steps[
                    "runOnQuestionTextChange"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            value={generateStateValueProp($state, ["textInput", "value"])}
          />
        </React.Fragment>
      }
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__aqNmW, {
          [sty.freeBoxeditQuestionVariant__aqNmWbwbnT]: hasVariant(
            $state,
            "editQuestionVariant",
            "editQuestionVariant"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rPY5,
            {
              [sty.texteditQuestionVariant__rPY5BwbnT]: hasVariant(
                $state,
                "editQuestionVariant",
                "editQuestionVariant"
              )
            }
          )}
        >
          {"The answer options available are:"}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__i5OO5, {
            [sty.freeBoxeditQuestionVariant__i5OO5BwbnT]: hasVariant(
              $state,
              "editQuestionVariant",
              "editQuestionVariant"
            )
          })}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.selectedQuizInfo[$props.currentIndex].options;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentOptionItem = __plasmic_item_0;
            const currentOptionIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jsV7,
                  {
                    [sty.texteditQuestionVariant__jsV7BwbnT]: hasVariant(
                      $state,
                      "editQuestionVariant",
                      "editQuestionVariant"
                    )
                  }
                )}
                key={currentOptionIndex}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.selectedQuizInfo[$props.currentIndex]
                        .options[currentOptionIndex];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            );
          })}
        </div>
        <RadioGroup
          data-plasmic-name={"radioGroup"}
          data-plasmic-override={overrides.radioGroup}
          className={classNames("__wab_instance", sty.radioGroup, {
            [sty.radioGroupeditQuestionVariant]: hasVariant(
              $state,
              "editQuestionVariant",
              "editQuestionVariant"
            )
          })}
          defaultValue={(() => {
            try {
              return $props?.selectedQuizInfo[$props?.currentIndex]
                ?.correct_answer;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["radioGroup", "value"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["runOnCorrectAnswerChange"] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props["onCorrectAnswerChange"],
                      args: [
                        (() => {
                          try {
                            return $state.radioGroup?.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runOnCorrectAnswerChange"] != null &&
                typeof $steps["runOnCorrectAnswerChange"] === "object" &&
                typeof $steps["runOnCorrectAnswerChange"].then === "function"
              ) {
                $steps["runOnCorrectAnswerChange"] = await $steps[
                  "runOnCorrectAnswerChange"
                ];
              }
            }).apply(null, eventArgs);
          }}
          options={
            <div className={classNames(projectcss.all, sty.freeBox___5Xw3W)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props?.selectedQuizInfo[$props?.currentIndex]
                      ?.options;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Radio
                    className={classNames("__wab_instance", sty.radio__bQhFn)}
                    key={currentIndex}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2EDv0
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    value={(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
              <Radio
                className={classNames("__wab_instance", sty.radio__oBb2V, {
                  [sty.radioeditQuestionVariant__oBb2VbwbnT]: hasVariant(
                    $state,
                    "editQuestionVariant",
                    "editQuestionVariant"
                  )
                })}
                label={"Option 2"}
                value={"option2"}
              />

              <Radio
                className={classNames("__wab_instance", sty.radio__qbAbY, {
                  [sty.radioeditQuestionVariant__qbAbYbwbnT]: hasVariant(
                    $state,
                    "editQuestionVariant",
                    "editQuestionVariant"
                  )
                })}
                label={"Option 3"}
                value={"option3"}
              />
            </div>
          }
          showLabel={false}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__f7Sj8, {
          [sty.freeBoxeditQuestionVariant__f7Sj8BwbnT]: hasVariant(
            $state,
            "editQuestionVariant",
            "editQuestionVariant"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mKrlt,
            {
              [sty.texteditQuestionVariant__mKrltbwbnT]: hasVariant(
                $state,
                "editQuestionVariant",
                "editQuestionVariant"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return `The correct answer is ${
                  $props.selectedQuizInfo[$props.currentIndex].correct_answer
                }`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "The correct answer is ";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__lXloR, {
            [sty.freeBoxeditQuestionVariant__lXloRbwbnT]: hasVariant(
              $state,
              "editQuestionVariant",
              "editQuestionVariant"
            )
          })}
        >
          <Button
            className={classNames("__wab_instance", sty.button__tXVt5, {
              [sty.buttoneditQuestionVariant__tXVt5BwbnT]: hasVariant(
                $state,
                "editQuestionVariant",
                "editQuestionVariant"
              )
            })}
            color={"errorDestructive"}
            iconStart={true}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ppmOb
                )}
              >
                {"Delete Question"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["runOnDeleteQuestion"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["onDeleteQuestion"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runOnDeleteQuestion"] != null &&
                typeof $steps["runOnDeleteQuestion"] === "object" &&
                typeof $steps["runOnDeleteQuestion"].then === "function"
              ) {
                $steps["runOnDeleteQuestion"] = await $steps[
                  "runOnDeleteQuestion"
                ];
              }
            }}
            start={
              <Icon19Icon
                className={classNames(projectcss.all, sty.svg__iHain, {
                  [sty.svgeditQuestionVariant__iHainbwbnT]: hasVariant(
                    $state,
                    "editQuestionVariant",
                    "editQuestionVariant"
                  )
                })}
                role={"img"}
              />
            }
            type={"bordered"}
          />

          <Button
            className={classNames("__wab_instance", sty.button__vNn, {
              [sty.buttoneditQuestionVariant__vNnbwbnT]: hasVariant(
                $state,
                "editQuestionVariant",
                "editQuestionVariant"
              )
            })}
            iconStart={true}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7BCzZ
                )}
              >
                {"Edit Question"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["updateEditQuestionVariant"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "editQuestionVariant",
                      operation: 4,
                      value: "editQuestionVariant"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, true);
                      return true;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateEditQuestionVariant"] != null &&
                typeof $steps["updateEditQuestionVariant"] === "object" &&
                typeof $steps["updateEditQuestionVariant"].then === "function"
              ) {
                $steps["updateEditQuestionVariant"] = await $steps[
                  "updateEditQuestionVariant"
                ];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return undefined;
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            start={
              <Icon17Icon
                className={classNames(projectcss.all, sty.svg___28RVy, {
                  [sty.svgeditQuestionVariant___28RVybwbnT]: hasVariant(
                    $state,
                    "editQuestionVariant",
                    "editQuestionVariant"
                  )
                })}
                role={"img"}
              />
            }
            type={"bordered"}
          />
        </div>
        {(
          hasVariant($state, "editQuestionVariant", "editQuestionVariant")
            ? true
            : false
        ) ? (
          <Button
            className={classNames("__wab_instance", sty.button__kMuDz, {
              [sty.buttoneditQuestionVariant__kMuDZbwbnT]: hasVariant(
                $state,
                "editQuestionVariant",
                "editQuestionVariant"
              )
            })}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nksjm
                )}
              >
                {"Cancel"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["updateEditQuestionVariant"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "editQuestionVariant",
                      operation: 6,
                      value: "editQuestionVariant"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateEditQuestionVariant"] != null &&
                typeof $steps["updateEditQuestionVariant"] === "object" &&
                typeof $steps["updateEditQuestionVariant"].then === "function"
              ) {
                $steps["updateEditQuestionVariant"] = await $steps[
                  "updateEditQuestionVariant"
                ];
              }
            }}
            start={
              <Icon17Icon
                className={classNames(projectcss.all, sty.svg__qKgiR, {
                  [sty.svgeditQuestionVariant__qKgiRbwbnT]: hasVariant(
                    $state,
                    "editQuestionVariant",
                    "editQuestionVariant"
                  )
                })}
                role={"img"}
              />
            }
            type={"bordered"}
          />
        ) : null}
        <Button
          className={classNames("__wab_instance", sty.button__hsr9M, {
            [sty.buttoneditQuestionVariant__hsr9MbwbnT]: hasVariant(
              $state,
              "editQuestionVariant",
              "editQuestionVariant"
            )
          })}
          disabled={(() => {
            try {
              return $props.isSaving === true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__secw3
              )}
            >
              {"Save Changes"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["runHandleSaveChangeClick"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["handleSaveChangeClick"],
                    args: [
                      (() => {
                        try {
                          return $props.updatedQuizInfo;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runHandleSaveChangeClick"] != null &&
              typeof $steps["runHandleSaveChangeClick"] === "object" &&
              typeof $steps["runHandleSaveChangeClick"].then === "function"
            ) {
              $steps["runHandleSaveChangeClick"] = await $steps[
                "runHandleSaveChangeClick"
              ];
            }

            $steps["updateEditQuestionVariant"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "editQuestionVariant",
                    operation: 6,
                    value: "editQuestionVariant"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEditQuestionVariant"] != null &&
              typeof $steps["updateEditQuestionVariant"] === "object" &&
              typeof $steps["updateEditQuestionVariant"].then === "function"
            ) {
              $steps["updateEditQuestionVariant"] = await $steps[
                "updateEditQuestionVariant"
              ];
            }
          }}
        />
      </div>
    </CustomAccordionItem>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "radioGroup", "h6", "textInput"],
  radioGroup: ["radioGroup"],
  h6: ["h6"],
  textInput: ["textInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof CustomAccordionItem;
  radioGroup: typeof RadioGroup;
  h6: "h6";
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuizQuestion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuizQuestion__VariantsArgs;
    args?: PlasmicQuizQuestion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuizQuestion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQuizQuestion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuizQuestion__ArgProps,
          internalVariantPropNames: PlasmicQuizQuestion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuizQuestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuizQuestion";
  } else {
    func.displayName = `PlasmicQuizQuestion.${nodeName}`;
  }
  return func;
}

export const PlasmicQuizQuestion = Object.assign(
  // Top-level PlasmicQuizQuestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioGroup: makeNodeComponent("radioGroup"),
    h6: makeNodeComponent("h6"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicQuizQuestion
    internalVariantProps: PlasmicQuizQuestion__VariantProps,
    internalArgProps: PlasmicQuizQuestion__ArgProps
  }
);

export default PlasmicQuizQuestion;
/* prettier-ignore-end */
