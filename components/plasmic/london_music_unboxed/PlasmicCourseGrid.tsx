/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: xmK9OAIpqo06

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CourseCard from "../../CourseCard"; // plasmic-import: lU_2619e8-pr/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicCourseGrid.module.css"; // plasmic-import: xmK9OAIpqo06/css

createPlasmicElementProxy;

export type PlasmicCourseGrid__VariantMembers = {};
export type PlasmicCourseGrid__VariantsArgs = {};
type VariantPropType = keyof PlasmicCourseGrid__VariantsArgs;
export const PlasmicCourseGrid__VariantProps = new Array<VariantPropType>();

export type PlasmicCourseGrid__ArgsType = {
  courseList?: any;
  maximumItemCount?: number;
  onViewClickLink?: string;
};
type ArgPropType = keyof PlasmicCourseGrid__ArgsType;
export const PlasmicCourseGrid__ArgProps = new Array<ArgPropType>(
  "courseList",
  "maximumItemCount",
  "onViewClickLink"
);

export type PlasmicCourseGrid__OverridesType = {
  root?: Flex__<"div">;
  courseCard?: Flex__<typeof CourseCard>;
};

export interface DefaultCourseGridProps {
  courseList?: any;
  maximumItemCount?: number;
  onViewClickLink?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCourseGrid__RenderFunc(props: {
  variants: PlasmicCourseGrid__VariantsArgs;
  args: PlasmicCourseGrid__ArgsType;
  overrides: PlasmicCourseGrid__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return (() => {
              if ($props.maximumItemCount) {
                return $props?.courseList?.data?.slice(
                  0,
                  $props.maximumItemCount
                );
              } else {
                return $props?.courseList?.data;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.column__dUa9Y)}
            key={currentIndex}
          >
            <CourseCard
              data-plasmic-name={"courseCard"}
              data-plasmic-override={overrides.courseCard}
              className={classNames("__wab_instance", sty.courseCard)}
              coverImageUrl={(() => {
                try {
                  return $props?.courseList?.data[currentIndex]?.cover_image ===
                    ""
                    ? null
                    : $props?.courseList?.data[currentIndex]?.cover_image;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              description={(() => {
                try {
                  return $props?.courseList?.data[currentIndex]?.description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              id={(() => {
                try {
                  return $props?.courseList?.data[currentIndex].id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              instrumentTypeTag={(() => {
                try {
                  return $props.courseList?.data[currentIndex]
                    ?.instrument_category;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onclickActionButton={async id => {
                const $steps = {};

                $steps["postgresUpdateById"] =
                  $ctx.globalUserData?.user_role === "student"
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                            opId: "d3385982-a182-44c3-9393-f0beae246181",
                            userArgs: {
                              keys: [$props?.courseList?.data[currentIndex].id]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["postgresUpdateById"] != null &&
                  typeof $steps["postgresUpdateById"] === "object" &&
                  typeof $steps["postgresUpdateById"].then === "function"
                ) {
                  $steps["postgresUpdateById"] = await $steps[
                    "postgresUpdateById"
                  ];
                }

                $steps["goToCurrentViewCourse"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/current-view-course?id=${(() => {
                          try {
                            return $props?.courseList?.data[currentIndex].id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToCurrentViewCourse"] != null &&
                  typeof $steps["goToCurrentViewCourse"] === "object" &&
                  typeof $steps["goToCurrentViewCourse"].then === "function"
                ) {
                  $steps["goToCurrentViewCourse"] = await $steps[
                    "goToCurrentViewCourse"
                  ];
                }
              }}
              onclickViewButton={async () => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `${$props.onViewClickLink}?id=${$props.courseList.data[currentIndex].id}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              showCta={(() => {
                try {
                  return $ctx.globalUserData?.user_role === "student";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              showProgress={false}
              showTags={true}
              title={(() => {
                try {
                  return $props?.courseList?.data[currentIndex].title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              trainingLevelTag={(() => {
                try {
                  return $props.courseList?.data[currentIndex]?.training_level;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
        );
      })}
      <div className={classNames(projectcss.all, sty.column__jt4Wp)} />

      <div className={classNames(projectcss.all, sty.column__hD4Dx)} />

      <div className={classNames(projectcss.all, sty.column__ot9No)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "courseCard"],
  courseCard: ["courseCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  courseCard: typeof CourseCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCourseGrid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCourseGrid__VariantsArgs;
    args?: PlasmicCourseGrid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCourseGrid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCourseGrid__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCourseGrid__ArgProps,
          internalVariantPropNames: PlasmicCourseGrid__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCourseGrid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCourseGrid";
  } else {
    func.displayName = `PlasmicCourseGrid.${nodeName}`;
  }
  return func;
}

export const PlasmicCourseGrid = Object.assign(
  // Top-level PlasmicCourseGrid renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    courseCard: makeNodeComponent("courseCard"),

    // Metadata about props expected for PlasmicCourseGrid
    internalVariantProps: PlasmicCourseGrid__VariantProps,
    internalArgProps: PlasmicCourseGrid__ArgProps
  }
);

export default PlasmicCourseGrid;
/* prettier-ignore-end */
