/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: bepcGSmi0pMM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import InstructorPageLayout from "../../InstructorPageLayout"; // plasmic-import: KRlgGOfWJ9fO/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import CourseGrid from "../../CourseGrid"; // plasmic-import: xmK9OAIpqo06/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicInstructorCourses.module.css"; // plasmic-import: bepcGSmi0pMM/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicInstructorCourses__VariantMembers = {};
export type PlasmicInstructorCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstructorCourses__VariantsArgs;
export const PlasmicInstructorCourses__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInstructorCourses__ArgsType = {};
type ArgPropType = keyof PlasmicInstructorCourses__ArgsType;
export const PlasmicInstructorCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicInstructorCourses__OverridesType = {
  root?: Flex__<typeof InstructorPageLayout>;
  h4?: Flex__<"h4">;
  input?: Flex__<typeof AntdInput>;
  dropdown?: Flex__<typeof AntdDropdown>;
  courseGrid?: Flex__<typeof CourseGrid>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  h1?: Flex__<"h1">;
};

export interface DefaultInstructorCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstructorCourses__RenderFunc(props: {
  variants: PlasmicInstructorCourses__VariantsArgs;
  args: PlasmicInstructorCourses__ArgsType;
  overrides: PlasmicInstructorCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "newCourseId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "newCourseFormStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <InstructorPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__jQ9MJ)}>
                <div className={classNames(projectcss.all, sty.freeBox__jIeZs)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jDZp)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `My Courses (${$ctx.allCourses.data.length})`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "My Courses (30)";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h4>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__j88Zc)}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          className: classNames("__wab_instance", sty.input),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "Search by name",
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                      <AntdDropdown
                        data-plasmic-name={"dropdown"}
                        data-plasmic-override={overrides.dropdown}
                        className={classNames("__wab_instance", sty.dropdown)}
                        dropdownMenuScopeClassName={
                          sty["dropdown__dropdownMenu"]
                        }
                        menuItems={() => (
                          <React.Fragment>
                            <AntdMenuItem
                              className={classNames(
                                "__wab_instance",
                                sty.menuItem__bxKls
                              )}
                              key={"menu-item-1"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bOkzZ
                                )}
                              >
                                {"Menu item"}
                              </div>
                            </AntdMenuItem>
                            <AntdMenuItem
                              className={classNames(
                                "__wab_instance",
                                sty.menuItem__cw4XT
                              )}
                              key={"menu-item-2"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jvVpL
                                )}
                              >
                                {"Menu item"}
                              </div>
                            </AntdMenuItem>
                          </React.Fragment>
                        )}
                        menuItemsJson={[
                          { type: "item", value: "action1", label: "Action 1" },
                          { type: "item", value: "action2", label: "Action 2" }
                        ]}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button___9AiaB
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__apxxC
                            )}
                          >
                            {"Filter"}
                          </div>
                        </AntdButton>
                      </AntdDropdown>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___02VV0
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cfVjc
                            )}
                          >
                            {"Add Course"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }
                        }}
                      />
                    </div>
                  </div>
                  <CourseGrid
                    data-plasmic-name={"courseGrid"}
                    data-plasmic-override={overrides.courseGrid}
                    className={classNames("__wab_instance", sty.courseGrid)}
                    courseList={$ctx.allCourses}
                    onViewClickLink={`/instructor-view-courses`}
                  />
                </div>
                <AntdModal
                  data-plasmic-name={"modal"}
                  data-plasmic-override={overrides.modal}
                  className={classNames("__wab_instance", sty.modal)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["modal__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["modal", "open"]).apply(
                      null,
                      eventArgs
                    );
                  }}
                  open={generateStateValueProp($state, ["modal", "open"])}
                  title={"Modal title"}
                  trigger={null}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dn8CV)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vCgzz
                      )}
                    >
                      {"Modal content"}
                    </div>
                    {(() => {
                      try {
                        return $state.newCourseFormStep === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                      ? (() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.form),
                            data: {
                              sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                              opId: "f7d839c1-d12f-450a-94d2-e76b0d61edcc",
                              userArgs: {},
                              cacheKey: `plasmic.$.${(() => {
                                try {
                                  return "getSchema";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}.$.f7d839c1-d12f-450a-94d2-e76b0d61edcc.$.`,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            dataFormItems: (() => {
                              const __composite = [
                                {
                                  key: "id",
                                  inputType: "Text",
                                  fieldId: "id",
                                  label: "id",
                                  name: "id",
                                  hidden: null
                                },
                                {
                                  key: "created_at",
                                  inputType: "Text",
                                  fieldId: "created_at",
                                  label: "created_at",
                                  name: "created_at",
                                  hidden: null
                                },
                                {
                                  key: "created_by",
                                  inputType: "Text",
                                  fieldId: "created_by",
                                  label: "created_by",
                                  name: "created_by",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "training_level",
                                  inputType: "Text",
                                  fieldId: "training_level",
                                  label: "training_level",
                                  name: "training_level"
                                },
                                {
                                  key: "instrument_category",
                                  inputType: "Text",
                                  fieldId: "instrument_category",
                                  label: "instrument_category",
                                  name: "instrument_category"
                                },
                                {
                                  key: "cover_image",
                                  inputType: "Text",
                                  fieldId: "cover_image",
                                  label: "cover_image",
                                  name: "cover_image"
                                },
                                {
                                  key: "instructor_name",
                                  inputType: "Text",
                                  fieldId: "instructor_name",
                                  label: "instructor_name",
                                  name: "instructor_name"
                                },
                                {
                                  key: "title",
                                  inputType: "Text",
                                  fieldId: "title",
                                  label: "title",
                                  name: "title"
                                },
                                {
                                  key: "description",
                                  inputType: "Text",
                                  fieldId: "description",
                                  label: "description",
                                  name: "description"
                                },
                                {
                                  key: "status",
                                  inputType: "Text",
                                  fieldId: "status",
                                  label: "status",
                                  name: "status",
                                  hidden: null
                                }
                              ];
                              __composite["0"]["hidden"] = true;
                              __composite["1"]["hidden"] = true;
                              __composite["2"]["initialValue"] =
                                $ctx.SupabaseUser?.user?.id;
                              __composite["2"]["hidden"] = true;
                              __composite["9"]["hidden"] = true;
                              return __composite;
                            })(),

                            extendedOnValuesChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["form", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            formItems: [],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "simplified",
                            onFinish: async values => {
                              const $steps = {};

                              $steps["defaultSubmit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                        opId: "6e68e792-327d-49b7-a9b2-2ad404628b3f",
                                        userArgs: {
                                          variables: [$state.form.value]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["defaultSubmit"] != null &&
                                typeof $steps["defaultSubmit"] === "object" &&
                                typeof $steps["defaultSubmit"].then ===
                                  "function"
                              ) {
                                $steps["defaultSubmit"] = await $steps[
                                  "defaultSubmit"
                                ];
                              }

                              $steps["updateNewCourseId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["newCourseId"]
                                      },
                                      operation: 0,
                                      value: $steps.defaultSubmit?.data[0]?.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateNewCourseId"] != null &&
                                typeof $steps["updateNewCourseId"] ===
                                  "object" &&
                                typeof $steps["updateNewCourseId"].then ===
                                  "function"
                              ) {
                                $steps["updateNewCourseId"] = await $steps[
                                  "updateNewCourseId"
                                ];
                              }

                              $steps["updateNewCourseFormStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["newCourseFormStep"]
                                      },
                                      operation: 0,
                                      value: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateNewCourseFormStep"] != null &&
                                typeof $steps["updateNewCourseFormStep"] ===
                                  "object" &&
                                typeof $steps["updateNewCourseFormStep"]
                                  .then === "function"
                              ) {
                                $steps["updateNewCourseFormStep"] =
                                  await $steps["updateNewCourseFormStep"];
                              }
                            },
                            onIsSubmittingChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["form", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["form"] = ref;
                            },
                            submitSlot: (
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__lz6UW
                                )}
                                submitsForm={true}
                                type={"primary"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fr0Gl
                                  )}
                                >
                                  {"Submit"}
                                </div>
                              </AntdButton>
                            ),
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "form.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "form.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"form"}
                              data-plasmic-override={overrides.form}
                              {...child$Props}
                            />
                          );
                        })()
                      : null}
                    {(() => {
                      try {
                        return $state.newCourseFormStep === 1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qr2Da
                        )}
                      >
                        <h1
                          data-plasmic-name={"h1"}
                          data-plasmic-override={overrides.h1}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1
                          )}
                        >
                          {"You won't believe what happens next."}
                        </h1>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4CvN7
                          )}
                        >
                          {"Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hP6FY
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__decW
                            )}
                          />

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__pOp0W
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToPage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: (() => {
                                        try {
                                          return `/instructor-view-courses?id=${$state.newCourseId}`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }
                            }}
                          />
                        </div>
                      </div>
                    ) : null}
                  </div>
                </AntdModal>
              </div>
            )}
          </DataCtxReader__>
        </InstructorPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h4",
    "input",
    "dropdown",
    "courseGrid",
    "modal",
    "form",
    "h1"
  ],
  h4: ["h4"],
  input: ["input"],
  dropdown: ["dropdown"],
  courseGrid: ["courseGrid"],
  modal: ["modal", "form", "h1"],
  form: ["form"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof InstructorPageLayout;
  h4: "h4";
  input: typeof AntdInput;
  dropdown: typeof AntdDropdown;
  courseGrid: typeof CourseGrid;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstructorCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstructorCourses__VariantsArgs;
    args?: PlasmicInstructorCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstructorCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstructorCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstructorCourses__ArgProps,
          internalVariantPropNames: PlasmicInstructorCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstructorCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstructorCourses";
  } else {
    func.displayName = `PlasmicInstructorCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicInstructorCourses = Object.assign(
  // Top-level PlasmicInstructorCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    input: makeNodeComponent("input"),
    dropdown: makeNodeComponent("dropdown"),
    courseGrid: makeNodeComponent("courseGrid"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicInstructorCourses
    internalVariantProps: PlasmicInstructorCourses__VariantProps,
    internalArgProps: PlasmicInstructorCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstructorCourses;
/* prettier-ignore-end */
