/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: bepcGSmi0pMM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import InstructorPageLayout from "../../InstructorPageLayout"; // plasmic-import: KRlgGOfWJ9fO/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import CourseCard from "../../CourseCard"; // plasmic-import: lU_2619e8-pr/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicInstructorCourses.module.css"; // plasmic-import: bepcGSmi0pMM/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicInstructorCourses__VariantMembers = {};
export type PlasmicInstructorCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstructorCourses__VariantsArgs;
export const PlasmicInstructorCourses__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInstructorCourses__ArgsType = {};
type ArgPropType = keyof PlasmicInstructorCourses__ArgsType;
export const PlasmicInstructorCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicInstructorCourses__OverridesType = {
  root?: Flex__<typeof InstructorPageLayout>;
  h4?: Flex__<"h4">;
  input?: Flex__<typeof AntdInput>;
  dropdown?: Flex__<typeof AntdDropdown>;
  columns?: Flex__<"div">;
  courseCard?: Flex__<typeof CourseCard>;
};

export interface DefaultInstructorCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstructorCourses__RenderFunc(props: {
  variants: PlasmicInstructorCourses__VariantsArgs;
  args: PlasmicInstructorCourses__ArgsType;
  overrides: PlasmicInstructorCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getInstructorCoursesById: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "c51071a7-7917-42ca-9d8d-ae9620bcb719",
        userArgs: {
          filters: [$ctx.SupabaseUser?.user?.id]
        },
        cacheKey: `plasmic.$.c51071a7-7917-42ca-9d8d-ae9620bcb719.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <InstructorPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__jQ9MJ)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jIeZs)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jDZp)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `My Courses (${$queries.getInstructorCoursesById.data.length})`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "My Courses (30)";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h4>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__j88Zc)}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          className: classNames("__wab_instance", sty.input),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: "Search by name",
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                      <AntdDropdown
                        data-plasmic-name={"dropdown"}
                        data-plasmic-override={overrides.dropdown}
                        className={classNames("__wab_instance", sty.dropdown)}
                        dropdownMenuScopeClassName={
                          sty["dropdown__dropdownMenu"]
                        }
                        menuItems={() => (
                          <React.Fragment>
                            <AntdMenuItem
                              className={classNames(
                                "__wab_instance",
                                sty.menuItem__bxKls
                              )}
                              key={"menu-item-1"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bOkzZ
                                )}
                              >
                                {"Menu item"}
                              </div>
                            </AntdMenuItem>
                            <AntdMenuItem
                              className={classNames(
                                "__wab_instance",
                                sty.menuItem__cw4XT
                              )}
                              key={"menu-item-2"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jvVpL
                                )}
                              >
                                {"Menu item"}
                              </div>
                            </AntdMenuItem>
                          </React.Fragment>
                        )}
                        menuItemsJson={[
                          { type: "item", value: "action1", label: "Action 1" },
                          { type: "item", value: "action2", label: "Action 2" }
                        ]}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button___9AiaB
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__apxxC
                            )}
                          >
                            {"Dropdown"}
                          </div>
                        </AntdButton>
                      </AntdDropdown>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___02VV0
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cfVjc
                            )}
                          >
                            {"Add Course"}
                          </div>
                        }
                      />
                    </Stack__>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries?.getInstructorCoursesById?.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___7EouV
                          )}
                          key={currentIndex}
                        >
                          <CourseCard
                            data-plasmic-name={"courseCard"}
                            data-plasmic-override={overrides.courseCard}
                            className={classNames(
                              "__wab_instance",
                              sty.courseCard
                            )}
                            coverImageUrl={(() => {
                              try {
                                return $queries?.getInstructorCoursesById?.data[
                                  currentIndex
                                ]?.cover_image === ""
                                  ? null
                                  : $queries?.getInstructorCoursesById?.data[
                                      currentIndex
                                    ]?.cover_image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            description={(() => {
                              try {
                                return $queries?.getInstructorCoursesById?.data[
                                  currentIndex
                                ]?.description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            instrumentTypeTag={(() => {
                              try {
                                return $queries.getInstructorCoursesById?.data[
                                  currentIndex
                                ]?.instrument_category;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            showCta={false}
                            showProgress={false}
                            showTags={true}
                            title={(() => {
                              try {
                                return $queries?.getInstructorCoursesById?.data[
                                  currentIndex
                                ].title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            trainingLevelTag={(() => {
                              try {
                                return $queries.getInstructorCoursesById.data[
                                  currentIndex
                                ].training_level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      );
                    })}
                    <div
                      className={classNames(projectcss.all, sty.column___9EFy)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.column__u0ALi)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.column__ncS4U)}
                    />
                  </Stack__>
                </Stack__>
              </div>
            )}
          </DataCtxReader__>
        </InstructorPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "input", "dropdown", "columns", "courseCard"],
  h4: ["h4"],
  input: ["input"],
  dropdown: ["dropdown"],
  columns: ["columns", "courseCard"],
  courseCard: ["courseCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof InstructorPageLayout;
  h4: "h4";
  input: typeof AntdInput;
  dropdown: typeof AntdDropdown;
  columns: "div";
  courseCard: typeof CourseCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstructorCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstructorCourses__VariantsArgs;
    args?: PlasmicInstructorCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstructorCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstructorCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstructorCourses__ArgProps,
          internalVariantPropNames: PlasmicInstructorCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstructorCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstructorCourses";
  } else {
    func.displayName = `PlasmicInstructorCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicInstructorCourses = Object.assign(
  // Top-level PlasmicInstructorCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    input: makeNodeComponent("input"),
    dropdown: makeNodeComponent("dropdown"),
    columns: makeNodeComponent("columns"),
    courseCard: makeNodeComponent("courseCard"),

    // Metadata about props expected for PlasmicInstructorCourses
    internalVariantProps: PlasmicInstructorCourses__VariantProps,
    internalArgProps: PlasmicInstructorCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstructorCourses;
/* prettier-ignore-end */
