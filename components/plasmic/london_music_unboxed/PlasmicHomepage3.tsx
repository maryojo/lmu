/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: joIABjGqCAml

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RadioGroup from "../../RadioGroup"; // plasmic-import: 9fgJVBRabwM8/component
import Radio from "../../Radio"; // plasmic-import: TM1IOUI2mayj/component
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicHomepage3.module.css"; // plasmic-import: joIABjGqCAml/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: dwMGBRl-2IC3/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicHomepage3__VariantMembers = {};
export type PlasmicHomepage3__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage3__VariantsArgs;
export const PlasmicHomepage3__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage3__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage3__ArgsType;
export const PlasmicHomepage3__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage3__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  h1?: Flex__<"h1">;
  instrumentCategory?: Flex__<typeof RadioGroup>;
  trainingLevel?: Flex__<typeof RadioGroup>;
  button?: Flex__<typeof Button>;
};

export interface DefaultHomepage3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage3__RenderFunc(props: {
  variants: PlasmicHomepage3__VariantsArgs;
  args: PlasmicHomepage3__ArgsType;
  overrides: PlasmicHomepage3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "instrumentCategory.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "trainingLevel.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "chosenInstrumentCategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "chosenTrainingLevel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__jLrCo)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__leCAh)}
            >
              <Icon2Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </Stack__>
          </section>
          <section className={classNames(projectcss.all, sty.section__xjiWw)}>
            <div className={classNames(projectcss.all, sty.freeBox__jYDpM)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"You won't believe what happens next."}
              </h1>
              <RadioGroup
                data-plasmic-name={"instrumentCategory"}
                data-plasmic-override={overrides.instrumentCategory}
                className={classNames("__wab_instance", sty.instrumentCategory)}
                label={"What instrument would you like to enrol for?"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "instrumentCategory",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["updateChosenInstrumentCategory"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["chosenInstrumentCategory"]
                            },
                            operation: 0,
                            value: $state.instrumentCategory.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateChosenInstrumentCategory"] != null &&
                      typeof $steps["updateChosenInstrumentCategory"] ===
                        "object" &&
                      typeof $steps["updateChosenInstrumentCategory"].then ===
                        "function"
                    ) {
                      $steps["updateChosenInstrumentCategory"] = await $steps[
                        "updateChosenInstrumentCategory"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                options={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ofvep)}
                  >
                    <Radio
                      className={classNames("__wab_instance", sty.radio__nEzA)}
                      label={"Woodwind"}
                      value={"woodwind"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__jpQup)}
                      label={"Strings"}
                      value={"string"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio___44UR)}
                      label={"Piano"}
                      value={"piano"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__brA6N)}
                      label={"Voice"}
                      value={"voice"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__tiCw7)}
                      label={"Percussion"}
                      value={"percussion"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__ak8Kb)}
                      label={"Guitar"}
                      value={"guitar"}
                    />
                  </Stack__>
                }
              />

              <RadioGroup
                data-plasmic-name={"trainingLevel"}
                data-plasmic-override={overrides.trainingLevel}
                className={classNames("__wab_instance", sty.trainingLevel)}
                label={"What level would you say you fit in best?"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "trainingLevel",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["updateChosenTrainingLevel"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["chosenTrainingLevel"]
                            },
                            operation: 0,
                            value: $state.trainingLevel.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateChosenTrainingLevel"] != null &&
                      typeof $steps["updateChosenTrainingLevel"] === "object" &&
                      typeof $steps["updateChosenTrainingLevel"].then ===
                        "function"
                    ) {
                      $steps["updateChosenTrainingLevel"] = await $steps[
                        "updateChosenTrainingLevel"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                options={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wyVmv)}
                  >
                    <Radio
                      className={classNames("__wab_instance", sty.radio__mM3Vw)}
                      label={"Explorer"}
                      value={"explorer"}
                    />

                    <Radio
                      className={classNames(
                        "__wab_instance",
                        sty.radio___2DJbk
                      )}
                      label={"Novice"}
                      value={"novice"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__xUzM)}
                      label={"Beginner"}
                      value={"beginner"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__jToe)}
                      label={"Intermediate"}
                      value={"intermediate"}
                    />

                    <Radio
                      className={classNames("__wab_instance", sty.radio__qCw94)}
                      label={"Advanced"}
                      value={"advanced"}
                    />
                  </Stack__>
                }
              />

              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xsTgF
                    )}
                  >
                    {"Next"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jCSv1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "h1", "instrumentCategory", "trainingLevel", "button"],
  svg: ["svg"],
  h1: ["h1"],
  instrumentCategory: ["instrumentCategory"],
  trainingLevel: ["trainingLevel"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  h1: "h1";
  instrumentCategory: typeof RadioGroup;
  trainingLevel: typeof RadioGroup;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage3__VariantsArgs;
    args?: PlasmicHomepage3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage3__ArgProps,
          internalVariantPropNames: PlasmicHomepage3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage3";
  } else {
    func.displayName = `PlasmicHomepage3.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage3 = Object.assign(
  // Top-level PlasmicHomepage3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    h1: makeNodeComponent("h1"),
    instrumentCategory: makeNodeComponent("instrumentCategory"),
    trainingLevel: makeNodeComponent("trainingLevel"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicHomepage3
    internalVariantProps: PlasmicHomepage3__VariantProps,
    internalArgProps: PlasmicHomepage3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage3;
/* prettier-ignore-end */
