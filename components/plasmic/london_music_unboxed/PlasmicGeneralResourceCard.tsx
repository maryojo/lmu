/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: aJ1uzNYjouuX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicGeneralResourceCard.module.css"; // plasmic-import: aJ1uzNYjouuX/css

createPlasmicElementProxy;

export type PlasmicGeneralResourceCard__VariantMembers = {};
export type PlasmicGeneralResourceCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicGeneralResourceCard__VariantsArgs;
export const PlasmicGeneralResourceCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGeneralResourceCard__ArgsType = {
  title?: string;
  description?: string;
  coverImage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  showCta?: boolean;
  showTags?: boolean;
  trainingLevelTag?: string;
  instrumentTypeTag?: string;
  coverImageUrl?: string;
  onclickViewButton?: () => void;
};
type ArgPropType = keyof PlasmicGeneralResourceCard__ArgsType;
export const PlasmicGeneralResourceCard__ArgProps = new Array<ArgPropType>(
  "title",
  "description",
  "coverImage",
  "showCta",
  "showTags",
  "trainingLevelTag",
  "instrumentTypeTag",
  "coverImageUrl",
  "onclickViewButton"
);

export type PlasmicGeneralResourceCard__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  h6?: Flex__<"h6">;
  columns?: Flex__<"div">;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultGeneralResourceCardProps {
  title?: string;
  description?: string;
  coverImage?: React.ComponentProps<typeof PlasmicImg__>["src"];
  showCta?: boolean;
  showTags?: boolean;
  trainingLevelTag?: string;
  instrumentTypeTag?: string;
  coverImageUrl?: string;
  onclickViewButton?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGeneralResourceCard__RenderFunc(props: {
  variants: PlasmicGeneralResourceCard__VariantsArgs;
  args: PlasmicGeneralResourceCard__ArgsType;
  overrides: PlasmicGeneralResourceCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Course Title",
          description: "Course description",
          coverImage: {
            src: "/plasmic/london_music_unboxed/images/placeholderResourcesSvg.svg",
            fullWidth: 560,
            fullHeight: 330,
            aspectRatio: undefined
          },
          showCta: true,
          showTags: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"150px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"100%"}
        height={"400"}
        loading={"lazy"}
        src={$props?.coverImageUrl ?? $props.coverImage}
      />

      <div className={classNames(projectcss.all, sty.freeBox___2LLma)}>
        <h6
          data-plasmic-name={"h6"}
          data-plasmic-override={overrides.h6}
          className={classNames(
            projectcss.all,
            projectcss.h6,
            projectcss.__wab_text,
            sty.h6
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "You won't believe what happens next.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h6>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ne6Nr
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.description;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      {(() => {
        try {
          return $props.showTags;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__feH6Y)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mvHwO
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props?.instrumentTypeTag;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Instrument type";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__wtjbw)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o4Z1K
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.trainingLevelTag;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__c66E)}>
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          onClick={async () => {
            const $steps = {};

            $steps["runOnclickViewButton"] = true
              ? (() => {
                  const actionArgs = { eventRef: $props["onclickViewButton"] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnclickViewButton"] != null &&
              typeof $steps["runOnclickViewButton"] === "object" &&
              typeof $steps["runOnclickViewButton"].then === "function"
            ) {
              $steps["runOnclickViewButton"] = await $steps[
                "runOnclickViewButton"
              ];
            }
          }}
          size={"small"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f5GiQ
            )}
          >
            {"View"}
          </div>
        </AntdButton>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h6", "columns", "button"],
  img: ["img"],
  h6: ["h6"],
  columns: ["columns"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  h6: "h6";
  columns: "div";
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGeneralResourceCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGeneralResourceCard__VariantsArgs;
    args?: PlasmicGeneralResourceCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGeneralResourceCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGeneralResourceCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGeneralResourceCard__ArgProps,
          internalVariantPropNames: PlasmicGeneralResourceCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGeneralResourceCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGeneralResourceCard";
  } else {
    func.displayName = `PlasmicGeneralResourceCard.${nodeName}`;
  }
  return func;
}

export const PlasmicGeneralResourceCard = Object.assign(
  // Top-level PlasmicGeneralResourceCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h6: makeNodeComponent("h6"),
    columns: makeNodeComponent("columns"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicGeneralResourceCard
    internalVariantProps: PlasmicGeneralResourceCard__VariantProps,
    internalArgProps: PlasmicGeneralResourceCard__ArgProps
  }
);

export default PlasmicGeneralResourceCard;
/* prettier-ignore-end */
