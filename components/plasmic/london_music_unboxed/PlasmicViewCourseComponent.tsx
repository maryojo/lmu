/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: UaDllrLd_geC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicViewCourseComponent.module.css"; // plasmic-import: UaDllrLd_geC/css

createPlasmicElementProxy;

export type PlasmicViewCourseComponent__VariantMembers = {};
export type PlasmicViewCourseComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicViewCourseComponent__VariantsArgs;
export const PlasmicViewCourseComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicViewCourseComponent__ArgsType = {
  viewMode?: "student" | "instructor" | "admin";
};
type ArgPropType = keyof PlasmicViewCourseComponent__ArgsType;
export const PlasmicViewCourseComponent__ArgProps = new Array<ArgPropType>(
  "viewMode"
);

export type PlasmicViewCourseComponent__OverridesType = {
  root?: Flex__<"div">;
  h4?: Flex__<"h4">;
  img?: Flex__<typeof PlasmicImg__>;
  tabs?: Flex__<typeof AntdTabs>;
  accordion?: Flex__<typeof AntdAccordion>;
  table?: Flex__<typeof RichTable>;
  columns?: Flex__<"div">;
};

export interface DefaultViewCourseComponentProps {
  viewMode?: "student" | "instructor" | "admin";
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicViewCourseComponent__RenderFunc(props: {
  variants: PlasmicViewCourseComponent__VariantsArgs;
  args: PlasmicViewCourseComponent__ArgsType;
  overrides: PlasmicViewCourseComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          viewMode: "instructor"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vUsP6)}>
        <div className={classNames(projectcss.all, sty.freeBox__nWn6A)}>
          <div className={classNames(projectcss.all, sty.freeBox__iKp1N)}>
            <h4
              data-plasmic-name={"h4"}
              data-plasmic-override={overrides.h4}
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4
              )}
            >
              {"Course Name"}
            </h4>
          </div>
        </div>
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__alLoa
          )}
        >
          {"Enter some description"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bfnty
          )}
        >
          {"Enter some text"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__aXyPm)}>
        <AntdTabs
          data-plasmic-name={"tabs"}
          data-plasmic-override={overrides.tabs}
          activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
          animateTabBar={true}
          animateTabContent={false}
          animated={true}
          className={classNames("__wab_instance", sty.tabs)}
          items={
            <React.Fragment>
              <AntdTabItem
                className={classNames("__wab_instance", sty.tabItem__nxSo7)}
                key={"1"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ePqCy
                    )}
                  >
                    {"Course Outline"}
                  </div>
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__xu20T)}>
                  {(() => {
                    try {
                      return $props.viewMode === "student";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          activeKey: generateStateValueProp($state, [
                            "accordion",
                            "activePanelId"
                          ]),
                          bordered: true,
                          className: classNames(
                            "__wab_instance",
                            sty.accordion
                          ),
                          items: (
                            <React.Fragment>
                              <AntdAccordionItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.accordionItem__qyWsY
                                )}
                                id={1}
                                label2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9MRob
                                    )}
                                  >
                                    {"First Item"}
                                  </div>
                                }
                                showArrow={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2ZUe6
                                  )}
                                >
                                  {"First Children"}
                                </div>
                              </AntdAccordionItem>
                              <AntdAccordionItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.accordionItem__xigI8
                                )}
                                id={2}
                                label2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wzyZv
                                    )}
                                  >
                                    {"Second Item"}
                                  </div>
                                }
                                showArrow={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___6M8UY
                                  )}
                                >
                                  {"Second Children"}
                                </div>
                              </AntdAccordionItem>
                            </React.Fragment>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "activePanelId",
                              ["accordion", "activePanelId"],
                              AntdAccordion_Helpers
                            ).apply(null, eventArgs);
                          }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "activePanelId",
                              plasmicStateName: "accordion.activePanelId"
                            }
                          ],
                          [],
                          AntdAccordion_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdAccordion
                            data-plasmic-name={"accordion"}
                            data-plasmic-override={overrides.accordion}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                  {(() => {
                    try {
                      return (
                        $props.viewMode === "admin" ||
                        $props.viewMode === "instructor"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table),
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          scopeClassName: sty["table__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            styleTokensClassNames,
                            styleTokensClassNames_antd_5_hostless,
                            styleTokensClassNames_plasmic_rich_components
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table"}
                            data-plasmic-override={overrides.table}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                </div>
              </AntdTabItem>
              <AntdTabItem
                className={classNames("__wab_instance", sty.tabItem__yJGzg)}
                key={"2"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jx4Ph
                    )}
                  >
                    {"Reviews"}
                  </div>
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7XhlC
                  )}
                >
                  {"Second Children"}
                </div>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__j2LqP)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__laufm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eNyyx
                        )}
                      >
                        {"Star rating"}
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__tQjYi)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zYgut)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__qtZTn)}
                    />
                  </div>
                </div>
              </AntdTabItem>
            </React.Fragment>
          }
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
              null,
              eventArgs
            );
          }}
          sticky={false}
          tabBarBackground={"#FFF"}
          tabsDropdownClassName={classNames({
            [sty["pcls_6Fx2aM8T4XvW"]]: true
          })}
          tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
          tabsScopeClassName={sty["tabs__tabs"]}
          type={"card"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "img", "tabs", "accordion", "table", "columns"],
  h4: ["h4"],
  img: ["img"],
  tabs: ["tabs", "accordion", "table", "columns"],
  accordion: ["accordion"],
  table: ["table"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  img: typeof PlasmicImg__;
  tabs: typeof AntdTabs;
  accordion: typeof AntdAccordion;
  table: typeof RichTable;
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicViewCourseComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicViewCourseComponent__VariantsArgs;
    args?: PlasmicViewCourseComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicViewCourseComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicViewCourseComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicViewCourseComponent__ArgProps,
          internalVariantPropNames: PlasmicViewCourseComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicViewCourseComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicViewCourseComponent";
  } else {
    func.displayName = `PlasmicViewCourseComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicViewCourseComponent = Object.assign(
  // Top-level PlasmicViewCourseComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    img: makeNodeComponent("img"),
    tabs: makeNodeComponent("tabs"),
    accordion: makeNodeComponent("accordion"),
    table: makeNodeComponent("table"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicViewCourseComponent
    internalVariantProps: PlasmicViewCourseComponent__VariantProps,
    internalArgProps: PlasmicViewCourseComponent__ArgProps
  }
);

export default PlasmicViewCourseComponent;
/* prettier-ignore-end */
