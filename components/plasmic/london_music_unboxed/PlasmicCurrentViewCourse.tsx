/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: Ba5vbqvaPzy1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import StudentPageLayout from "../../StudentPageLayout"; // plasmic-import: Itd9tHC_WCDz/component
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicCurrentViewCourse.module.css"; // plasmic-import: Ba5vbqvaPzy1/css

createPlasmicElementProxy;

export type PlasmicCurrentViewCourse__VariantMembers = {};
export type PlasmicCurrentViewCourse__VariantsArgs = {};
type VariantPropType = keyof PlasmicCurrentViewCourse__VariantsArgs;
export const PlasmicCurrentViewCourse__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCurrentViewCourse__ArgsType = {};
type ArgPropType = keyof PlasmicCurrentViewCourse__ArgsType;
export const PlasmicCurrentViewCourse__ArgProps = new Array<ArgPropType>();

export type PlasmicCurrentViewCourse__OverridesType = {
  root?: Flex__<typeof StudentPageLayout>;
  htmlVideo?: Flex__<typeof Video>;
  accordion?: Flex__<typeof AntdAccordion>;
};

export interface DefaultCurrentViewCourseProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCurrentViewCourse__RenderFunc(props: {
  variants: PlasmicCurrentViewCourse__VariantsArgs;
  args: PlasmicCurrentViewCourse__ArgsType;
  overrides: PlasmicCurrentViewCourse__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCourseById: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "b1ee7e65-768d-4a74-8dec-1f910378dd5b",
        userArgs: {
          keys: [$ctx.query?.id]
        },
        cacheKey: `plasmic.$.b1ee7e65-768d-4a74-8dec-1f910378dd5b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <StudentPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__r6Sz6)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__jh5L
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.getCourseById?.data[0]?.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "You won't believe what happens next.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h1>
                <div className={classNames(projectcss.all, sty.freeBox__kiZy)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qtBAi)}
                  >
                    <Video
                      data-plasmic-name={"htmlVideo"}
                      data-plasmic-override={overrides.htmlVideo}
                      className={classNames("__wab_instance", sty.htmlVideo)}
                      controls={true}
                      src={
                        "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"
                      }
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__zx8Ov)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1___7P7Sc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.getCourseById?.data[0]?.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You won't believe what happens next.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dUtQn
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l81Zl
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jojUp)}
                  >
                    {(() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__qutzZ
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__htFoH
                                  )}
                                >
                                  {"First Item"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__z6XbF
                                )}
                              >
                                {"First Children"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem___7T3Fg
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___10Sy
                                  )}
                                >
                                  {"Second Item"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bRypd
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion"}
                          data-plasmic-override={overrides.accordion}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              </div>
            )}
          </DataCtxReader__>
        </StudentPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "htmlVideo", "accordion"],
  htmlVideo: ["htmlVideo"],
  accordion: ["accordion"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof StudentPageLayout;
  htmlVideo: typeof Video;
  accordion: typeof AntdAccordion;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCurrentViewCourse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCurrentViewCourse__VariantsArgs;
    args?: PlasmicCurrentViewCourse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCurrentViewCourse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCurrentViewCourse__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCurrentViewCourse__ArgProps,
          internalVariantPropNames: PlasmicCurrentViewCourse__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCurrentViewCourse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCurrentViewCourse";
  } else {
    func.displayName = `PlasmicCurrentViewCourse.${nodeName}`;
  }
  return func;
}

export const PlasmicCurrentViewCourse = Object.assign(
  // Top-level PlasmicCurrentViewCourse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    htmlVideo: makeNodeComponent("htmlVideo"),
    accordion: makeNodeComponent("accordion"),

    // Metadata about props expected for PlasmicCurrentViewCourse
    internalVariantProps: PlasmicCurrentViewCourse__VariantProps,
    internalArgProps: PlasmicCurrentViewCourse__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCurrentViewCourse;
/* prettier-ignore-end */
