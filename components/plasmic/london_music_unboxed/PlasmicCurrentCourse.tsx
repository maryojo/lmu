/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: Ba5vbqvaPzy1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import StudentPageLayout from "../../StudentPageLayout"; // plasmic-import: Itd9tHC_WCDz/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import ViewCourseModuleItem from "../../ViewCourseModuleItem"; // plasmic-import: 9B6tkusLLrZw/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicCurrentCourse.module.css"; // plasmic-import: Ba5vbqvaPzy1/css

createPlasmicElementProxy;

export type PlasmicCurrentCourse__VariantMembers = {};
export type PlasmicCurrentCourse__VariantsArgs = {};
type VariantPropType = keyof PlasmicCurrentCourse__VariantsArgs;
export const PlasmicCurrentCourse__VariantProps = new Array<VariantPropType>();

export type PlasmicCurrentCourse__ArgsType = {};
type ArgPropType = keyof PlasmicCurrentCourse__ArgsType;
export const PlasmicCurrentCourse__ArgProps = new Array<ArgPropType>();

export type PlasmicCurrentCourse__OverridesType = {
  root?: Flex__<typeof StudentPageLayout>;
  iframe?: Flex__<typeof Iframe>;
  viewCourseModuleItem?: Flex__<typeof ViewCourseModuleItem>;
};

export interface DefaultCurrentCourseProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCurrentCourse__RenderFunc(props: {
  variants: PlasmicCurrentCourse__VariantsArgs;
  args: PlasmicCurrentCourse__ArgsType;
  overrides: PlasmicCurrentCourse__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "currentDisplayLesson",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getLessonsByCourseId.data.find(
                lesson => lesson.position === 1
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCourseById: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "5c949757-89ec-4c25-b967-c25faa2bdd30",
        userArgs: {
          filters: [
            $ctx.query?.id !== undefined && $ctx.query?.id !== ""
              ? $ctx.query?.id
              : undefined
          ]
        },
        cacheKey: `plasmic.$.5c949757-89ec-4c25-b967-c25faa2bdd30.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getModulesByCourseId: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "b01269c8-4332-4ad4-8281-c737d55ea9d7",
        userArgs: {
          filters: [$queries.getCourseById?.data?.[0]?.id]
        },
        cacheKey: `plasmic.$.b01269c8-4332-4ad4-8281-c737d55ea9d7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getLessonsByCourseId: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "24701641-9809-4225-b3ba-bd73df812180",
        userArgs: {
          filters: [
            $ctx.query.id !== undefined && $ctx.query?.id !== ""
              ? $ctx.query.id
              : undefined
          ]
        },
        cacheKey: `plasmic.$.24701641-9809-4225-b3ba-bd73df812180.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <StudentPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__r6Sz6)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__jh5L
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.getCourseById?.data[0]?.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "You won't believe what happens next.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h1>
                <div className={classNames(projectcss.all, sty.freeBox__kiZy)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qtBAi)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sysDm)}
                    >
                      {(() => {
                        try {
                          return (
                            $state.currentDisplayLesson?.content_type ===
                            "LONG_TEXT"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sdXWh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pi9Im
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentDisplayLesson?.content;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.currentDisplayLesson?.content_type ===
                            "MEDIA_LINK"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2Ds7N
                          )}
                        >
                          <Iframe
                            data-plasmic-name={"iframe"}
                            data-plasmic-override={overrides.iframe}
                            className={classNames("__wab_instance", sty.iframe)}
                            preview={true}
                            src={(() => {
                              try {
                                return (() => {
                                  if (
                                    $state.currentDisplayLesson
                                      ?.content_type === "MEDIA_LINK"
                                  )
                                    return $state.currentDisplayLesson?.content;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            srcDoc={
                              "<div><h3>Heading</h3><p>Example text...</p></div>"
                            }
                            useHtml={false}
                          />
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zx8Ov)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1___7P7Sc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.currentDisplayLesson?.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "You won't believe what happens next.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dUtQn
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.currentDisplayLesson?.description;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l81Zl
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jojUp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1ZfKs
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.getModulesByCourseId?.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__p7KmP
                            )}
                            key={currentIndex}
                          >
                            <ViewCourseModuleItem
                              data-plasmic-name={"viewCourseModuleItem"}
                              data-plasmic-override={
                                overrides.viewCourseModuleItem
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.viewCourseModuleItem
                              )}
                              courseLessons={(() => {
                                try {
                                  return $queries.getLessonsByCourseId?.data;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              courseModules={(() => {
                                try {
                                  return $queries.getModulesByCourseId?.data;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              currentIndex={(() => {
                                try {
                                  return currentIndex;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              currentItem={(() => {
                                try {
                                  return $queries.getModulesByCourseId?.data[
                                    currentIndex
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              currentViewCourse={(() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              setCurrentDisplayLesson={async lesson => {
                                const $steps = {};

                                $steps["updateCurrentDisplayLesson"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentDisplayLesson"]
                                        },
                                        operation: 0,
                                        value: lesson
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentDisplayLesson"] !=
                                    null &&
                                  typeof $steps[
                                    "updateCurrentDisplayLesson"
                                  ] === "object" &&
                                  typeof $steps["updateCurrentDisplayLesson"]
                                    .then === "function"
                                ) {
                                  $steps["updateCurrentDisplayLesson"] =
                                    await $steps["updateCurrentDisplayLesson"];
                                }
                              }}
                            />
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </DataCtxReader__>
        </StudentPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "iframe", "viewCourseModuleItem"],
  iframe: ["iframe"],
  viewCourseModuleItem: ["viewCourseModuleItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof StudentPageLayout;
  iframe: typeof Iframe;
  viewCourseModuleItem: typeof ViewCourseModuleItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCurrentCourse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCurrentCourse__VariantsArgs;
    args?: PlasmicCurrentCourse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCurrentCourse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCurrentCourse__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCurrentCourse__ArgProps,
          internalVariantPropNames: PlasmicCurrentCourse__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCurrentCourse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCurrentCourse";
  } else {
    func.displayName = `PlasmicCurrentCourse.${nodeName}`;
  }
  return func;
}

export const PlasmicCurrentCourse = Object.assign(
  // Top-level PlasmicCurrentCourse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iframe: makeNodeComponent("iframe"),
    viewCourseModuleItem: makeNodeComponent("viewCourseModuleItem"),

    // Metadata about props expected for PlasmicCurrentCourse
    internalVariantProps: PlasmicCurrentCourse__VariantProps,
    internalArgProps: PlasmicCurrentCourse__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCurrentCourse;
/* prettier-ignore-end */
