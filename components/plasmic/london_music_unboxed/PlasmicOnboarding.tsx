/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: N1YDHbC1ATYR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { QuizComponent } from "../../QuizComponent"; // plasmic-import: klgNzyPULfbl/codeComponent
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicOnboarding.module.css"; // plasmic-import: N1YDHbC1ATYR/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: dwMGBRl-2IC3/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon

createPlasmicElementProxy;

export type PlasmicOnboarding__VariantMembers = {};
export type PlasmicOnboarding__VariantsArgs = {};
type VariantPropType = keyof PlasmicOnboarding__VariantsArgs;
export const PlasmicOnboarding__VariantProps = new Array<VariantPropType>();

export type PlasmicOnboarding__ArgsType = {};
type ArgPropType = keyof PlasmicOnboarding__ArgsType;
export const PlasmicOnboarding__ArgProps = new Array<ArgPropType>();

export type PlasmicOnboarding__OverridesType = {
  root?: Flex__<"div">;
  h4?: Flex__<"h4">;
  startOnboardingQuizForm?: Flex__<typeof FormWrapper>;
  quizComponent?: Flex__<typeof QuizComponent>;
};

export interface DefaultOnboardingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOnboarding__RenderFunc(props: {
  variants: PlasmicOnboarding__VariantsArgs;
  args: PlasmicOnboarding__ArgsType;
  overrides: PlasmicOnboarding__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "chosenInstrumentCategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "chosenTrainingLevel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "formStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "fetchedQuizId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "fetchedQuizInfo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "startOnboardingQuizForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "startOnboardingQuizForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "startOnboardingQuizForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "startOnboardingQuizForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "onQuizComplete",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "lowerLevel",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isQuizPassed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "quizTotalPoints",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "quizScore",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "disableNewQuizButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__hbRph)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___14Emk)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__alc2G
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.SupabaseUser.user.user_metadata.email;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__m54E4)}
                role={"img"}
              />

              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg___8Suig)}
                role={"img"}
              />
            </Stack__>
          </section>
          <section className={classNames(projectcss.all, sty.section___67Nxo)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kor9M)}
            >
              {(() => {
                try {
                  return $state.formStep == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__o2Sv)}
                >
                  <h4
                    data-plasmic-name={"h4"}
                    data-plasmic-override={overrides.h4}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4
                    )}
                  >
                    {"Welcome!"}
                  </h4>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.startOnboardingQuizForm
                      ),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["startOnboardingQuizForm", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: undefined,
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: undefined,
                      onFinish: async values => {
                        const $steps = {};

                        $steps["getRightQuizId"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "c092da1e-27b1-41af-88b3-ab182a63eab0",
                                  userArgs: {
                                    filters: [
                                      $state.startOnboardingQuizForm.value
                                        .instrumentCategory,
                                      $state.startOnboardingQuizForm.value
                                        .trainingLevel
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: null,
                                  roleId: null
                                },
                                continueOnError: true
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["getRightQuizId"] != null &&
                          typeof $steps["getRightQuizId"] === "object" &&
                          typeof $steps["getRightQuizId"].then === "function"
                        ) {
                          $steps["getRightQuizId"] = await $steps[
                            "getRightQuizId"
                          ];
                        }

                        $steps["error"] = $steps["getRightQuizId"].error
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "Something went wrong",
                                  undefined,
                                  undefined,
                                  "top"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["error"] != null &&
                          typeof $steps["error"] === "object" &&
                          typeof $steps["error"].then === "function"
                        ) {
                          $steps["error"] = await $steps["error"];
                        }

                        $steps["updateFetchedQuizId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["fetchedQuizId"]
                                },
                                operation: 0,
                                value: $steps["getRightQuizId"].data[0].id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFetchedQuizId"] != null &&
                          typeof $steps["updateFetchedQuizId"] === "object" &&
                          typeof $steps["updateFetchedQuizId"].then ===
                            "function"
                        ) {
                          $steps["updateFetchedQuizId"] = await $steps[
                            "updateFetchedQuizId"
                          ];
                        }

                        $steps["getQuizInfoById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "718444ab-0dcb-4bcb-86f7-c906331ee065",
                                  userArgs: {
                                    filters: [$state.fetchedQuizId]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: null,
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["getQuizInfoById"] != null &&
                          typeof $steps["getQuizInfoById"] === "object" &&
                          typeof $steps["getQuizInfoById"].then === "function"
                        ) {
                          $steps["getQuizInfoById"] = await $steps[
                            "getQuizInfoById"
                          ];
                        }

                        $steps["updateFetchedQuizInfo"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["fetchedQuizInfo"]
                                },
                                operation: 0,
                                value: $steps["getQuizInfoById"].data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFetchedQuizInfo"] != null &&
                          typeof $steps["updateFetchedQuizInfo"] === "object" &&
                          typeof $steps["updateFetchedQuizInfo"].then ===
                            "function"
                        ) {
                          $steps["updateFetchedQuizInfo"] = await $steps[
                            "updateFetchedQuizInfo"
                          ];
                        }

                        $steps["updateFormStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["formStep"]
                                },
                                operation: 0,
                                value: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFormStep"] != null &&
                          typeof $steps["updateFormStep"] === "object" &&
                          typeof $steps["updateFormStep"].then === "function"
                        ) {
                          $steps["updateFormStep"] = await $steps[
                            "updateFormStep"
                          ];
                        }
                      },
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["startOnboardingQuizForm", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["startOnboardingQuizForm"] = ref;
                      },
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "startOnboardingQuizForm.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName:
                            "startOnboardingQuizForm.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"startOnboardingQuizForm"}
                        data-plasmic-override={
                          overrides.startOnboardingQuizForm
                        }
                        {...child$Props}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__fd71L
                          )}
                          label={"What instrument would you like to enrol for?"}
                          name={"instrumentCategory"}
                          rules={[
                            { ruleType: "required", message: "Required" }
                          ]}
                        >
                          <AntdRadioGroup
                            className={classNames(
                              "__wab_instance",
                              sty.radioGroup___8Ub3P
                            )}
                            options={(() => {
                              const __composite = [
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null }
                              ];
                              __composite["0"]["label"] = "Strings";
                              __composite["0"]["value"] = "STRINGS";
                              __composite["1"]["label"] = "Woodwind";
                              __composite["1"]["value"] = "WOODWIND";
                              __composite["2"]["label"] = "Piano";
                              __composite["2"]["value"] = "PIANO";
                              __composite["3"]["label"] = "Voice";
                              __composite["3"]["value"] = "VOICE";
                              __composite["4"]["label"] = "Percussion";
                              __composite["4"]["value"] = "PERCUSSION";
                              __composite["5"]["label"] = "Guitar";
                              __composite["5"]["value"] = "GUITAR";
                              return __composite;
                            })()}
                          >
                            <AntdRadio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__aAfHi
                              )}
                              value={"op1"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yhnnb
                                )}
                              >
                                {"Option 1"}
                              </div>
                            </AntdRadio>
                            <AntdRadio
                              className={classNames(
                                "__wab_instance",
                                sty.radio___747V
                              )}
                              value={"op2"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wqZ60
                                )}
                              >
                                {"Option 2"}
                              </div>
                            </AntdRadio>
                          </AntdRadioGroup>
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__utlTm
                          )}
                          label={"What level do you best fit in?"}
                          name={"trainingLevel"}
                          rules={[
                            { ruleType: "required", message: "Required" }
                          ]}
                        >
                          <AntdRadioGroup
                            className={classNames(
                              "__wab_instance",
                              sty.radioGroup__l43Pt
                            )}
                            options={(() => {
                              const __composite = [
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null },
                                { type: "option", label: null, value: null }
                              ];
                              __composite["0"]["label"] = "Beginner";
                              __composite["0"]["value"] = "BEGINNER";
                              __composite["1"]["label"] = "Novice";
                              __composite["1"]["value"] = "NOVICE";
                              __composite["2"]["label"] = "Intermediate";
                              __composite["2"]["value"] = "INTERMEDIATE";
                              __composite["3"]["label"] = "Skilled";
                              __composite["3"]["value"] = "SKILLED";
                              __composite["4"]["label"] = "Advanced";
                              __composite["4"]["value"] = "ADVANCED";
                              return __composite;
                            })()}
                          >
                            <AntdRadio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__grcTc
                              )}
                              value={"op1"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jXbsE
                                )}
                              >
                                {"Option 1"}
                              </div>
                            </AntdRadio>
                            <AntdRadio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__qHu8T
                              )}
                              value={"op2"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__slv3F
                                )}
                              >
                                {"Option 2"}
                              </div>
                            </AntdRadio>
                          </AntdRadioGroup>
                        </FormItemWrapper>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__zPexJ
                          )}
                          loading={(() => {
                            try {
                              return $state.startOnboardingQuizForm
                                .isSubmitting;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2WrE
                            )}
                          >
                            {"Next"}
                          </div>
                        </AntdButton>
                      </FormWrapper>
                    );
                  })()}
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.formStep >= 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__m6KO)}>
                  <QuizComponent
                    data-plasmic-name={"quizComponent"}
                    data-plasmic-override={overrides.quizComponent}
                    className={classNames("__wab_instance", sty.quizComponent)}
                    onQuizComplete={async quizComplete => {
                      const $steps = {};

                      $steps["postgresUpdateById"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              variable: {
                                objRoot: $state,
                                variablePath: ["onQuizComplete"]
                              },
                              value: quizComplete
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateById"] != null &&
                        typeof $steps["postgresUpdateById"] === "object" &&
                        typeof $steps["postgresUpdateById"].then === "function"
                      ) {
                        $steps["postgresUpdateById"] = await $steps[
                          "postgresUpdateById"
                        ];
                      }

                      $steps["updateQuizScore"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["quizScore"]
                              },
                              operation: 0,
                              value: $state.onQuizComplete.totalScore
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateQuizScore"] != null &&
                        typeof $steps["updateQuizScore"] === "object" &&
                        typeof $steps["updateQuizScore"].then === "function"
                      ) {
                        $steps["updateQuizScore"] = await $steps[
                          "updateQuizScore"
                        ];
                      }

                      $steps["updateVariable"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["quizTotalPoints"]
                              },
                              operation: 0,
                              value: $state.onQuizComplete.totalPoints
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVariable"] != null &&
                        typeof $steps["updateVariable"] === "object" &&
                        typeof $steps["updateVariable"].then === "function"
                      ) {
                        $steps["updateVariable"] = await $steps[
                          "updateVariable"
                        ];
                      }

                      $steps["updateIsPassedQuiz"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["isQuizPassed"]
                              },
                              operation: 0,
                              value: (() => {
                                if ($state.onQuizComplete !== null) {
                                  let div =
                                    $state.quizScore / $state.quizTotalPoints;
                                  let percent = div * 100;
                                  return percent > 50;
                                }
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsPassedQuiz"] != null &&
                        typeof $steps["updateIsPassedQuiz"] === "object" &&
                        typeof $steps["updateIsPassedQuiz"].then === "function"
                      ) {
                        $steps["updateIsPassedQuiz"] = await $steps[
                          "updateIsPassedQuiz"
                        ];
                      }

                      $steps["postgresUpdateById2"] = (() => {
                        if ($state.isQuizPassed === true) {
                          return true;
                        } else if (
                          $state.isQuizPassed === false &&
                          $state.lowerLevel === "0"
                        ) {
                          return true;
                        }
                      })()
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                opId: "c932613b-1a20-4ee5-8edc-21029dd5fbea",
                                userArgs: {
                                  keys: [$ctx.SupabaseUser.user.id],
                                  variables: [
                                    $state.quizScore,
                                    (() => {
                                      if ($state.isQuizPassed === true) {
                                        return true;
                                      } else if (
                                        $state.isQuizPassed === false &&
                                        $state.lowerLevel === "0"
                                      ) {
                                        return true;
                                      }
                                    })(),
                                    $state.startOnboardingQuizForm.value
                                      .instrumentCategory,
                                    $state.startOnboardingQuizForm.value
                                      .trainingLevel
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateById2"] != null &&
                        typeof $steps["postgresUpdateById2"] === "object" &&
                        typeof $steps["postgresUpdateById2"].then === "function"
                      ) {
                        $steps["postgresUpdateById2"] = await $steps[
                          "postgresUpdateById2"
                        ];
                      }
                    }}
                    onStart={async () => {
                      const $steps = {};

                      $steps["updateLowerLevel"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["lowerLevel"]
                              },
                              operation: 0,
                              value: (() => {
                                switch (
                                  $state.startOnboardingQuizForm.value
                                    .trainingLevel
                                ) {
                                  case "BEGINNER":
                                    return "0";
                                  case "NOVICE":
                                    return "BEGINNER";
                                  case "INTERMEDIATE":
                                    return "NOVICE";
                                  case "SKILLED":
                                    return "INTERMEDIATE";
                                  case "ADVANCED":
                                    return "SKILLED";
                                }
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLowerLevel"] != null &&
                        typeof $steps["updateLowerLevel"] === "object" &&
                        typeof $steps["updateLowerLevel"].then === "function"
                      ) {
                        $steps["updateLowerLevel"] = await $steps[
                          "updateLowerLevel"
                        ];
                      }

                      $steps["postgresUpdateById"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                opId: "a25f40b8-e706-4c1e-91ed-08dd8d0e9983",
                                userArgs: {
                                  keys: [$ctx.SupabaseUser.user.id]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateById"] != null &&
                        typeof $steps["postgresUpdateById"] === "object" &&
                        typeof $steps["postgresUpdateById"].then === "function"
                      ) {
                        $steps["postgresUpdateById"] = await $steps[
                          "postgresUpdateById"
                        ];
                      }
                    }}
                    questions={(() => {
                      try {
                        return $state.fetchedQuizInfo;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              question_text: "What is React?",
                              options: [
                                "A Library",
                                "A Framework",
                                "A Language"
                              ],
                              correct_answer: "A Library"
                            },
                            {
                              question_text:
                                "Which hook is used for state management?",
                              options: ["useEffect", "useState", "useReducer"],
                              correct_answer: "useState"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    quizTitle={"React Quiz"}
                    resetKey={(() => {
                      try {
                        return $state.formStep;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    timeLimit={120}
                  />

                  {(() => {
                    try {
                      return $state.quizScore !== null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v9Mz
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `To proceed, you would have to take the quiz for ${$state.chosenTrainingLevel.toLocaleLowerCase()}s`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "To proceed, you would have to take the quiz for  ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $state.quizScore !== null &&
                        !$state.isQuizPassed &&
                        $state.lowerLevel !== "0"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__djDcX
                      )}
                      disabled={(() => {
                        try {
                          return $state.disableNewQuizButton;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Lm8
                          )}
                        >
                          {"Retake Quiz"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDisableNewQuizButton"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disableNewQuizButton"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisableNewQuizButton"] != null &&
                          typeof $steps["updateDisableNewQuizButton"] ===
                            "object" &&
                          typeof $steps["updateDisableNewQuizButton"].then ===
                            "function"
                        ) {
                          $steps["updateDisableNewQuizButton"] = await $steps[
                            "updateDisableNewQuizButton"
                          ];
                        }

                        $steps["postgresGetList"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "cad74c7d-ca92-4362-b2ff-b9f30302c909",
                                  userArgs: {
                                    filters: [
                                      $state.startOnboardingQuizForm.value
                                        .instrumentCategory,
                                      $state.lowerLevel
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: null,
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresGetList"] != null &&
                          typeof $steps["postgresGetList"] === "object" &&
                          typeof $steps["postgresGetList"].then === "function"
                        ) {
                          $steps["postgresGetList"] = await $steps[
                            "postgresGetList"
                          ];
                        }

                        $steps["updateFetchedQuizId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["fetchedQuizId"]
                                },
                                operation: 0,
                                value: $steps.postgresGetList.data[0].id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFetchedQuizId"] != null &&
                          typeof $steps["updateFetchedQuizId"] === "object" &&
                          typeof $steps["updateFetchedQuizId"].then ===
                            "function"
                        ) {
                          $steps["updateFetchedQuizId"] = await $steps[
                            "updateFetchedQuizId"
                          ];
                        }

                        $steps["postgresGetList2"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "718444ab-0dcb-4bcb-86f7-c906331ee065",
                                  userArgs: {
                                    filters: [$state.fetchedQuizId]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: null,
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresGetList2"] != null &&
                          typeof $steps["postgresGetList2"] === "object" &&
                          typeof $steps["postgresGetList2"].then === "function"
                        ) {
                          $steps["postgresGetList2"] = await $steps[
                            "postgresGetList2"
                          ];
                        }

                        $steps["updateFetchedQuizInfo"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["fetchedQuizInfo"]
                                },
                                operation: 0,
                                value: $steps.postgresGetList2?.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFetchedQuizInfo"] != null &&
                          typeof $steps["updateFetchedQuizInfo"] === "object" &&
                          typeof $steps["updateFetchedQuizInfo"].then ===
                            "function"
                        ) {
                          $steps["updateFetchedQuizInfo"] = await $steps[
                            "updateFetchedQuizInfo"
                          ];
                        }

                        $steps["updateFormStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["formStep"]
                                },
                                operation: 2,
                                value: $state.formStep + 1 + 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFormStep"] != null &&
                          typeof $steps["updateFormStep"] === "object" &&
                          typeof $steps["updateFormStep"].then === "function"
                        ) {
                          $steps["updateFormStep"] = await $steps[
                            "updateFormStep"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.startOnboardingQuizForm.value.trainingLevel =
                                    $state.lowerLevel);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateQuizScore"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["quizScore"]
                                },
                                operation: 0,
                                value: null
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateQuizScore"] != null &&
                          typeof $steps["updateQuizScore"] === "object" &&
                          typeof $steps["updateQuizScore"].then === "function"
                        ) {
                          $steps["updateQuizScore"] = await $steps[
                            "updateQuizScore"
                          ];
                        }

                        $steps["updateOnQuizComplete"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["onQuizComplete"]
                                },
                                operation: 0,
                                value: {}
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateOnQuizComplete"] != null &&
                          typeof $steps["updateOnQuizComplete"] === "object" &&
                          typeof $steps["updateOnQuizComplete"].then ===
                            "function"
                        ) {
                          $steps["updateOnQuizComplete"] = await $steps[
                            "updateOnQuizComplete"
                          ];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return setTimeout(() => {
                                    $state.formStep++;
                                  }, 100);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["updateDisableNewQuizButton2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disableNewQuizButton"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisableNewQuizButton2"] != null &&
                          typeof $steps["updateDisableNewQuizButton2"] ===
                            "object" &&
                          typeof $steps["updateDisableNewQuizButton2"].then ===
                            "function"
                        ) {
                          $steps["updateDisableNewQuizButton2"] = await $steps[
                            "updateDisableNewQuizButton2"
                          ];
                        }
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.lowerLevel == "0";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bQliz
                      )}
                    >
                      {
                        "You're starting with the Beginner class! You'll get a mail when the classes begin"
                      }
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.isQuizPassed;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ls6I6
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `You passed. You're going to be enroled for the ${$state.startOnboardingQuizForm.value.trainingLevel.toLocaleLowerCase()} class`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "You passed. You're going to be enroled for ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                </div>
              ) : null}
            </Stack__>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "startOnboardingQuizForm", "quizComponent"],
  h4: ["h4"],
  startOnboardingQuizForm: ["startOnboardingQuizForm"],
  quizComponent: ["quizComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  startOnboardingQuizForm: typeof FormWrapper;
  quizComponent: typeof QuizComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOnboarding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOnboarding__VariantsArgs;
    args?: PlasmicOnboarding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOnboarding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOnboarding__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOnboarding__ArgProps,
          internalVariantPropNames: PlasmicOnboarding__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOnboarding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOnboarding";
  } else {
    func.displayName = `PlasmicOnboarding.${nodeName}`;
  }
  return func;
}

export const PlasmicOnboarding = Object.assign(
  // Top-level PlasmicOnboarding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    startOnboardingQuizForm: makeNodeComponent("startOnboardingQuizForm"),
    quizComponent: makeNodeComponent("quizComponent"),

    // Metadata about props expected for PlasmicOnboarding
    internalVariantProps: PlasmicOnboarding__VariantProps,
    internalArgProps: PlasmicOnboarding__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOnboarding;
/* prettier-ignore-end */
