/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: uRs3S1_fy6ET

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AdminPageLayout from "../../AdminPageLayout"; // plasmic-import: NXXR6Sd3NRz9/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import CourseGrid from "../../CourseGrid"; // plasmic-import: xmK9OAIpqo06/component
import Unauthorized from "../../Unauthorized"; // plasmic-import: ZnrbZI7AiPSe/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicAdminCourses.module.css"; // plasmic-import: uRs3S1_fy6ET/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicAdminCourses__VariantMembers = {};
export type PlasmicAdminCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminCourses__VariantsArgs;
export const PlasmicAdminCourses__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminCourses__ArgsType = {};
type ArgPropType = keyof PlasmicAdminCourses__ArgsType;
export const PlasmicAdminCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminCourses__OverridesType = {
  root?: Flex__<typeof AdminPageLayout>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  svg?: Flex__<"svg">;
  courseGrid?: Flex__<typeof CourseGrid>;
  section?: Flex__<"section">;
  unauthorized?: Flex__<typeof Unauthorized>;
};

export interface DefaultAdminCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminCourses__RenderFunc(props: {
  variants: PlasmicAdminCourses__VariantsArgs;
  args: PlasmicAdminCourses__ArgsType;
  overrides: PlasmicAdminCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "addNewCourseFormStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <AdminPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox__oZSy)}>
                  <AntdModal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      styleTokensClassNames
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["modal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, ["modal", "open"])}
                    title={
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__pDDaK
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.addNewCourseFormStep === 0
                                ? "Add New Course"
                                : "Your Course Has Been Added!";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Add New Course";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h5>
                    }
                    trigger={null}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2NhDn
                      )}
                    >
                      {(() => {
                        try {
                          return $state.addNewCourseFormStep === 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                        ? (() => {
                            const child$Props = {
                              className: classNames("__wab_instance", sty.form),
                              data: {
                                sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                opId: "f7d839c1-d12f-450a-94d2-e76b0d61edcc",
                                userArgs: {},
                                cacheKey: `plasmic.$.${(() => {
                                  try {
                                    return "getSchema";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}.$.V53OdTZaM-ry.$.f7d839c1-d12f-450a-94d2-e76b0d61edcc.$.`,
                                invalidatedKeys: null,
                                roleId: null
                              },
                              dataFormItems: (() => {
                                const __composite = [
                                  {
                                    key: "id",
                                    inputType: "Text",
                                    fieldId: "id",
                                    label: "id",
                                    name: "id",
                                    hidden: null
                                  },
                                  {
                                    key: "title",
                                    inputType: "Text",
                                    fieldId: "title",
                                    label: null,
                                    name: "title",
                                    rules: null
                                  },
                                  {
                                    key: "description",
                                    inputType: null,
                                    fieldId: "description",
                                    label: null,
                                    name: null
                                  },
                                  {
                                    key: "training_level",
                                    inputType: null,
                                    fieldId: "training_level",
                                    label: null,
                                    name: "training_level",
                                    rules: null
                                  },
                                  {
                                    key: "instrument_category",
                                    inputType: null,
                                    fieldId: "instrument_category",
                                    label: null,
                                    name: "instrument_category",
                                    rules: null
                                  },
                                  {
                                    key: "status",
                                    inputType: "Text",
                                    fieldId: "status",
                                    label: "status",
                                    name: "status",
                                    initialValue: null,
                                    hidden: null
                                  },
                                  {
                                    key: "cover_image",
                                    inputType: "Text",
                                    fieldId: "cover_image",
                                    label: null,
                                    name: "cover_image",
                                    hidden: null,
                                    rules: null
                                  },
                                  {
                                    key: "instructor_name",
                                    inputType: "Text",
                                    fieldId: "instructor_name",
                                    label: "instructor_name",
                                    name: "instructor_name",
                                    hidden: null
                                  },
                                  {
                                    key: "created_by",
                                    inputType: "Text",
                                    fieldId: "created_by",
                                    label: "created_by",
                                    name: "created_by",
                                    initialValue: null,
                                    hidden: null
                                  },
                                  {
                                    key: "created_at",
                                    inputType: "Text",
                                    fieldId: "created_at",
                                    label: "created_at",
                                    name: "created_at",
                                    hidden: null
                                  }
                                ];
                                __composite["0"]["hidden"] = true;
                                __composite["1"]["label"] = "Course Title";
                                __composite["1"]["rules"] = [
                                  {
                                    ruleType: "required",
                                    message: "Title is required"
                                  }
                                ];

                                __composite["2"]["inputType"] = "Text Area";
                                __composite["2"]["label"] =
                                  "Course Description";
                                __composite["2"]["name"] = "description";
                                __composite["3"]["inputType"] = "Select";
                                __composite["3"]["label"] = "Training Level";
                                __composite["3"]["rules"] = [
                                  {
                                    ruleType: "required",
                                    message: "Level is required"
                                  }
                                ];

                                __composite["4"]["inputType"] = "Select";
                                __composite["4"]["label"] =
                                  "Instrument Category";
                                __composite["4"]["rules"] = [
                                  {
                                    ruleType: "required",
                                    message: "Intrument category is required"
                                  }
                                ];

                                __composite["5"]["initialValue"] = "INACTIVE";
                                __composite["5"]["hidden"] = true;
                                __composite["6"]["label"] =
                                  "Add Cover Image Link";
                                __composite["6"]["hidden"] = false;
                                __composite["6"]["rules"] = [
                                  {
                                    ruleType: "advanced",
                                    custom: (rule, value) => {
                                      return (() => {
                                        const isValidLink = value => {
                                          const linkRegex =
                                            /^(ftp|http|https):\/\/[^ "]+$/;
                                          return linkRegex.test(value);
                                        };
                                        return isValidLink(value);
                                      })();
                                    }
                                  }
                                ];

                                __composite["7"]["hidden"] = true;
                                __composite["8"]["initialValue"] =
                                  $ctx.SupabaseUser?.user?.id;
                                __composite["8"]["hidden"] = true;
                                __composite["9"]["hidden"] = true;
                                return __composite;
                              })(),

                              extendedOnValuesChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["form", "value"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              formItems: [],
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: "simplified",
                              onFinish: async values => {
                                const $steps = {};

                                $steps["defaultSubmit"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                          opId: "6e68e792-327d-49b7-a9b2-2ad404628b3f",
                                          userArgs: {
                                            variables: [$state.form.value]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["defaultSubmit"] != null &&
                                  typeof $steps["defaultSubmit"] === "object" &&
                                  typeof $steps["defaultSubmit"].then ===
                                    "function"
                                ) {
                                  $steps["defaultSubmit"] = await $steps[
                                    "defaultSubmit"
                                  ];
                                }

                                $steps["updateAddNewCourseFormStep"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["addNewCourseFormStep"]
                                        },
                                        operation: 0,
                                        value: 1
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateAddNewCourseFormStep"] !=
                                    null &&
                                  typeof $steps[
                                    "updateAddNewCourseFormStep"
                                  ] === "object" &&
                                  typeof $steps["updateAddNewCourseFormStep"]
                                    .then === "function"
                                ) {
                                  $steps["updateAddNewCourseFormStep"] =
                                    await $steps["updateAddNewCourseFormStep"];
                                }
                              },
                              onIsSubmittingChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["form", "isSubmitting"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              ref: ref => {
                                $refs["form"] = ref;
                              },
                              requiredMark: "optional",
                              submitSlot: (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__uM5I8
                                  )}
                                  submitsForm={true}
                                  type={"primary"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__su4Mi
                                    )}
                                  >
                                    {"Save"}
                                  </div>
                                </AntdButton>
                              ),
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "form.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "form.isSubmitting"
                                }
                              ],
                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <FormWrapper
                                data-plasmic-name={"form"}
                                data-plasmic-override={overrides.form}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {(() => {
                        try {
                          return $state.addNewCourseFormStep === 1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zioSr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3Z9Fm
                            )}
                          >
                            {
                              "Your course details are saved successfully.\nNext, build your Course Structure to organize modules and lessons. Once your structure is complete, you\u2019ll be ready to publish and make your course available to students."
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s5Pud
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button___43Fj8
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eUuQ4
                                  )}
                                >
                                  {"Cancel"}
                                </div>
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateAddNewCourseFormStep"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["addNewCourseFormStep"]
                                        },
                                        operation: 0,
                                        value: 0
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateAddNewCourseFormStep"] !=
                                    null &&
                                  typeof $steps[
                                    "updateAddNewCourseFormStep"
                                  ] === "object" &&
                                  typeof $steps["updateAddNewCourseFormStep"]
                                    .then === "function"
                                ) {
                                  $steps["updateAddNewCourseFormStep"] =
                                    await $steps["updateAddNewCourseFormStep"];
                                }

                                $steps["updateModalOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["modal", "open"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateModalOpen"] != null &&
                                  typeof $steps["updateModalOpen"] ===
                                    "object" &&
                                  typeof $steps["updateModalOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateModalOpen"] = await $steps[
                                    "updateModalOpen"
                                  ];
                                }
                              }}
                              type={"bordered"}
                            />

                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__gjgkb
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sAiy
                                  )}
                                >
                                  {"Add Course Outline"}
                                </div>
                              }
                            />
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </AntdModal>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zy5UE)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lKRou)}
                    >
                      <h5
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5__l5LXk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `My Courses (${$ctx.adminCourses?.data?.length})`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "My Courses";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h5>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__edEh
                        )}
                        end={
                          <IconIcon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={"img"}
                          />
                        }
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xaXOd
                            )}
                          >
                            {"Add New Course"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateModalOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModalOpen"] != null &&
                            typeof $steps["updateModalOpen"] === "object" &&
                            typeof $steps["updateModalOpen"].then === "function"
                          ) {
                            $steps["updateModalOpen"] = await $steps[
                              "updateModalOpen"
                            ];
                          }
                        }}
                      />
                    </div>
                    <CourseGrid
                      data-plasmic-name={"courseGrid"}
                      data-plasmic-override={overrides.courseGrid}
                      className={classNames("__wab_instance", sty.courseGrid)}
                      courseList={(() => {
                        try {
                          return $ctx.adminCourses;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onViewClickLink={`/admin-view-course`}
                    />
                  </div>
                </div>
                {(() => {
                  try {
                    return (
                      $ctx.SupabaseUser.user &&
                      $ctx.SupabaseUser.user.user_metadata.userRole !== "admin"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Unauthorized
                      data-plasmic-name={"unauthorized"}
                      data-plasmic-override={overrides.unauthorized}
                      className={classNames("__wab_instance", sty.unauthorized)}
                    />
                  </section>
                ) : null}
              </React.Fragment>
            )}
          </DataCtxReader__>
        </AdminPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "form",
    "svg",
    "courseGrid",
    "section",
    "unauthorized"
  ],
  modal: ["modal", "form"],
  form: ["form"],
  svg: ["svg"],
  courseGrid: ["courseGrid"],
  section: ["section", "unauthorized"],
  unauthorized: ["unauthorized"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof AdminPageLayout;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  svg: "svg";
  courseGrid: typeof CourseGrid;
  section: "section";
  unauthorized: typeof Unauthorized;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminCourses__VariantsArgs;
    args?: PlasmicAdminCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdminCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminCourses__ArgProps,
          internalVariantPropNames: PlasmicAdminCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminCourses";
  } else {
    func.displayName = `PlasmicAdminCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminCourses = Object.assign(
  // Top-level PlasmicAdminCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    svg: makeNodeComponent("svg"),
    courseGrid: makeNodeComponent("courseGrid"),
    section: makeNodeComponent("section"),
    unauthorized: makeNodeComponent("unauthorized"),

    // Metadata about props expected for PlasmicAdminCourses
    internalVariantProps: PlasmicAdminCourses__VariantProps,
    internalArgProps: PlasmicAdminCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminCourses;
/* prettier-ignore-end */
