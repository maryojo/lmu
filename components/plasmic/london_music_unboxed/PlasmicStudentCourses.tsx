/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: scyO_hkhBT6w

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StudentPageLayout from "../../StudentPageLayout"; // plasmic-import: Itd9tHC_WCDz/component
import CourseCard from "../../CourseCard"; // plasmic-import: lU_2619e8-pr/component
import TextInput from "../../TextInput"; // plasmic-import: DoqLM-i_9RsN/component
import CourseGrid from "../../CourseGrid"; // plasmic-import: xmK9OAIpqo06/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicStudentCourses.module.css"; // plasmic-import: scyO_hkhBT6w/css

createPlasmicElementProxy;

export type PlasmicStudentCourses__VariantMembers = {};
export type PlasmicStudentCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicStudentCourses__VariantsArgs;
export const PlasmicStudentCourses__VariantProps = new Array<VariantPropType>();

export type PlasmicStudentCourses__ArgsType = {};
type ArgPropType = keyof PlasmicStudentCourses__ArgsType;
export const PlasmicStudentCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicStudentCourses__OverridesType = {
  root?: Flex__<typeof StudentPageLayout>;
  columns?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  courseGrid?: Flex__<typeof CourseGrid>;
};

export interface DefaultStudentCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStudentCourses__RenderFunc(props: {
  variants: PlasmicStudentCourses__VariantsArgs;
  args: PlasmicStudentCourses__ArgsType;
  overrides: PlasmicStudentCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <StudentPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__gyCy)}>
                <div className={classNames(projectcss.all, sty.freeBox__aOrVu)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qyl9C)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__mvDd0
                      )}
                    >
                      {"Enrolled Courses (30)"}
                    </h4>
                  </div>
                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__dyr4U)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard___6BUkT
                        )}
                        id={(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__iEcyc)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard___4Mbtk
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___0F7C)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard___2IaFo
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__kcBuJ)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard__xt9Js
                        )}
                      />
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__w2W1D)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cLo8Z)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__z84Zp
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `Available Courses (${$ctx.allAvailableCourses.data.length})`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Available Courses (30)";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h4>
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      inputMode={"search"}
                      inputType={"search"}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"Search"}
                      value={generateStateValueProp($state, [
                        "textInput",
                        "value"
                      ])}
                    />
                  </div>
                  <CourseGrid
                    data-plasmic-name={"courseGrid"}
                    data-plasmic-override={overrides.courseGrid}
                    className={classNames("__wab_instance", sty.courseGrid)}
                    courseList={(() => {
                      try {
                        return $ctx.allAvailableCourses;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onViewClickLink={`/student-view-course`}
                  />
                </div>
              </div>
            )}
          </DataCtxReader__>
        </StudentPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "textInput", "courseGrid"],
  columns: ["columns"],
  textInput: ["textInput"],
  courseGrid: ["courseGrid"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof StudentPageLayout;
  columns: "div";
  textInput: typeof TextInput;
  courseGrid: typeof CourseGrid;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStudentCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStudentCourses__VariantsArgs;
    args?: PlasmicStudentCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStudentCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStudentCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStudentCourses__ArgProps,
          internalVariantPropNames: PlasmicStudentCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStudentCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStudentCourses";
  } else {
    func.displayName = `PlasmicStudentCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicStudentCourses = Object.assign(
  // Top-level PlasmicStudentCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    textInput: makeNodeComponent("textInput"),
    courseGrid: makeNodeComponent("courseGrid"),

    // Metadata about props expected for PlasmicStudentCourses
    internalVariantProps: PlasmicStudentCourses__VariantProps,
    internalArgProps: PlasmicStudentCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStudentCourses;
/* prettier-ignore-end */
