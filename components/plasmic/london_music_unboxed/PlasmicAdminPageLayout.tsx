/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: NXXR6Sd3NRz9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { SimpleCustomGlobalProvider } from "/my-contexts/SimpleGlobalProvider"; // plasmic-import: uzE7DNMozwxD/codeComponent
import { AdminRoleSpecificProvider } from "/my-contexts/AdminRoleSpecificProvider"; // plasmic-import: 2Q_d2uURtJKJ/codeComponent
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import DashboardNavbar from "../../DashboardNavbar"; // plasmic-import: f9TmdLYt-K-T/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicAdminPageLayout.module.css"; // plasmic-import: NXXR6Sd3NRz9/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 9jWhbyexBI6r/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: _qXKnOYU_rli/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: N3QPeGSqpqGp/icon

createPlasmicElementProxy;

export type PlasmicAdminPageLayout__VariantMembers = {};
export type PlasmicAdminPageLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminPageLayout__VariantsArgs;
export const PlasmicAdminPageLayout__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAdminPageLayout__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicAdminPageLayout__ArgsType;
export const PlasmicAdminPageLayout__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicAdminPageLayout__OverridesType = {
  root?: Flex__<typeof RichLayout>;
  simpleCustomGlobalProvider?: Flex__<typeof SimpleCustomGlobalProvider>;
  adminRoleSpecificProvider?: Flex__<typeof AdminRoleSpecificProvider>;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  dashboardNavbar?: Flex__<typeof DashboardNavbar>;
  text?: Flex__<"div">;
};

export interface DefaultAdminPageLayoutProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminPageLayout__RenderFunc(props: {
  variants: PlasmicAdminPageLayout__VariantsArgs;
  args: PlasmicAdminPageLayout__ArgsType;
  overrides: PlasmicAdminPageLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "answerOptions",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "fullFormValues",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fetchAllOnboardingQuizzes: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "4853205b-c7e6-4fad-90f8-e9c574f6b3d4",
        userArgs: {},
        cacheKey: `plasmic.$.4853205b-c7e6-4fad-90f8-e9c574f6b3d4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "173887ef-f580-4be0-91cd-a1cacc9b2b07",
        userArgs: {
          filters: [$state.allQuizzesTable.selectedRow.id]
        },
        cacheKey: `plasmic.$.173887ef-f580-4be0-91cd-a1cacc9b2b07.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchQuizQuestionByQuizId: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "173887ef-f580-4be0-91cd-a1cacc9b2b07",
        userArgs: {
          filters: [$state.allQuizzesTable.selectedRow.id]
        },
        cacheKey: `plasmic.$.173887ef-f580-4be0-91cd-a1cacc9b2b07.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUserData: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "a9ac0b28-c76e-4841-a754-c839946bba5b",
        userArgs: {
          keys: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.a9ac0b28-c76e-4841-a754-c839946bba5b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getAllCourses: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "e7405e96-25f2-465a-85a2-7804407c0f24",
        userArgs: {},
        cacheKey: `plasmic.$.e7405e96-25f2-465a-85a2-7804407c0f24.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getAllStudentsData: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "cd6036d1-d7d7-4960-918d-83f763aeb4aa",
        userArgs: {},
        cacheKey: `plasmic.$.cd6036d1-d7d7-4960-918d-83f763aeb4aa.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getAllInstructorsData: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "8d462b74-9518-4982-969c-cac150f38507",
        userArgs: {},
        cacheKey: `plasmic.$.8d462b74-9518-4982-969c-cac150f38507.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      actionsChildren={
        <div className={classNames(projectcss.all, sty.freeBox__oagyb)}>
          <div
            className={classNames(projectcss.all, sty.freeBox__ghV8G)}
            onClick={async event => {
              const $steps = {};

              $steps["logout"] = true
                ? (() => {
                    const actionArgs = { args: ["/login"] };
                    return $globalActions[
                      "SupabaseUserGlobalContext.logout"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["logout"] != null &&
                typeof $steps["logout"] === "object" &&
                typeof $steps["logout"].then === "function"
              ) {
                $steps["logout"] = await $steps["logout"];
              }
            }}
          >
            <Icon3Icon
              className={classNames(projectcss.all, sty.svg__kc25M)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Logout"}
            </div>
          </div>
        </div>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
      fixSiderbar={true}
      layout={"side"}
      logoElement={
        <Icon7Icon
          className={classNames(projectcss.all, sty.svg__qSmk1)}
          role={"img"}
        />
      }
      menu={(() => {
        const __composite = { hideMenuWhenCollapsed: null };
        __composite["hideMenuWhenCollapsed"] = false;
        return __composite;
      })()}
      navMenuItems={(() => {
        const __composite = [
          { name: null },
          { name: null, path: null },
          { name: null, routes: null },
          { name: null, routes: null },
          { path: null, name: null },
          { name: null }
        ];
        __composite["0"]["name"] = "Dashboard";
        __composite["1"]["name"] = "All Courses";
        __composite["1"]["path"] = `/all-courses`;
        __composite["2"]["name"] = "All Users";
        __composite["2"]["routes"] = (() => {
          const __composite = [
            { name: null, path: null },
            { name: null, path: null }
          ];
          __composite["0"]["name"] = "Students";
          __composite["0"]["path"] = `/all-students`;
          __composite["1"]["name"] = "Instructors";
          __composite["1"]["path"] = `/all-instructors`;
          return __composite;
        })();
        __composite["3"]["name"] = "General Assessments";
        __composite["3"]["routes"] = (() => {
          const __composite = [{ path: null, name: null }];
          __composite["0"]["path"] = `/add-onboarding-questions`;
          __composite["0"]["name"] = "Onboarding Quiz";
          return __composite;
        })();
        __composite["4"]["path"] = `/add-onboarding-questions`;
        __composite["4"]["name"] = "Onboarding Quiz";
        __composite["5"]["name"] = "Settings";
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { scheme: null };
        __composite["scheme"] = "dark";
        return __composite;
      })()}
      title={"London Music Unboxed"}
    >
      <SimpleCustomGlobalProvider
        data-plasmic-name={"simpleCustomGlobalProvider"}
        data-plasmic-override={overrides.simpleCustomGlobalProvider}
        className={classNames("__wab_instance", sty.simpleCustomGlobalProvider)}
        userData={(() => {
          try {
            return $queries.getUserData?.data[0];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx => (
            <AdminRoleSpecificProvider
              data-plasmic-name={"adminRoleSpecificProvider"}
              data-plasmic-override={overrides.adminRoleSpecificProvider}
              allCoursesData={(() => {
                try {
                  return $queries.getAllCourses;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              allInstructorsData={(() => {
                try {
                  return $queries.getAllInstructorsData;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              allStudentsData={(() => {
                try {
                  return $queries.getAllStudentsData;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames(
                "__wab_instance",
                sty.adminRoleSpecificProvider
              )}
            >
              <DataCtxReader__>
                {$ctx => (
                  <LoadingBoundary
                    data-plasmic-name={"loadingBoundary"}
                    data-plasmic-override={overrides.loadingBoundary}
                    loadingState={
                      <DataCtxReader__>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xE2KW
                            )}
                          >
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qoFyG
                              )}
                              role={"img"}
                            />
                          </div>
                        )}
                      </DataCtxReader__>
                    }
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <React.Fragment>
                          <DashboardNavbar
                            data-plasmic-name={"dashboardNavbar"}
                            data-plasmic-override={overrides.dashboardNavbar}
                            className={classNames(
                              "__wab_instance",
                              sty.dashboardNavbar
                            )}
                            profileLink={`/admin-profile`}
                          />

                          {renderPlasmicSlot({
                            defaultContents: (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__rpkHt
                                )}
                              >
                                <section
                                  className={classNames(
                                    projectcss.all,
                                    sty.section__ie6NX
                                  )}
                                >
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1___2HHzJ
                                    )}
                                  >
                                    {"Untitled page"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__urrJq
                                    )}
                                  >
                                    {
                                      "Press the big blue + button to insert components like Tables, Text, Buttons, and Forms.\n\nJoin our Slack Community (icon in bottom left) for help!"
                                    }
                                  </div>
                                </section>
                              </div>
                            ),
                            value: args.children
                          })}
                        </React.Fragment>
                      )}
                    </DataCtxReader__>
                  </LoadingBoundary>
                )}
              </DataCtxReader__>
            </AdminRoleSpecificProvider>
          )}
        </DataCtxReader__>
      </SimpleCustomGlobalProvider>
    </RichLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "simpleCustomGlobalProvider",
    "adminRoleSpecificProvider",
    "loadingBoundary",
    "dashboardNavbar",
    "text"
  ],
  simpleCustomGlobalProvider: [
    "simpleCustomGlobalProvider",
    "adminRoleSpecificProvider",
    "loadingBoundary",
    "dashboardNavbar"
  ],
  adminRoleSpecificProvider: [
    "adminRoleSpecificProvider",
    "loadingBoundary",
    "dashboardNavbar"
  ],
  loadingBoundary: ["loadingBoundary", "dashboardNavbar"],
  dashboardNavbar: ["dashboardNavbar"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
  simpleCustomGlobalProvider: typeof SimpleCustomGlobalProvider;
  adminRoleSpecificProvider: typeof AdminRoleSpecificProvider;
  loadingBoundary: typeof LoadingBoundary;
  dashboardNavbar: typeof DashboardNavbar;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminPageLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminPageLayout__VariantsArgs;
    args?: PlasmicAdminPageLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminPageLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdminPageLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminPageLayout__ArgProps,
          internalVariantPropNames: PlasmicAdminPageLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminPageLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminPageLayout";
  } else {
    func.displayName = `PlasmicAdminPageLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminPageLayout = Object.assign(
  // Top-level PlasmicAdminPageLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    simpleCustomGlobalProvider: makeNodeComponent("simpleCustomGlobalProvider"),
    adminRoleSpecificProvider: makeNodeComponent("adminRoleSpecificProvider"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    dashboardNavbar: makeNodeComponent("dashboardNavbar"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicAdminPageLayout
    internalVariantProps: PlasmicAdminPageLayout__VariantProps,
    internalArgProps: PlasmicAdminPageLayout__ArgProps
  }
);

export default PlasmicAdminPageLayout;
/* prettier-ignore-end */
