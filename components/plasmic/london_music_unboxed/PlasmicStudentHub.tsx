/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: hdHAhu2DZZ73

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import StudentPageLayout from "../../StudentPageLayout"; // plasmic-import: Itd9tHC_WCDz/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import ResourceGrid from "../../ResourceGrid"; // plasmic-import: ongOogzLEdrq/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicStudentHub.module.css"; // plasmic-import: hdHAhu2DZZ73/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicStudentHub__VariantMembers = {};
export type PlasmicStudentHub__VariantsArgs = {};
type VariantPropType = keyof PlasmicStudentHub__VariantsArgs;
export const PlasmicStudentHub__VariantProps = new Array<VariantPropType>();

export type PlasmicStudentHub__ArgsType = {};
type ArgPropType = keyof PlasmicStudentHub__ArgsType;
export const PlasmicStudentHub__ArgProps = new Array<ArgPropType>();

export type PlasmicStudentHub__OverridesType = {
  root?: Flex__<typeof StudentPageLayout>;
  h4?: Flex__<"h4">;
  dropdown?: Flex__<typeof AntdDropdown>;
  resourceGrid?: Flex__<typeof ResourceGrid>;
};

export interface DefaultStudentHubProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStudentHub__RenderFunc(props: {
  variants: PlasmicStudentHub__VariantsArgs;
  args: PlasmicStudentHub__ArgsType;
  overrides: PlasmicStudentHub__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <StudentPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__oyBp)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7S0Wh)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kSYb6)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"Resources For You"}
                    </h4>
                    <AntdDropdown
                      data-plasmic-name={"dropdown"}
                      data-plasmic-override={overrides.dropdown}
                      className={classNames("__wab_instance", sty.dropdown)}
                      dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
                      menuItems={() => (
                        <React.Fragment>
                          <AntdMenuItem
                            className={classNames(
                              "__wab_instance",
                              sty.menuItem___6RclB
                            )}
                            key={"menu-item-1"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rx7XF
                              )}
                            >
                              {"Menu item"}
                            </div>
                          </AntdMenuItem>
                          <AntdMenuItem
                            className={classNames(
                              "__wab_instance",
                              sty.menuItem___0FFx4
                            )}
                            key={"menu-item-2"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wCxQ
                              )}
                            >
                              {"Menu item"}
                            </div>
                          </AntdMenuItem>
                        </React.Fragment>
                      )}
                      menuItemsJson={[
                        { type: "item", value: "action1", label: "Action 1" },
                        { type: "item", value: "action2", label: "Action 2" }
                      ]}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__nwSQh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sls5F
                          )}
                        >
                          {"Dropdown"}
                        </div>
                      </AntdButton>
                    </AntdDropdown>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__yV9By
                      )}
                    />
                  </div>
                  <ResourceGrid
                    data-plasmic-name={"resourceGrid"}
                    data-plasmic-override={overrides.resourceGrid}
                    className={classNames("__wab_instance", sty.resourceGrid)}
                    resourceList={(() => {
                      try {
                        return $ctx.allAvailableCourses;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              </div>
            )}
          </DataCtxReader__>
        </StudentPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "dropdown", "resourceGrid"],
  h4: ["h4"],
  dropdown: ["dropdown"],
  resourceGrid: ["resourceGrid"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof StudentPageLayout;
  h4: "h4";
  dropdown: typeof AntdDropdown;
  resourceGrid: typeof ResourceGrid;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStudentHub__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStudentHub__VariantsArgs;
    args?: PlasmicStudentHub__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStudentHub__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStudentHub__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStudentHub__ArgProps,
          internalVariantPropNames: PlasmicStudentHub__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStudentHub__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStudentHub";
  } else {
    func.displayName = `PlasmicStudentHub.${nodeName}`;
  }
  return func;
}

export const PlasmicStudentHub = Object.assign(
  // Top-level PlasmicStudentHub renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    dropdown: makeNodeComponent("dropdown"),
    resourceGrid: makeNodeComponent("resourceGrid"),

    // Metadata about props expected for PlasmicStudentHub
    internalVariantProps: PlasmicStudentHub__VariantProps,
    internalArgProps: PlasmicStudentHub__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStudentHub;
/* prettier-ignore-end */
