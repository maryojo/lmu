/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: wVCOegZBqr5L

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AdminPageLayout from "../../AdminPageLayout"; // plasmic-import: NXXR6Sd3NRz9/component
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import CourseCard from "../../CourseCard"; // plasmic-import: lU_2619e8-pr/component
import Unauthorized from "../../Unauthorized"; // plasmic-import: ZnrbZI7AiPSe/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicAdminDashboard.module.css"; // plasmic-import: wVCOegZBqr5L/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: IG49PCNfzFCB/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: jkQ1pOWd7e68/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 0fflnDuvI7c1/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: IuQNgVybgFcd/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicAdminDashboard__VariantMembers = {};
export type PlasmicAdminDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminDashboard__VariantsArgs;
export const PlasmicAdminDashboard__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminDashboard__ArgsType = {};
type ArgPropType = keyof PlasmicAdminDashboard__ArgsType;
export const PlasmicAdminDashboard__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminDashboard__OverridesType = {
  root?: Flex__<typeof AdminPageLayout>;
  h4?: Flex__<"h4">;
  button?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  unauthorized?: Flex__<typeof Unauthorized>;
};

export interface DefaultAdminDashboardProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdminDashboard__RenderFunc(props: {
  variants: PlasmicAdminDashboard__VariantsArgs;
  args: PlasmicAdminDashboard__ArgsType;
  overrides: PlasmicAdminDashboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fullFormValues",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "selectedQuizInfo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "selectedRowId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isNotUniqueQuiz",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isUpdateTitleLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "updatedQuizDetails",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "questionIdToDelete",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isQuestionEditMode",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getOnboardingQuizzes: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "0bb4e4c3-b5bc-477c-a0a9-6118a2519034",
        userArgs: {},
        cacheKey: `plasmic.$.0bb4e4c3-b5bc-477c-a0a9-6118a2519034.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <AdminPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox__eiIdw)}>
                  <div
                    className={classNames(projectcss.all, sty.columns___6PZgf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__pinMp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cWU1
                        )}
                      >
                        <Icon15Icon
                          className={classNames(projectcss.all, sty.svg__jAWw)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yHr16
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cpeCz
                            )}
                          >
                            {"21"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dHbx9
                            )}
                          >
                            {"Enrolled Courses"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__qQgfW)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mPm7N
                        )}
                      >
                        <Icon11Icon
                          className={classNames(projectcss.all, sty.svg__snvcL)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iFpH
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e7NaY
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.globalInstructorsData?.data
                                    .length;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nrh9I
                            )}
                          >
                            {"Intructors"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__oQott)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f7WwI
                        )}
                      >
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__focQr)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0Fv2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zZUdS
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.globalCoursesData?.data.length;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "21";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vkJrA
                            )}
                          >
                            {"Active Courses"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__mstaV)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__i9Fh3
                        )}
                      >
                        <Icon13Icon
                          className={classNames(projectcss.all, sty.svg__vxt6X)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uiTkY
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__awp8N
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.globalStudentsData?.data.length;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2C7OP
                            )}
                          >
                            {"Students"}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1Vs23)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oh5T)}
                    >
                      <h4
                        data-plasmic-name={"h4"}
                        data-plasmic-override={overrides.h4}
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4
                        )}
                      >
                        {"Popular Courses"}
                      </h4>
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.columns__lml12)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__lYwee
                        )}
                      >
                        <CourseCard
                          className={classNames(
                            "__wab_instance",
                            sty.courseCard___2HeSr
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__f5Lhu
                        )}
                      >
                        <CourseCard
                          className={classNames(
                            "__wab_instance",
                            sty.courseCard__p58A
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___6EZwT
                        )}
                      >
                        <CourseCard
                          className={classNames(
                            "__wab_instance",
                            sty.courseCard__eOqf9
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__mgl1B
                        )}
                      >
                        <CourseCard
                          className={classNames(
                            "__wab_instance",
                            sty.courseCard__a7Bro
                          )}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                {(() => {
                  try {
                    return (
                      $ctx.SupabaseUser.user &&
                      $ctx.SupabaseUser.user.user_metadata.userRole !== "admin"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Unauthorized
                      data-plasmic-name={"unauthorized"}
                      data-plasmic-override={overrides.unauthorized}
                      className={classNames("__wab_instance", sty.unauthorized)}
                    />
                  </section>
                ) : null}
              </React.Fragment>
            )}
          </DataCtxReader__>
        </AdminPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "button", "section", "unauthorized"],
  h4: ["h4"],
  button: ["button"],
  section: ["section", "unauthorized"],
  unauthorized: ["unauthorized"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof AdminPageLayout;
  h4: "h4";
  button: typeof Button;
  section: "section";
  unauthorized: typeof Unauthorized;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminDashboard__VariantsArgs;
    args?: PlasmicAdminDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdminDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdminDashboard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdminDashboard__ArgProps,
          internalVariantPropNames: PlasmicAdminDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdminDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminDashboard";
  } else {
    func.displayName = `PlasmicAdminDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminDashboard = Object.assign(
  // Top-level PlasmicAdminDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),
    section: makeNodeComponent("section"),
    unauthorized: makeNodeComponent("unauthorized"),

    // Metadata about props expected for PlasmicAdminDashboard
    internalVariantProps: PlasmicAdminDashboard__VariantProps,
    internalArgProps: PlasmicAdminDashboard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdminDashboard;
/* prettier-ignore-end */
