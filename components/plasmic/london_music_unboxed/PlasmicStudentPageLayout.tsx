/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: Itd9tHC_WCDz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { SimpleCustomGlobalProvider } from "/my-contexts/SimpleGlobalProvider"; // plasmic-import: uzE7DNMozwxD/codeComponent
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import DashboardNavbar from "../../DashboardNavbar"; // plasmic-import: f9TmdLYt-K-T/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicStudentPageLayout.module.css"; // plasmic-import: Itd9tHC_WCDz/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 9jWhbyexBI6r/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: _qXKnOYU_rli/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: N3QPeGSqpqGp/icon

createPlasmicElementProxy;

export type PlasmicStudentPageLayout__VariantMembers = {};
export type PlasmicStudentPageLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicStudentPageLayout__VariantsArgs;
export const PlasmicStudentPageLayout__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStudentPageLayout__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicStudentPageLayout__ArgsType;
export const PlasmicStudentPageLayout__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicStudentPageLayout__OverridesType = {
  root?: Flex__<typeof RichLayout>;
  simpleCustomGlobalProvider?: Flex__<typeof SimpleCustomGlobalProvider>;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  dashboardNavbar?: Flex__<typeof DashboardNavbar>;
  text?: Flex__<"div">;
};

export interface DefaultStudentPageLayoutProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStudentPageLayout__RenderFunc(props: {
  variants: PlasmicStudentPageLayout__VariantsArgs;
  args: PlasmicStudentPageLayout__ArgsType;
  overrides: PlasmicStudentPageLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "answerOptions",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "fullFormValues",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fetchAllOnboardingQuizzes: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "4853205b-c7e6-4fad-90f8-e9c574f6b3d4",
        userArgs: {},
        cacheKey: `plasmic.$.4853205b-c7e6-4fad-90f8-e9c574f6b3d4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "173887ef-f580-4be0-91cd-a1cacc9b2b07",
        userArgs: {
          filters: [$state.allQuizzesTable.selectedRow.id]
        },
        cacheKey: `plasmic.$.173887ef-f580-4be0-91cd-a1cacc9b2b07.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchQuizQuestionByQuizId: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "173887ef-f580-4be0-91cd-a1cacc9b2b07",
        userArgs: {
          filters: [$state.allQuizzesTable.selectedRow.id]
        },
        cacheKey: `plasmic.$.173887ef-f580-4be0-91cd-a1cacc9b2b07.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchUserData: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "1b0caaf1-903e-4b59-a91a-219c7a831364",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.1b0caaf1-903e-4b59-a91a-219c7a831364.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      actionsChildren={
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sOhjt)}
          onClick={async event => {
            const $steps = {};

            $steps["logout"] = true
              ? (() => {
                  const actionArgs = { args: ["/login"] };
                  return $globalActions[
                    "SupabaseUserGlobalContext.logout"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
            if (
              $steps["logout"] != null &&
              typeof $steps["logout"] === "object" &&
              typeof $steps["logout"].then === "function"
            ) {
              $steps["logout"] = await $steps["logout"];
            }
          }}
        >
          <Icon3Icon
            className={classNames(projectcss.all, sty.svg__mmw74)}
            role={"img"}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Logout"}
          </div>
        </Stack__>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      fixSiderbar={true}
      layout={"side"}
      logoElement={
        <Icon7Icon
          className={classNames(projectcss.all, sty.svg___0J1Bd)}
          role={"img"}
        />
      }
      menu={(() => {
        const __composite = { hideMenuWhenCollapsed: null };
        __composite["hideMenuWhenCollapsed"] = false;
        return __composite;
      })()}
      navMenuItems={(() => {
        const __composite = [
          { path: null, name: null },
          { name: null, routes: null },
          { path: null, name: null }
        ];
        __composite["0"]["path"] = `/student-dashboard`;
        __composite["0"]["name"] = "Dashboard";
        __composite["1"]["name"] = "Courses";
        __composite["1"]["routes"] = (() => {
          const __composite = [{ path: null, name: null }, { name: null }];
          __composite["0"]["path"] = `/student-courses`;
          __composite["0"]["name"] = "My Courses";
          __composite["1"]["name"] = "Assessments";
          return __composite;
        })();
        __composite["2"]["path"] = `/student-profile`;
        __composite["2"]["name"] = "My Profile";
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { scheme: null };
        __composite["scheme"] = "dark";
        return __composite;
      })()}
      title={"London Music Unboxed"}
    >
      <SimpleCustomGlobalProvider
        data-plasmic-name={"simpleCustomGlobalProvider"}
        data-plasmic-override={overrides.simpleCustomGlobalProvider}
        className={classNames("__wab_instance", sty.simpleCustomGlobalProvider)}
        userData={(() => {
          try {
            return $queries?.fetchUserData?.data[0];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx => (
            <LoadingBoundary
              data-plasmic-name={"loadingBoundary"}
              data-plasmic-override={overrides.loadingBoundary}
              loadingState={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hhi8H)}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__dyBgw)}
                        role={"img"}
                      />
                    </div>
                  )}
                </DataCtxReader__>
              }
            >
              <DataCtxReader__>
                {$ctx => (
                  <React.Fragment>
                    <DashboardNavbar
                      data-plasmic-name={"dashboardNavbar"}
                      data-plasmic-override={overrides.dashboardNavbar}
                      className={classNames(
                        "__wab_instance",
                        sty.dashboardNavbar
                      )}
                    />

                    {renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___66Tdk
                          )}
                        >
                          <section
                            className={classNames(
                              projectcss.all,
                              sty.section__eEUdA
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__tHpZs
                              )}
                            >
                              {"Untitled page"}
                            </h1>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t4Qkf
                              )}
                            >
                              {
                                "Press the big blue + button to insert components like Tables, Text, Buttons, and Forms.\n\nJoin our Slack Community (icon in bottom left) for help!"
                              }
                            </div>
                          </section>
                        </div>
                      ),
                      value: args.children
                    })}
                  </React.Fragment>
                )}
              </DataCtxReader__>
            </LoadingBoundary>
          )}
        </DataCtxReader__>
      </SimpleCustomGlobalProvider>
    </RichLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "simpleCustomGlobalProvider",
    "loadingBoundary",
    "dashboardNavbar",
    "text"
  ],
  simpleCustomGlobalProvider: [
    "simpleCustomGlobalProvider",
    "loadingBoundary",
    "dashboardNavbar"
  ],
  loadingBoundary: ["loadingBoundary", "dashboardNavbar"],
  dashboardNavbar: ["dashboardNavbar"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
  simpleCustomGlobalProvider: typeof SimpleCustomGlobalProvider;
  loadingBoundary: typeof LoadingBoundary;
  dashboardNavbar: typeof DashboardNavbar;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStudentPageLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStudentPageLayout__VariantsArgs;
    args?: PlasmicStudentPageLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStudentPageLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStudentPageLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStudentPageLayout__ArgProps,
          internalVariantPropNames: PlasmicStudentPageLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStudentPageLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStudentPageLayout";
  } else {
    func.displayName = `PlasmicStudentPageLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicStudentPageLayout = Object.assign(
  // Top-level PlasmicStudentPageLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    simpleCustomGlobalProvider: makeNodeComponent("simpleCustomGlobalProvider"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    dashboardNavbar: makeNodeComponent("dashboardNavbar"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicStudentPageLayout
    internalVariantProps: PlasmicStudentPageLayout__VariantProps,
    internalArgProps: PlasmicStudentPageLayout__ArgProps
  }
);

export default PlasmicStudentPageLayout;
/* prettier-ignore-end */
