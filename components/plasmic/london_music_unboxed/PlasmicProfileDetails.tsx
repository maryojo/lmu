/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: 5z1XhkczA9YR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicProfileDetails.module.css"; // plasmic-import: 5z1XhkczA9YR/css

import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: easvo7-dDiYB/icon

createPlasmicElementProxy;

export type PlasmicProfileDetails__VariantMembers = {};
export type PlasmicProfileDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileDetails__VariantsArgs;
export const PlasmicProfileDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileDetails__ArgsType = { getAllAvatars?: any };
type ArgPropType = keyof PlasmicProfileDetails__ArgsType;
export const PlasmicProfileDetails__ArgProps = new Array<ArgPropType>(
  "getAllAvatars"
);

export type PlasmicProfileDetails__OverridesType = {
  root?: Flex__<"div">;
  h4?: Flex__<"h4">;
  tabs?: Flex__<typeof AntdTabs>;
  avatar?: Flex__<typeof AntdAvatar>;
  p?: Flex__<"p">;
  form?: Flex__<typeof FormWrapper>;
  form3?: Flex__<typeof FormWrapper>;
  modal?: Flex__<typeof AntdModal>;
  img?: Flex__<typeof PlasmicImg__>;
  svg?: Flex__<"svg">;
  h5?: Flex__<"h5">;
};

export interface DefaultProfileDetailsProps {
  getAllAvatars?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileDetails__RenderFunc(props: {
  variants: PlasmicProfileDetails__VariantsArgs;
  args: PlasmicProfileDetails__ArgsType;
  overrides: PlasmicProfileDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(
          projectcss.all,
          projectcss.h4,
          projectcss.__wab_text,
          sty.h4
        )}
      >
        {"Profile"}
      </h4>
      <AntdTabs
        data-plasmic-name={"tabs"}
        data-plasmic-override={overrides.tabs}
        activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
        animateTabBar={true}
        animateTabContent={false}
        animated={true}
        className={classNames("__wab_instance", sty.tabs)}
        items={
          <React.Fragment>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__n5Ni)}
              key={"1"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tWfY2
                  )}
                >
                  {"Basic Information"}
                </div>
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__tZv3B)}>
                <div className={classNames(projectcss.all, sty.freeBox___63Hc)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h9YZf)}
                  >
                    <AntdAvatar
                      data-plasmic-name={"avatar"}
                      data-plasmic-override={overrides.avatar}
                      className={classNames("__wab_instance", sty.avatar)}
                      letters={``}
                      src={(() => {
                        try {
                          return $ctx?.globalUserData?.avatar_url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <p
                      data-plasmic-name={"p"}
                      data-plasmic-override={overrides.p}
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateModalOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["modal", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalOpen"] != null &&
                          typeof $steps["updateModalOpen"] === "object" &&
                          typeof $steps["updateModalOpen"].then === "function"
                        ) {
                          $steps["updateModalOpen"] = await $steps[
                            "updateModalOpen"
                          ];
                        }
                      }}
                    >
                      {"Change Avatar"}
                    </p>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qzKz1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bUoYc
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fQwFi)}
                  >
                    {(() => {
                      const child$Props = {
                        children: null,
                        className: classNames("__wab_instance", sty.form),
                        data: {
                          sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                          opId: "d5a90a29-f456-4510-a6f0-bc24def141a9",
                          userArgs: {
                            filters: [$ctx.SupabaseUser?.user?.id]
                          },
                          cacheKey: `plasmic.$.${(() => {
                            try {
                              return "getOne";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}.$.d5a90a29-f456-4510-a6f0-bc24def141a9.$.`,
                          invalidatedKeys: null,
                          roleId: null
                        },
                        dataFormItems: (() => {
                          const __composite = [
                            {
                              key: "first_name",
                              inputType: "Text",
                              fieldId: "first_name",
                              label: null,
                              name: "first_name",
                              initialValue: "Mary"
                            },
                            {
                              key: "last_name",
                              inputType: "Text",
                              fieldId: "last_name",
                              label: null,
                              name: "last_name",
                              initialValue: "Ojo"
                            },
                            {
                              key: "instrument_category",
                              inputType: "Text",
                              fieldId: "instrument_category",
                              label: null,
                              name: "instrument_category",
                              initialValue: "PIANO",
                              hidden: null
                            },
                            {
                              key: "level",
                              inputType: "Text",
                              fieldId: "level",
                              label: null,
                              name: "level",
                              initialValue: "INTERMEDIATE",
                              hidden: null,
                              rules: null
                            },
                            {
                              key: "attempted_quiz",
                              inputType: "Checkbox",
                              fieldId: "attempted_quiz",
                              label: "attempted_quiz",
                              name: "attempted_quiz",
                              initialValue: true,
                              hidden: null
                            },
                            {
                              key: "last_quiz_completed",
                              inputType: "Text",
                              fieldId: "last_quiz_completed",
                              label: "last_quiz_completed",
                              name: "last_quiz_completed",
                              initialValue:
                                "9905babe-2246-4077-8ccf-f863c78da4b1",
                              hidden: null
                            },
                            {
                              key: "last_quiz_started",
                              inputType: "Text",
                              fieldId: "last_quiz_started",
                              label: "last_quiz_started",
                              name: "last_quiz_started",
                              initialValue:
                                "53709f5b-94b5-4d8b-9c21-4cd61633dd28",
                              hidden: null
                            },
                            {
                              key: "id",
                              inputType: "Text",
                              fieldId: "id",
                              label: "id",
                              name: "id",
                              initialValue:
                                "9e2afd0b-c7e9-4226-8163-8fbe3d54d36c",
                              hidden: null
                            },
                            {
                              key: "onboarding_quiz_score",
                              inputType: "Number",
                              fieldId: "onboarding_quiz_score",
                              label: "onboarding_quiz_score",
                              name: "onboarding_quiz_score",
                              initialValue: null,
                              hidden: null
                            },
                            {
                              key: "last_quiz_status",
                              inputType: "Text",
                              fieldId: "last_quiz_status",
                              label: "last_quiz_status",
                              name: "last_quiz_status",
                              initialValue: "FAIL",
                              hidden: null
                            },
                            {
                              key: "avatar_url",
                              inputType: "Text",
                              fieldId: "avatar_url",
                              label: "avatar_url",
                              name: "avatar_url",
                              initialValue:
                                "https://ynzviuvpmwkthdnounbc.supabase.co/storage/v1/object/public/avatar/avatars/Avatars-01.png",
                              hidden: null
                            },
                            {
                              key: "user_role",
                              inputType: "Text",
                              fieldId: "user_role",
                              label: "user_role",
                              name: "user_role",
                              initialValue: "student",
                              hidden: null
                            },
                            {
                              key: "is_onboarded",
                              inputType: "Checkbox",
                              fieldId: "is_onboarded",
                              label: "is_onboarded",
                              name: "is_onboarded",
                              initialValue: false,
                              hidden: null
                            }
                          ];
                          __composite["0"]["label"] = "First Name";
                          __composite["1"]["label"] = "Last Name";
                          __composite["2"]["label"] = "Instrument Category";
                          __composite["2"]["hidden"] =
                            $ctx.globalUserData?.user_role !== "student";
                          __composite["3"]["label"] = "Current Training Level";
                          __composite["3"]["hidden"] =
                            $ctx.globalUserData?.user_role !== "student";
                          __composite["3"]["rules"] = [
                            { ruleType: "advanced" }
                          ];

                          __composite["4"]["hidden"] = true;
                          __composite["5"]["hidden"] = true;
                          __composite["6"]["hidden"] = true;
                          __composite["7"]["hidden"] = true;
                          __composite["8"]["initialValue"] = 30;
                          __composite["8"]["hidden"] = true;
                          __composite["9"]["hidden"] = true;
                          __composite["10"]["hidden"] = true;
                          __composite["11"]["hidden"] = true;
                          __composite["12"]["hidden"] = true;
                          return __composite;
                        })(),

                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "simplified",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                    opId: "a6aa2e8b-e334-415f-8173-fa52e46316cb",
                                    userArgs: {
                                      conditions: [$ctx.SupabaseUser?.user?.id],

                                      variables: [$state.form.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        requiredMark: false,
                        submitSlot: (
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__b7Ug
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Gz0N
                              )}
                            >
                              {"Save"}
                            </div>
                          </AntdButton>
                        ),
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              </div>
            </AntdTabItem>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__qcu3M)}
              key={"2"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tthiu
                  )}
                >
                  {"Security Information"}
                </div>
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__tZZh3)}>
                <div className={classNames(projectcss.all, sty.freeBox__ji8O)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__whzzy)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form3),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form3", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: (() => {
                          const __composite = [
                            { label: null, name: null, inputType: null }
                          ];
                          __composite["0"]["label"] = "New Password";
                          __composite["0"]["name"] = "newPassword";
                          __composite["0"]["inputType"] = "Password";
                          return __composite;
                        })(),

                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "simplified",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = { args: [] };
                                return $globalActions[
                                  "SupabaseUserGlobalContext.updateUserPassword"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form3", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form3"] = ref;
                        },
                        submitSlot: (
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__ckSa
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xfB1P
                              )}
                            >
                              {"Submit"}
                            </div>
                          </AntdButton>
                        ),
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form3.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form3.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form3"}
                          data-plasmic-override={overrides.form3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              </div>
            </AntdTabItem>
          </React.Fragment>
        }
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
            null,
            eventArgs
          );
        }}
        sticky={false}
        tabBarBackground={"#FFF"}
        tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
        tabsScopeClassName={sty["tabs__tabs"]}
      />

      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          styleTokensClassNames_antd_5_hostless,
          styleTokensClassNames_plasmic_rich_components
        )}
        hideFooter={true}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <h5
            data-plasmic-name={"h5"}
            data-plasmic-override={overrides.h5}
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5
            )}
          >
            {"Pick your avatar"}
          </h5>
        }
        trigger={null}
      >
        <div className={classNames(projectcss.all, sty.freeBox__bzX7P)}>
          <div className={classNames(projectcss.all, sty.freeBox__cf4PW)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.getAllAvatars.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__xIxFp)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                              opId: "0e8543a9-50d9-4012-bd40-135f4a3ab95d",
                              userArgs: {
                                keys: [$ctx.SupabaseUser?.user?.id],

                                variables: [
                                  $props.getAllAvatars?.data[currentIndex]?.url
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: [
                                "a9ac0b28-c76e-4841-a754-c839946bba5b",
                                "a9ac0b28-c76e-4841-a754-c839946bba5b",
                                "1b0caaf1-903e-4b59-a91a-219c7a831364",
                                "1b0caaf1-903e-4b59-a91a-219c7a831364"
                              ],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateById"] != null &&
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $props.getAllAvatars.data[currentIndex].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/london_music_unboxed/images/image5.png",
                            fullWidth: 2250,
                            fullHeight: 2250,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />

                  {(() => {
                    try {
                      return (
                        $props.getAllAvatars?.data[currentIndex]?.url ===
                        $ctx.globalUserData?.avatar_url
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon23Icon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  ) : null}
                </div>
              );
            })}
          </div>
        </div>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h4",
    "tabs",
    "avatar",
    "p",
    "form",
    "form3",
    "modal",
    "img",
    "svg",
    "h5"
  ],
  h4: ["h4"],
  tabs: ["tabs", "avatar", "p", "form", "form3"],
  avatar: ["avatar"],
  p: ["p"],
  form: ["form"],
  form3: ["form3"],
  modal: ["modal", "img", "svg", "h5"],
  img: ["img"],
  svg: ["svg"],
  h5: ["h5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  tabs: typeof AntdTabs;
  avatar: typeof AntdAvatar;
  p: "p";
  form: typeof FormWrapper;
  form3: typeof FormWrapper;
  modal: typeof AntdModal;
  img: typeof PlasmicImg__;
  svg: "svg";
  h5: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileDetails__VariantsArgs;
    args?: PlasmicProfileDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileDetails__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileDetails__ArgProps,
          internalVariantPropNames: PlasmicProfileDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileDetails";
  } else {
    func.displayName = `PlasmicProfileDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileDetails = Object.assign(
  // Top-level PlasmicProfileDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    tabs: makeNodeComponent("tabs"),
    avatar: makeNodeComponent("avatar"),
    p: makeNodeComponent("p"),
    form: makeNodeComponent("form"),
    form3: makeNodeComponent("form3"),
    modal: makeNodeComponent("modal"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    h5: makeNodeComponent("h5"),

    // Metadata about props expected for PlasmicProfileDetails
    internalVariantProps: PlasmicProfileDetails__VariantProps,
    internalArgProps: PlasmicProfileDetails__ArgProps
  }
);

export default PlasmicProfileDetails;
/* prettier-ignore-end */
