/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: 9MikdHZuc8pc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AdminPageLayout from "../../AdminPageLayout"; // plasmic-import: NXXR6Sd3NRz9/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import Unauthorized from "../../Unauthorized"; // plasmic-import: ZnrbZI7AiPSe/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicAllCourses.module.css"; // plasmic-import: 9MikdHZuc8pc/css

createPlasmicElementProxy;

export type PlasmicAllCourses__VariantMembers = {};
export type PlasmicAllCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicAllCourses__VariantsArgs;
export const PlasmicAllCourses__VariantProps = new Array<VariantPropType>();

export type PlasmicAllCourses__ArgsType = {};
type ArgPropType = keyof PlasmicAllCourses__ArgsType;
export const PlasmicAllCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicAllCourses__OverridesType = {
  root?: Flex__<typeof AdminPageLayout>;
  h5?: Flex__<"h5">;
  table?: Flex__<typeof RichTable>;
  section?: Flex__<"section">;
  unauthorized?: Flex__<typeof Unauthorized>;
};

export interface DefaultAllCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAllCourses__RenderFunc(props: {
  variants: PlasmicAllCourses__VariantsArgs;
  args: PlasmicAllCourses__ArgsType;
  overrides: PlasmicAllCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <AdminPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox___1Dyt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__o7FYu)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `All Courses (${$ctx.globalCoursesData?.data?.length})`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "My Courses";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h5>
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.table),
                        data: (() => {
                          try {
                            return $ctx.globalCoursesData?.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        fields: (() => {
                          const __composite = [
                            { key: "id", fieldId: "id", isHidden: null },
                            {
                              key: "title",
                              fieldId: "title",
                              title: null,
                              disableSorting: null
                            },
                            {
                              key: "training_level",
                              fieldId: "training_level",
                              title: null
                            },
                            {
                              key: "instrument_category",
                              fieldId: "instrument_category",
                              title: null
                            },
                            {
                              key: "description",
                              fieldId: "description",
                              isHidden: null
                            },
                            {
                              key: "status",
                              fieldId: "status",
                              isHidden: null,
                              title: null
                            },
                            {
                              key: "cover_image",
                              fieldId: "cover_image",
                              isHidden: null
                            },
                            {
                              key: "instructor_name",
                              fieldId: "instructor_name",
                              title: null
                            },
                            {
                              key: "created_by",
                              fieldId: "created_by",
                              isHidden: null
                            },
                            {
                              key: "created_at",
                              fieldId: "created_at",
                              isHidden: null
                            }
                          ];
                          __composite["0"]["isHidden"] = true;
                          __composite["1"]["title"] = "Course Title";
                          __composite["1"]["disableSorting"] = true;
                          __composite["2"]["title"] = "Training Level";
                          __composite["3"]["title"] = "Instrument Category";
                          __composite["4"]["isHidden"] = true;
                          __composite["5"]["isHidden"] = false;
                          __composite["5"]["title"] = "Course Status";
                          __composite["6"]["isHidden"] = true;
                          __composite["7"]["title"] = "Instructor Name";
                          __composite["8"]["isHidden"] = true;
                          __composite["9"]["isHidden"] = true;
                          return __composite;
                        })(),

                        hideColumnPicker: true,
                        hideExports: true,
                        hideSearch: true,
                        onRowSelectionChanged: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKey",
                            ["table", "selectedRowKey"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRow",
                            ["table", "selectedRow"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRows",
                            ["table", "selectedRows"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKeys",
                            ["table", "selectedRowKeys"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                        },
                        pageSize: 12,
                        scopeClassName: sty["table__instance"],
                        selectedRowKey: generateStateValueProp($state, [
                          "table",
                          "selectedRowKey"
                        ]),
                        selectedRowKeys: generateStateValueProp($state, [
                          "table",
                          "selectedRowKeys"
                        ]),
                        themeResetClassName: classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          styleTokensClassNames
                        )
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "selectedRowKey",
                            plasmicStateName: "table.selectedRowKey"
                          },
                          {
                            name: "selectedRow",
                            plasmicStateName: "table.selectedRow"
                          },
                          {
                            name: "selectedRows",
                            plasmicStateName: "table.selectedRows"
                          },
                          {
                            name: "selectedRowKeys",
                            plasmicStateName: "table.selectedRowKeys"
                          }
                        ],
                        [],
                        RichTable_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <RichTable
                          data-plasmic-name={"table"}
                          data-plasmic-override={overrides.table}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
                {(() => {
                  try {
                    return (
                      $ctx.SupabaseUser.user &&
                      $ctx.SupabaseUser.user.user_metadata.userRole !== "admin"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Unauthorized
                      data-plasmic-name={"unauthorized"}
                      data-plasmic-override={overrides.unauthorized}
                      className={classNames("__wab_instance", sty.unauthorized)}
                    />
                  </section>
                ) : null}
              </React.Fragment>
            )}
          </DataCtxReader__>
        </AdminPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h5", "table", "section", "unauthorized"],
  h5: ["h5"],
  table: ["table"],
  section: ["section", "unauthorized"],
  unauthorized: ["unauthorized"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof AdminPageLayout;
  h5: "h5";
  table: typeof RichTable;
  section: "section";
  unauthorized: typeof Unauthorized;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAllCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAllCourses__VariantsArgs;
    args?: PlasmicAllCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAllCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAllCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAllCourses__ArgProps,
          internalVariantPropNames: PlasmicAllCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAllCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAllCourses";
  } else {
    func.displayName = `PlasmicAllCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicAllCourses = Object.assign(
  // Top-level PlasmicAllCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h5: makeNodeComponent("h5"),
    table: makeNodeComponent("table"),
    section: makeNodeComponent("section"),
    unauthorized: makeNodeComponent("unauthorized"),

    // Metadata about props expected for PlasmicAllCourses
    internalVariantProps: PlasmicAllCourses__VariantProps,
    internalArgProps: PlasmicAllCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAllCourses;
/* prettier-ignore-end */
