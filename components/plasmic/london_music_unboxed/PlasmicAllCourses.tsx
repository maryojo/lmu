/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: 9MikdHZuc8pc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AdminPageLayout from "../../AdminPageLayout"; // plasmic-import: NXXR6Sd3NRz9/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import Unauthorized from "../../Unauthorized"; // plasmic-import: ZnrbZI7AiPSe/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicAllCourses.module.css"; // plasmic-import: 9MikdHZuc8pc/css

createPlasmicElementProxy;

export type PlasmicAllCourses__VariantMembers = {};
export type PlasmicAllCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicAllCourses__VariantsArgs;
export const PlasmicAllCourses__VariantProps = new Array<VariantPropType>();

export type PlasmicAllCourses__ArgsType = {};
type ArgPropType = keyof PlasmicAllCourses__ArgsType;
export const PlasmicAllCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicAllCourses__OverridesType = {
  root?: Flex__<typeof AdminPageLayout>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  h1?: Flex__<"h1">;
  table?: Flex__<typeof RichTable>;
  section?: Flex__<"section">;
  unauthorized?: Flex__<typeof Unauthorized>;
};

export interface DefaultAllCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAllCourses__RenderFunc(props: {
  variants: PlasmicAllCourses__VariantsArgs;
  args: PlasmicAllCourses__ArgsType;
  overrides: PlasmicAllCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <AdminPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <React.Fragment>
                <div className={classNames(projectcss.all, sty.freeBox___1Dyt)}>
                  <AntdModal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      styleTokensClassNames
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["modal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, ["modal", "open"])}
                    title={"Modal title"}
                    trigger={
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__jjKpG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lk7A
                          )}
                        >
                          {"Show modal"}
                        </div>
                      </AntdButton>
                    }
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form),
                        data: {
                          sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                          opId: "f7d839c1-d12f-450a-94d2-e76b0d61edcc",
                          userArgs: {},
                          cacheKey: `plasmic.$.${(() => {
                            try {
                              return "getSchema";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}.$.f7d839c1-d12f-450a-94d2-e76b0d61edcc.$.`,
                          invalidatedKeys: null,
                          roleId: null
                        },
                        dataFormItems: (() => {
                          const __composite = [
                            {
                              key: "id",
                              inputType: "Text",
                              fieldId: "id",
                              label: "id",
                              name: "id",
                              hidden: null
                            },
                            {
                              key: "created_at",
                              inputType: "Text",
                              fieldId: "created_at",
                              label: "created_at",
                              name: "created_at",
                              hidden: null
                            },
                            {
                              key: "created_by",
                              inputType: "Text",
                              fieldId: "created_by",
                              label: "created_by",
                              name: "created_by",
                              initialValue: null,
                              hidden: null
                            },
                            {
                              key: "training_level",
                              inputType: "Text",
                              fieldId: "training_level",
                              label: "training_level",
                              name: "training_level"
                            },
                            {
                              key: "instrument_category",
                              inputType: "Text",
                              fieldId: "instrument_category",
                              label: "instrument_category",
                              name: "instrument_category"
                            },
                            {
                              key: "title",
                              inputType: "Text",
                              fieldId: "title",
                              label: "title",
                              name: "title"
                            },
                            {
                              key: "description",
                              inputType: "Text",
                              fieldId: "description",
                              label: "description",
                              name: "description"
                            },
                            {
                              key: "status",
                              inputType: "Text",
                              fieldId: "status",
                              label: "status",
                              name: "status",
                              initialValue: null,
                              hidden: null
                            },
                            {
                              key: "cover_image",
                              inputType: "Text",
                              fieldId: "cover_image",
                              label: "cover_image",
                              name: "cover_image",
                              hidden: null
                            }
                          ];
                          __composite["0"]["hidden"] = true;
                          __composite["1"]["hidden"] = true;
                          __composite["2"]["initialValue"] =
                            $ctx.SupabaseUser?.user?.id;
                          __composite["2"]["hidden"] = true;
                          __composite["7"]["initialValue"] = "INACTIVE";
                          __composite["7"]["hidden"] = true;
                          __composite["8"]["hidden"] = true;
                          return __composite;
                        })(),

                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "simplified",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                    opId: "6e68e792-327d-49b7-a9b2-2ad404628b3f",
                                    userArgs: {
                                      variables: [$state.form.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        submitSlot: (
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button___8Lx7V
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ukVb
                              )}
                            >
                              {"Submit"}
                            </div>
                          </AntdButton>
                        ),
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        />
                      );
                    })()}
                  </AntdModal>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__o7FYu)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"You won't believe what happens next."}
                    </h1>
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.table),
                        data: (() => {
                          try {
                            return $ctx.globalCoursesData?.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        fields: (() => {
                          const __composite = [
                            { key: "id", fieldId: "id" },
                            {
                              key: "created_at",
                              fieldId: "created_at",
                              isHidden: null
                            },
                            {
                              key: "created_by",
                              fieldId: "created_by",
                              isHidden: null
                            },
                            {
                              key: "training_level",
                              fieldId: "training_level"
                            },
                            {
                              key: "instrument_category",
                              fieldId: "instrument_category"
                            },
                            { key: "title", fieldId: "title" },
                            {
                              key: "description",
                              fieldId: "description",
                              isHidden: null
                            },
                            {
                              key: "status",
                              fieldId: "status",
                              isHidden: null
                            },
                            {
                              key: "cover_image",
                              fieldId: "cover_image",
                              isHidden: null
                            }
                          ];
                          __composite["1"]["isHidden"] = true;
                          __composite["2"]["isHidden"] = true;
                          __composite["6"]["isHidden"] = true;
                          __composite["7"]["isHidden"] = true;
                          __composite["8"]["isHidden"] = true;
                          return __composite;
                        })(),

                        onRowSelectionChanged: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKey",
                            ["table", "selectedRowKey"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRow",
                            ["table", "selectedRow"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRows",
                            ["table", "selectedRows"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKeys",
                            ["table", "selectedRowKeys"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                        },
                        pageSize: 20,
                        scopeClassName: sty["table__instance"],
                        selectedRowKey: generateStateValueProp($state, [
                          "table",
                          "selectedRowKey"
                        ]),
                        selectedRowKeys: generateStateValueProp($state, [
                          "table",
                          "selectedRowKeys"
                        ]),
                        themeResetClassName: classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          styleTokensClassNames
                        )
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "selectedRowKey",
                            plasmicStateName: "table.selectedRowKey"
                          },
                          {
                            name: "selectedRow",
                            plasmicStateName: "table.selectedRow"
                          },
                          {
                            name: "selectedRows",
                            plasmicStateName: "table.selectedRows"
                          },
                          {
                            name: "selectedRowKeys",
                            plasmicStateName: "table.selectedRowKeys"
                          }
                        ],
                        [],
                        RichTable_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <RichTable
                          data-plasmic-name={"table"}
                          data-plasmic-override={overrides.table}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
                {(() => {
                  try {
                    return (
                      $ctx.SupabaseUser.user &&
                      $ctx.SupabaseUser.user.user_metadata.userRole !== "admin"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Unauthorized
                      data-plasmic-name={"unauthorized"}
                      data-plasmic-override={overrides.unauthorized}
                      className={classNames("__wab_instance", sty.unauthorized)}
                    />
                  </section>
                ) : null}
              </React.Fragment>
            )}
          </DataCtxReader__>
        </AdminPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "form", "h1", "table", "section", "unauthorized"],
  modal: ["modal", "form"],
  form: ["form"],
  h1: ["h1"],
  table: ["table"],
  section: ["section", "unauthorized"],
  unauthorized: ["unauthorized"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof AdminPageLayout;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  h1: "h1";
  table: typeof RichTable;
  section: "section";
  unauthorized: typeof Unauthorized;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAllCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAllCourses__VariantsArgs;
    args?: PlasmicAllCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAllCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAllCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAllCourses__ArgProps,
          internalVariantPropNames: PlasmicAllCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAllCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAllCourses";
  } else {
    func.displayName = `PlasmicAllCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicAllCourses = Object.assign(
  // Top-level PlasmicAllCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    h1: makeNodeComponent("h1"),
    table: makeNodeComponent("table"),
    section: makeNodeComponent("section"),
    unauthorized: makeNodeComponent("unauthorized"),

    // Metadata about props expected for PlasmicAllCourses
    internalVariantProps: PlasmicAllCourses__VariantProps,
    internalArgProps: PlasmicAllCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAllCourses;
/* prettier-ignore-end */
