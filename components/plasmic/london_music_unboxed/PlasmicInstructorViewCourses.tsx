/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: p-9qS4IsMfKz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import InstructorPageLayout from "../../InstructorPageLayout"; // plasmic-import: KRlgGOfWJ9fO/component
import { CustomAccordionItem } from "../../CustomAccordionItem"; // plasmic-import: Th4N3i4J4xsp/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicInstructorViewCourses.module.css"; // plasmic-import: p-9qS4IsMfKz/css

createPlasmicElementProxy;

export type PlasmicInstructorViewCourses__VariantMembers = {};
export type PlasmicInstructorViewCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstructorViewCourses__VariantsArgs;
export const PlasmicInstructorViewCourses__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInstructorViewCourses__ArgsType = {};
type ArgPropType = keyof PlasmicInstructorViewCourses__ArgsType;
export const PlasmicInstructorViewCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicInstructorViewCourses__OverridesType = {
  root?: Flex__<typeof InstructorPageLayout>;
  h4?: Flex__<"h4">;
  img?: Flex__<typeof PlasmicImg__>;
  h5?: Flex__<"h5">;
  customAccordionItem?: Flex__<typeof CustomAccordionItem>;
};

export interface DefaultInstructorViewCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstructorViewCourses__RenderFunc(props: {
  variants: PlasmicInstructorViewCourses__VariantsArgs;
  args: PlasmicInstructorViewCourses__ArgsType;
  overrides: PlasmicInstructorViewCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "formStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <InstructorPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__oS8Hg)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__unWsM)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hz0J)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__erRxr)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wtwFc
                        )}
                      >
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"Course Name"}
                        </h4>
                      </Stack__>
                    </div>
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6XW2
                      )}
                    >
                      {"Enter some description"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yWfP5
                      )}
                    >
                      {"Enter some text"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1LWct)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5
                      )}
                    >
                      {"Modules"}
                    </h5>
                    <CustomAccordionItem
                      data-plasmic-name={"customAccordionItem"}
                      data-plasmic-override={overrides.customAccordionItem}
                      className={classNames(
                        "__wab_instance",
                        sty.customAccordionItem
                      )}
                    >
                      {"Accordion content goes here"}
                    </CustomAccordionItem>
                  </div>
                </Stack__>
              </div>
            )}
          </DataCtxReader__>
        </InstructorPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "img", "h5", "customAccordionItem"],
  h4: ["h4"],
  img: ["img"],
  h5: ["h5"],
  customAccordionItem: ["customAccordionItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof InstructorPageLayout;
  h4: "h4";
  img: typeof PlasmicImg__;
  h5: "h5";
  customAccordionItem: typeof CustomAccordionItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstructorViewCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstructorViewCourses__VariantsArgs;
    args?: PlasmicInstructorViewCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstructorViewCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstructorViewCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstructorViewCourses__ArgProps,
          internalVariantPropNames: PlasmicInstructorViewCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstructorViewCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstructorViewCourses";
  } else {
    func.displayName = `PlasmicInstructorViewCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicInstructorViewCourses = Object.assign(
  // Top-level PlasmicInstructorViewCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    img: makeNodeComponent("img"),
    h5: makeNodeComponent("h5"),
    customAccordionItem: makeNodeComponent("customAccordionItem"),

    // Metadata about props expected for PlasmicInstructorViewCourses
    internalVariantProps: PlasmicInstructorViewCourses__VariantProps,
    internalArgProps: PlasmicInstructorViewCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstructorViewCourses;
/* prettier-ignore-end */
