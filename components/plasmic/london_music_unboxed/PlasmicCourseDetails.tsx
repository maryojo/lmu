/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: cQ5WwEPS_AXG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { CustomAccordionItem } from "../../CustomAccordionItem"; // plasmic-import: Th4N3i4J4xsp/codeComponent
import CourseLessonItem from "../../CourseLessonItem"; // plasmic-import: xJvF3d0NbFPY/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicCourseDetails.module.css"; // plasmic-import: cQ5WwEPS_AXG/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicCourseDetails__VariantMembers = {};
export type PlasmicCourseDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicCourseDetails__VariantsArgs;
export const PlasmicCourseDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicCourseDetails__ArgsType = {
  isEditable?: boolean;
  courseStatus?:
    | "draft"
    | "published"
    | "in-progress"
    | "completed"
    | "not-enrolled"
    | "enrolled";
  courseData?: any;
  isNewCourse?: boolean;
  activeCourseid?: string;
};
type ArgPropType = keyof PlasmicCourseDetails__ArgsType;
export const PlasmicCourseDetails__ArgProps = new Array<ArgPropType>(
  "isEditable",
  "courseStatus",
  "courseData",
  "isNewCourse",
  "activeCourseid"
);

export type PlasmicCourseDetails__OverridesType = {
  root?: Flex__<"div">;
  tabs?: Flex__<typeof AntdTabs>;
  img?: Flex__<typeof PlasmicImg__>;
  form?: Flex__<typeof FormWrapper>;
  form4?: Flex__<typeof FormWrapper>;
  existingModulesForm?: Flex__<typeof FormWrapper>;
  modal3?: Flex__<typeof AntdModal>;
  form6?: Flex__<typeof FormWrapper>;
  form2?: Flex__<typeof FormWrapper>;
  form3?: Flex__<typeof FormWrapper>;
  modal2?: Flex__<typeof AntdModal>;
  form5?: Flex__<typeof FormWrapper>;
  accordion?: Flex__<typeof AntdAccordion>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultCourseDetailsProps {
  isEditable?: boolean;
  courseStatus?:
    | "draft"
    | "published"
    | "in-progress"
    | "completed"
    | "not-enrolled"
    | "enrolled";
  courseData?: any;
  isNewCourse?: boolean;
  activeCourseid?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCourseDetails__RenderFunc(props: {
  variants: PlasmicCourseDetails__VariantsArgs;
  args: PlasmicCourseDetails__ArgsType;
  overrides: PlasmicCourseDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isEditable: false,
          isNewCourse: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "courseFormState",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "currentCourseId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.activeCourseid;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "courseModules",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "existingModulesForm[].value",
        type: "private",
        variableType: "object",

        refName: "existingModulesForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "existingModulesForm[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "existingModulesForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "courseLessons",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "newModuleId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form5.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form5",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form5.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form5",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "modal3[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "form6[].value",
        type: "private",
        variableType: "object",

        refName: "form6",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form6[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "form6",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "form4.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form4",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form4.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form4",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root
      )}
    >
      <AntdTabs
        data-plasmic-name={"tabs"}
        data-plasmic-override={overrides.tabs}
        activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
        animateTabBar={true}
        animateTabContent={false}
        animated={true}
        className={classNames("__wab_instance", sty.tabs)}
        defaultActiveKey={"1"}
        items={
          <React.Fragment>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__hSbRo)}
              disabled={false}
              key={"1"}
              label={
                <div className={classNames(projectcss.all, sty.freeBox__kVhF8)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fAx4V
                    )}
                  >
                    {"Details"}
                  </div>
                  <svg
                    className={classNames(projectcss.all, sty.svg__hfwEo)}
                    role={"img"}
                  />
                </div>
              }
            >
              {(() => {
                try {
                  return (
                    $state.currentCourseId !== undefined &&
                    $state.currentCourseId !== ""
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__a3IIg)}>
                  {(() => {
                    try {
                      return $props.isEditable === false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__r80T7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zzRt1
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vjaQa
                          )}
                        >
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__vzu7R
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props?.courseData?.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Course Name";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h4>
                        </div>
                      </div>
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jPs5
                        )}
                      >
                        {"Enter some description"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1UFvg
                        )}
                      >
                        {"Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3W54P
                        )}
                      >
                        {(() => {
                          try {
                            return $props.courseStatus === "not-enrolled";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__ldMti
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0E90E
                                )}
                              >
                                {"Start Learning"}
                              </div>
                            }
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (
                              $props.courseStatus === "enrolled" ||
                              $props.courseStatus === "in-progress"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__n5H6S
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cLcdq
                                )}
                              >
                                {"Continue Learning"}
                              </div>
                            }
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $state.currentCourseId === undefined ||
                        $state.currentCourseId === ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form),
                          data: {
                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                            opId: "f7d839c1-d12f-450a-94d2-e76b0d61edcc",
                            userArgs: {},
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getSchema";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.kyA3ZV_HIADz.$.f7d839c1-d12f-450a-94d2-e76b0d61edcc.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              {
                                key: "title",
                                inputType: "Text",
                                fieldId: "title",
                                label: null,
                                name: "title",
                                rules: null
                              },
                              {
                                key: "description",
                                inputType: null,
                                fieldId: "description",
                                label: null,
                                name: "description",
                                rules: null
                              },
                              {
                                key: "training_level",
                                inputType: "Text",
                                fieldId: "training_level",
                                label: null,
                                name: "training_level",
                                rules: null
                              },
                              {
                                key: "instrument_category",
                                inputType: null,
                                fieldId: "instrument_category",
                                label: null,
                                name: "instrument_category",
                                options: null,
                                rules: null
                              },
                              {
                                key: "cover_image",
                                inputType: "Text",
                                fieldId: "cover_image",
                                label: null,
                                name: "cover_image",
                                rules: null
                              },
                              {
                                key: "status",
                                inputType: "Text",
                                fieldId: "status",
                                label: "status",
                                name: "status",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "created_by",
                                inputType: "Text",
                                fieldId: "created_by",
                                label: "created_by",
                                name: "created_by",
                                initialValue: null,
                                hidden: null
                              },
                              {
                                key: "id",
                                inputType: "Text",
                                fieldId: "id",
                                label: "id",
                                name: "id",
                                hidden: null
                              },
                              {
                                key: "created_at",
                                inputType: "Text",
                                fieldId: "created_at",
                                label: "created_at",
                                name: "created_at",
                                hidden: null
                              }
                            ];
                            __composite["0"]["label"] = "Title";
                            __composite["0"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Course title is required"
                              }
                            ];

                            __composite["1"]["inputType"] = "Text Area";
                            __composite["1"]["label"] = "Description";
                            __composite["1"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Course description is required"
                              }
                            ];

                            __composite["2"]["label"] = "Training Level";
                            __composite["2"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Training level is required"
                              }
                            ];

                            __composite["3"]["inputType"] = "Text";
                            __composite["3"]["label"] = "Instrument Category";
                            __composite["3"]["options"] = [];
                            __composite["3"]["rules"] = [
                              {
                                ruleType: "required",
                                message: "Instrument category is required"
                              }
                            ];

                            __composite["4"]["label"] = "Link to Cover Image";
                            __composite["4"]["rules"] = [
                              {
                                ruleType: "advanced",
                                custom: (rule, value) => {
                                  return (() => {
                                    if ($state.form?.value?.cover_image) {
                                      let url = $state.form?.value?.cover_image;
                                      const urlPattern =
                                        /^(ftp|http|https):\/\/[^ "]+$/;
                                      return urlPattern.test(url);
                                    } else {
                                      return true;
                                    }
                                  })();
                                },
                                message: "Link should be a valid URL"
                              }
                            ];

                            __composite["5"]["initialValue"] = "INACTIVE";
                            __composite["5"]["hidden"] = true;
                            __composite["6"]["initialValue"] =
                              $ctx.SupabaseUser?.user?.id;
                            __composite["6"]["hidden"] = true;
                            __composite["7"]["hidden"] = true;
                            __composite["8"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "6e68e792-327d-49b7-a9b2-2ad404628b3f",
                                      userArgs: {
                                        variables: [$state.form.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }

                            $steps["updateTabsActiveKey"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["tabs", "activeKey"]
                                    },
                                    operation: 0,
                                    value: "2"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateTabsActiveKey"] != null &&
                              typeof $steps["updateTabsActiveKey"] ===
                                "object" &&
                              typeof $steps["updateTabsActiveKey"].then ===
                                "function"
                            ) {
                              $steps["updateTabsActiveKey"] = await $steps[
                                "updateTabsActiveKey"
                              ];
                            }

                            $steps["updateCurrentCourseId"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentCourseId"]
                                    },
                                    operation: 0,
                                    value: $steps.defaultSubmit?.data[0]?.id
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentCourseId"] != null &&
                              typeof $steps["updateCurrentCourseId"] ===
                                "object" &&
                              typeof $steps["updateCurrentCourseId"].then ===
                                "function"
                            ) {
                              $steps["updateCurrentCourseId"] = await $steps[
                                "updateCurrentCourseId"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form"] = ref;
                          },
                          requiredMark: "optional",
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__wBlAr
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__g4NSx
                                )}
                              >
                                {"Save"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                  {(() => {
                    try {
                      return (
                        $state.currentCourseId !== undefined &&
                        $state.currentCourseId !== ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dcxT)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form4),
                          data: {
                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                            opId: "1308f8cc-3029-4f42-99ef-1abc4647dd9d",
                            userArgs: {
                              filters: [$state.currentCourseId]
                            },
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getOne";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.1308f8cc-3029-4f42-99ef-1abc4647dd9d.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form4", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "8088fd0a-a36e-40b0-9f7e-ed6eae53e8ad",
                                      userArgs: {
                                        conditions: [$state.currentCourseId],

                                        variables: [$state.form4.value]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form4", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form4"] = ref;
                          },
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__a71Gi
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ezGtk
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form4.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form4.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form4"}
                            data-plasmic-override={overrides.form4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  ) : null}
                </div>
              ) : null}
            </AntdTabItem>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__k57QK)}
              key={"2"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mJlY
                  )}
                >
                  {"Course Outline"}
                </div>
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__cjcWm)}>
                {(() => {
                  try {
                    return $props?.isEditable;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iUwRx)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zmOpd)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.courseModules;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <CustomAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.customAccordionItem__joFla
                            )}
                            expandIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bPsld
                                )}
                                role={"img"}
                              />
                            }
                            key={currentIndex}
                            summary={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__riY2Z
                                )}
                              >
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5__ax0Xo
                                  )}
                                >
                                  {"Module 1"}
                                </h5>
                              </div>
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___5PryI
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__otDj2
                                )}
                              >
                                <h5
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5___8LMe
                                  )}
                                >
                                  {"Module Details"}
                                </h5>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.existingModulesForm
                                    ),
                                    data: {
                                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                      opId: "53184c26-205a-45ab-95aa-55f1836db7b4",
                                      userArgs: {
                                        filters: [
                                          "31a74c11-2e01-4a10-9fe6-9d8e0cb410aa"
                                        ]
                                      },
                                      cacheKey: `plasmic.$.${(() => {
                                        try {
                                          return "getOne";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}.$.GfZeGa8qzqAB.$.53184c26-205a-45ab-95aa-55f1836db7b4.$.`,
                                      invalidatedKeys: null,
                                      roleId: null
                                    },
                                    dataFormItems: (() => {
                                      const __composite = [
                                        {
                                          key: "id",
                                          inputType: "Text",
                                          fieldId: "id",
                                          label: "id",
                                          name: "id",
                                          initialValue:
                                            "31a74c11-2e01-4a10-9fe6-9d8e0cb410aa",
                                          hidden: null
                                        },
                                        {
                                          key: "created_at",
                                          inputType: "Text",
                                          fieldId: "created_at",
                                          label: "created_at",
                                          name: "created_at",
                                          initialValue:
                                            "2025-09-15T07:56:11.903Z",
                                          hidden: null
                                        },
                                        {
                                          key: "course_id",
                                          inputType: "Text",
                                          fieldId: "course_id",
                                          label: "course_id",
                                          name: "course_id",
                                          initialValue:
                                            "08443529-1dee-4b49-8812-a11d5c7b6315",
                                          hidden: null
                                        },
                                        {
                                          key: "position",
                                          inputType: "Number",
                                          fieldId: "position",
                                          label: "position",
                                          name: "position",
                                          initialValue: 1,
                                          hidden: null
                                        },
                                        {
                                          key: "title",
                                          inputType: "Text",
                                          fieldId: "title",
                                          label: "title",
                                          name: "title",
                                          initialValue: "Test Module"
                                        },
                                        {
                                          key: "description",
                                          inputType: "Text",
                                          fieldId: "description",
                                          label: "description",
                                          name: "description",
                                          initialValue: {}
                                        },
                                        {
                                          key: "status",
                                          inputType: "Text",
                                          fieldId: "status",
                                          label: "status",
                                          name: "status",
                                          initialValue: "active",
                                          hidden: null
                                        }
                                      ];
                                      __composite["0"]["hidden"] = true;
                                      __composite["1"]["hidden"] = true;
                                      __composite["2"]["hidden"] = true;
                                      __composite["3"]["hidden"] = true;
                                      __composite["6"]["hidden"] = true;
                                      return __composite;
                                    })(),

                                    extendedOnValuesChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        [
                                          "existingModulesForm",
                                          __plasmic_idx_0,
                                          "value"
                                        ],
                                        FormWrapper_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    formItems: [],
                                    labelCol: { span: 8, horizontalOnly: true },
                                    layout: "vertical",
                                    mode: "simplified",
                                    onFinish: async values => {
                                      const $steps = {};

                                      $steps["defaultSubmit"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "6C2N6jYLs31t3Z2ygT9rD6",
                                                opId: "ef04e482-06ef-4856-b00c-ab99eef3484e",
                                                userArgs: {
                                                  conditions: [
                                                    "31a74c11-2e01-4a10-9fe6-9d8e0cb410aa"
                                                  ],

                                                  variables: [
                                                    $state.form7.value
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [
                                                  "plasmic_refresh_all"
                                                ],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["defaultSubmit"] != null &&
                                        typeof $steps["defaultSubmit"] ===
                                          "object" &&
                                        typeof $steps["defaultSubmit"].then ===
                                          "function"
                                      ) {
                                        $steps["defaultSubmit"] = await $steps[
                                          "defaultSubmit"
                                        ];
                                      }
                                    },
                                    onIsSubmittingChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "isSubmitting",
                                        [
                                          "existingModulesForm",
                                          __plasmic_idx_0,
                                          "isSubmitting"
                                        ],
                                        FormWrapper_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    ref: ref => {
                                      $refs["existingModulesForm"] = ref;
                                    },
                                    submitSlot: (
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__gySN
                                        )}
                                        submitsForm={true}
                                        type={"primary"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__if5DO
                                          )}
                                        >
                                          {"Submit"}
                                        </div>
                                      </AntdButton>
                                    ),
                                    wrapperCol: {
                                      span: 16,
                                      horizontalOnly: true
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName:
                                          "existingModulesForm[].value"
                                      },
                                      {
                                        name: "isSubmitting",
                                        plasmicStateName:
                                          "existingModulesForm[].isSubmitting"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    FormWrapper_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <FormWrapper
                                      data-plasmic-name={"existingModulesForm"}
                                      data-plasmic-override={
                                        overrides.existingModulesForm
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5VqyL
                                )}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mUfy4
                                )}
                              >
                                <h4
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h4,
                                    projectcss.__wab_text,
                                    sty.h4__yncEo
                                  )}
                                >
                                  {"You won't believe what happens next."}
                                </h4>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rtpgV
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bvHiv
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.courseLessons;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const currentItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <CourseLessonItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.courseLessonItem__wHzZx
                                            )}
                                            key={currentIndex}
                                          />
                                        );
                                      }
                                    )}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xl8ZP
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.modal3
                                        ),
                                        defaultStylesClassName: classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          styleTokensClassNames,
                                          styleTokensClassNames_antd_5_hostless,
                                          styleTokensClassNames_plasmic_rich_components
                                        ),
                                        hideFooter: true,
                                        modalScopeClassName:
                                          sty["modal3__modal"],
                                        onOpenChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangeProp($state, [
                                            "modal3",
                                            __plasmic_idx_0,
                                            "open"
                                          ]).apply(null, eventArgs);
                                        },
                                        open: generateStateValueProp($state, [
                                          "modal3",
                                          __plasmic_idx_0,
                                          "open"
                                        ]),
                                        title: "Modal title",
                                        trigger: (
                                          <AntdButton
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__ujtP3
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__mW0Ep
                                              )}
                                            >
                                              {"Add a New Lesson"}
                                            </div>
                                          </AntdButton>
                                        )
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "open",
                                            plasmicStateName: "modal3[].open"
                                          }
                                        ],
                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "modal3[].open",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => undefined
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <AntdModal
                                          data-plasmic-name={"modal3"}
                                          data-plasmic-override={
                                            overrides.modal3
                                          }
                                          {...child$Props}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__ccAgH
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__jfAwj
                                              )}
                                            >
                                              {"Modal content"}
                                            </div>
                                            {(() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.form6
                                                ),
                                                data: {
                                                  sourceId:
                                                    "6C2N6jYLs31t3Z2ygT9rD6",
                                                  opId: "7b1f646f-5d08-4334-ba54-5a85ca24030a",
                                                  userArgs: {},
                                                  cacheKey: `plasmic.$.${(() => {
                                                    try {
                                                      return "getSchema";
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}.$.cUQe17vlyy7O.$.7b1f646f-5d08-4334-ba54-5a85ca24030a.$.`,
                                                  invalidatedKeys: null,
                                                  roleId: null
                                                },
                                                extendedOnValuesChange: async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangePropForCodeComponents(
                                                    $state,
                                                    "value",
                                                    [
                                                      "form6",
                                                      __plasmic_idx_0,
                                                      "value"
                                                    ],
                                                    FormWrapper_Helpers
                                                  ).apply(null, eventArgs);
                                                },
                                                formItems: [],
                                                labelCol: {
                                                  span: 8,
                                                  horizontalOnly: true
                                                },
                                                layout: "vertical",
                                                mode: "simplified",
                                                onFinish: async values => {
                                                  const $steps = {};

                                                  $steps["defaultSubmit"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          dataOp: {
                                                            sourceId:
                                                              "6C2N6jYLs31t3Z2ygT9rD6",
                                                            opId: "81a36d92-0e6d-4040-b600-480713ff98f5",
                                                            userArgs: {
                                                              variables: [
                                                                $state.form5
                                                                  .value
                                                              ]
                                                            },
                                                            cacheKey: null,
                                                            invalidatedKeys: [
                                                              "plasmic_refresh_all"
                                                            ],
                                                            roleId: null
                                                          }
                                                        };
                                                        return (async ({
                                                          dataOp,
                                                          continueOnError
                                                        }) => {
                                                          try {
                                                            const response =
                                                              await executePlasmicDataOp(
                                                                dataOp,
                                                                {
                                                                  userAuthToken:
                                                                    dataSourcesCtx?.userAuthToken,
                                                                  user: dataSourcesCtx?.user
                                                                }
                                                              );
                                                            await plasmicInvalidate(
                                                              dataOp.invalidatedKeys
                                                            );
                                                            return response;
                                                          } catch (e) {
                                                            if (
                                                              !continueOnError
                                                            ) {
                                                              throw e;
                                                            }
                                                            return e;
                                                          }
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["defaultSubmit"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "defaultSubmit"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "defaultSubmit"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["defaultSubmit"] =
                                                      await $steps[
                                                        "defaultSubmit"
                                                      ];
                                                  }
                                                },
                                                onIsSubmittingChange: async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangePropForCodeComponents(
                                                    $state,
                                                    "isSubmitting",
                                                    [
                                                      "form6",
                                                      __plasmic_idx_0,
                                                      "isSubmitting"
                                                    ],
                                                    FormWrapper_Helpers
                                                  ).apply(null, eventArgs);
                                                },
                                                ref: ref => {
                                                  $refs["form6"] = ref;
                                                },
                                                submitSlot: (
                                                  <AntdButton
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.button___1CNcg
                                                    )}
                                                    submitsForm={true}
                                                    type={"primary"}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__kxvke
                                                      )}
                                                    >
                                                      {"Submit"}
                                                    </div>
                                                  </AntdButton>
                                                ),
                                                wrapperCol: {
                                                  span: 16,
                                                  horizontalOnly: true
                                                }
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "value",
                                                    plasmicStateName:
                                                      "form6[].value"
                                                  },
                                                  {
                                                    name: "isSubmitting",
                                                    plasmicStateName:
                                                      "form6[].isSubmitting"
                                                  }
                                                ],
                                                [__plasmic_idx_0],
                                                FormWrapper_Helpers ?? {},
                                                child$Props
                                              );

                                              return (
                                                <FormWrapper
                                                  data-plasmic-name={"form6"}
                                                  data-plasmic-override={
                                                    overrides.form6
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()}
                                          </div>
                                        </AntdModal>
                                      );
                                    })()}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </CustomAccordionItem>
                        );
                      })}
                      <CustomAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.customAccordionItem__iKg8H
                        )}
                        expandIcon={
                          <ChevronDownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lnDPv
                            )}
                            role={"img"}
                          />
                        }
                        summary={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rmBrd
                            )}
                          >
                            <h5
                              className={classNames(
                                projectcss.all,
                                projectcss.h5,
                                projectcss.__wab_text,
                                sty.h5___16CEl
                              )}
                            >
                              {"Add a New Module"}
                            </h5>
                          </div>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__phAna
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bqDp9
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wezdO
                              )}
                            >
                              <h5
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h5,
                                  projectcss.__wab_text,
                                  sty.h5__c1I5
                                )}
                              >
                                {"Module Details"}
                              </h5>
                              {(() => {
                                try {
                                  return (
                                    $state.newModuleId === undefined ||
                                    $state.newModuleId === ""
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                                ? (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.form2
                                      ),
                                      data: {
                                        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                        opId: "768eb389-cca8-4009-a49e-fdba05bcc295",
                                        userArgs: {},
                                        cacheKey: `plasmic.$.${(() => {
                                          try {
                                            return "getSchema";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}.$.vYC9zS1FYLSJ.$.768eb389-cca8-4009-a49e-fdba05bcc295.$.`,
                                        invalidatedKeys: null,
                                        roleId: null
                                      },
                                      dataFormItems: (() => {
                                        const __composite = [
                                          {
                                            key: "title",
                                            inputType: "Text",
                                            fieldId: "title",
                                            label: "title",
                                            name: "title",
                                            noLabel: null
                                          },
                                          {
                                            key: "description",
                                            inputType: "Text",
                                            fieldId: "description",
                                            label: "description",
                                            name: "description",
                                            hidden: null
                                          },
                                          {
                                            key: "id",
                                            inputType: "Text",
                                            fieldId: "id",
                                            label: "id",
                                            name: "id",
                                            hidden: null
                                          },
                                          {
                                            key: "position",
                                            inputType: "Number",
                                            fieldId: "position",
                                            label: "position",
                                            name: "position",
                                            initialValue: null,
                                            hidden: null
                                          },
                                          {
                                            key: "created_at",
                                            inputType: "Text",
                                            fieldId: "created_at",
                                            label: "created_at",
                                            name: "created_at",
                                            hidden: null
                                          },
                                          {
                                            key: "course_id",
                                            inputType: "Text",
                                            fieldId: "course_id",
                                            label: "course_id",
                                            name: "course_id",
                                            initialValue: null,
                                            hidden: null
                                          },
                                          {
                                            key: "status",
                                            inputType: "Text",
                                            fieldId: "status",
                                            label: "status",
                                            name: "status",
                                            hidden: null
                                          }
                                        ];
                                        __composite["0"]["noLabel"] = false;
                                        __composite["1"]["hidden"] = false;
                                        __composite["2"]["hidden"] = true;
                                        __composite["3"]["initialValue"] =
                                          $state.courseModules?.length + 1;
                                        __composite["3"]["hidden"] = true;
                                        __composite["4"]["hidden"] = true;
                                        __composite["5"]["initialValue"] =
                                          $state.currentCourseId;
                                        __composite["5"]["hidden"] = true;
                                        __composite["6"]["hidden"] = true;
                                        return __composite;
                                      })(),

                                      extendedOnValuesChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["form2", "value"],
                                          FormWrapper_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      formItems: [],
                                      labelCol: {
                                        span: 8,
                                        horizontalOnly: true
                                      },
                                      layout: "vertical",
                                      mode: "simplified",
                                      onFinish: async values => {
                                        const $steps = {};

                                        $steps["defaultSubmit"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "6C2N6jYLs31t3Z2ygT9rD6",
                                                  opId: "589ae5f9-4a9d-45fe-9bd2-f1e680d5886d",
                                                  userArgs: {
                                                    variables: [
                                                      $state.form2.value
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["defaultSubmit"] != null &&
                                          typeof $steps["defaultSubmit"] ===
                                            "object" &&
                                          typeof $steps["defaultSubmit"]
                                            .then === "function"
                                        ) {
                                          $steps["defaultSubmit"] =
                                            await $steps["defaultSubmit"];
                                        }

                                        $steps["updateNewModuleId"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["newModuleId"]
                                                },
                                                operation: 0,
                                                value:
                                                  $steps.defaultSubmit?.data[0]
                                                    ?.id
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateNewModuleId"] != null &&
                                          typeof $steps["updateNewModuleId"] ===
                                            "object" &&
                                          typeof $steps["updateNewModuleId"]
                                            .then === "function"
                                        ) {
                                          $steps["updateNewModuleId"] =
                                            await $steps["updateNewModuleId"];
                                        }
                                      },
                                      onIsSubmittingChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "isSubmitting",
                                          ["form2", "isSubmitting"],
                                          FormWrapper_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      ref: ref => {
                                        $refs["form2"] = ref;
                                      },
                                      submitSlot: (
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__yYb6
                                          )}
                                          submitsForm={true}
                                          type={"primary"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pxzjz
                                            )}
                                          >
                                            {"Submit"}
                                          </div>
                                        </AntdButton>
                                      ),
                                      wrapperCol: (() => {
                                        const __composite = {
                                          span: 16,
                                          horizontalOnly: null
                                        };
                                        __composite["horizontalOnly"] = true;
                                        return __composite;
                                      })()
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "form2.value"
                                        },
                                        {
                                          name: "isSubmitting",
                                          plasmicStateName: "form2.isSubmitting"
                                        }
                                      ],
                                      [],
                                      FormWrapper_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <FormWrapper
                                        data-plasmic-name={"form2"}
                                        data-plasmic-override={overrides.form2}
                                        {...child$Props}
                                      />
                                    );
                                  })()
                                : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fvkyZ
                                )}
                              >
                                {(() => {
                                  try {
                                    return (
                                      $state.newModuleId !== undefined &&
                                      $state.newModuleId !== ""
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                                  ? (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.form3
                                        ),
                                        data: {
                                          sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                          opId: "53184c26-205a-45ab-95aa-55f1836db7b4",
                                          userArgs: {
                                            filters: [
                                              (() => {
                                                return $state.newModuleId ===
                                                  "" ||
                                                  $state.newModuleId ===
                                                    undefined
                                                  ? "31a74c11-2e01-4a10-9fe6-9d8e0cb410aa"
                                                  : $state.newModuleId;
                                              })()
                                            ]
                                          },
                                          cacheKey: `plasmic.$.${(() => {
                                            try {
                                              return "getOne";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}.$.53184c26-205a-45ab-95aa-55f1836db7b4.$.`,
                                          invalidatedKeys: null,
                                          roleId: null
                                        },
                                        dataFormItems: (() => {
                                          const __composite = [
                                            {
                                              key: "id",
                                              inputType: "Text",
                                              fieldId: "id",
                                              label: "id",
                                              name: "id",
                                              initialValue:
                                                "31a74c11-2e01-4a10-9fe6-9d8e0cb410aa",
                                              hidden: null
                                            },
                                            {
                                              key: "created_at",
                                              inputType: "Text",
                                              fieldId: "created_at",
                                              label: "created_at",
                                              name: "created_at",
                                              initialValue:
                                                "2025-09-15T07:56:11.903Z",
                                              hidden: null
                                            },
                                            {
                                              key: "course_id",
                                              inputType: "Text",
                                              fieldId: "course_id",
                                              label: "course_id",
                                              name: "course_id",
                                              initialValue:
                                                "08443529-1dee-4b49-8812-a11d5c7b6315",
                                              hidden: null
                                            },
                                            {
                                              key: "position",
                                              inputType: "Number",
                                              fieldId: "position",
                                              label: "position",
                                              name: "position",
                                              initialValue: 1,
                                              hidden: null
                                            },
                                            {
                                              key: "title",
                                              inputType: "Text",
                                              fieldId: "title",
                                              label: "title",
                                              name: "title",
                                              initialValue: "Test Module"
                                            },
                                            {
                                              key: "description",
                                              inputType: "Text",
                                              fieldId: "description",
                                              label: "description",
                                              name: "description",
                                              initialValue: {}
                                            },
                                            {
                                              key: "status",
                                              inputType: "Text",
                                              fieldId: "status",
                                              label: "status",
                                              name: "status",
                                              initialValue: "active"
                                            }
                                          ];
                                          __composite["0"]["hidden"] = true;
                                          __composite["1"]["hidden"] = true;
                                          __composite["2"]["hidden"] = true;
                                          __composite["3"]["hidden"] = true;
                                          return __composite;
                                        })(),

                                        extendedOnValuesChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["form3", "value"],
                                            FormWrapper_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        formItems: [],
                                        labelCol: {
                                          span: 8,
                                          horizontalOnly: true
                                        },
                                        layout: "vertical",
                                        mode: "simplified",
                                        onFinish: async values => {
                                          const $steps = {};

                                          $steps["defaultSubmit"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "6C2N6jYLs31t3Z2ygT9rD6",
                                                    opId: "ef04e482-06ef-4856-b00c-ab99eef3484e",
                                                    userArgs: {
                                                      conditions: [
                                                        (() => {
                                                          return $state.newModuleId ===
                                                            "" ||
                                                            $state.newModuleId ===
                                                              undefined
                                                            ? "31a74c11-2e01-4a10-9fe6-9d8e0cb410aa"
                                                            : $state.newModuleId;
                                                        })()
                                                      ],

                                                      variables: [
                                                        $state.form3.value
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["defaultSubmit"] != null &&
                                            typeof $steps["defaultSubmit"] ===
                                              "object" &&
                                            typeof $steps["defaultSubmit"]
                                              .then === "function"
                                          ) {
                                            $steps["defaultSubmit"] =
                                              await $steps["defaultSubmit"];
                                          }
                                        },
                                        onIsSubmittingChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "isSubmitting",
                                            ["form3", "isSubmitting"],
                                            FormWrapper_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        ref: ref => {
                                          $refs["form3"] = ref;
                                        },
                                        submitSlot: (
                                          <AntdButton
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__u3LCy
                                            )}
                                            submitsForm={true}
                                            type={"primary"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__uXrs
                                              )}
                                            >
                                              {"Submit"}
                                            </div>
                                          </AntdButton>
                                        ),
                                        wrapperCol: {
                                          span: 16,
                                          horizontalOnly: true
                                        }
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "form3.value"
                                          },
                                          {
                                            name: "isSubmitting",
                                            plasmicStateName:
                                              "form3.isSubmitting"
                                          }
                                        ],
                                        [],
                                        FormWrapper_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <FormWrapper
                                          data-plasmic-name={"form3"}
                                          data-plasmic-override={
                                            overrides.form3
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()
                                  : null}
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__duh1Y
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sUPeH
                            )}
                          >
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__oppca
                              )}
                            >
                              {"You won't believe what happens next."}
                            </h4>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eUaEf
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hzyPw
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return [1, 2, 3];
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <CourseLessonItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.courseLessonItem__imaDc
                                      )}
                                      currentItem={currentItem}
                                      form6Value={$state.form6Value}
                                      key={currentIndex}
                                    />
                                  );
                                })}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wng72
                                )}
                              >
                                <AntdModal
                                  data-plasmic-name={"modal2"}
                                  data-plasmic-override={overrides.modal2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.modal2
                                  )}
                                  defaultStylesClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    styleTokensClassNames,
                                    styleTokensClassNames_antd_5_hostless,
                                    styleTokensClassNames_plasmic_rich_components
                                  )}
                                  hideFooter={true}
                                  modalScopeClassName={sty["modal2__modal"]}
                                  onOpenChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "modal2",
                                      "open"
                                    ]).apply(null, eventArgs);
                                  }}
                                  open={generateStateValueProp($state, [
                                    "modal2",
                                    "open"
                                  ])}
                                  title={"Modal title"}
                                  trigger={
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__lU6Ue
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__kSeBi
                                        )}
                                      >
                                        {"Add a New Lesson"}
                                      </div>
                                    </AntdButton>
                                  }
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__grJ8D
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tcCt
                                      )}
                                    >
                                      {"Modal content"}
                                    </div>
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.form5
                                        ),
                                        data: {
                                          sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                          opId: "7b1f646f-5d08-4334-ba54-5a85ca24030a",
                                          userArgs: {},
                                          cacheKey: `plasmic.$.${(() => {
                                            try {
                                              return "getSchema";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}.$.7b1f646f-5d08-4334-ba54-5a85ca24030a.$.`,
                                          invalidatedKeys: null,
                                          roleId: null
                                        },
                                        extendedOnValuesChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["form5", "value"],
                                            FormWrapper_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        formItems: [],
                                        labelCol: {
                                          span: 8,
                                          horizontalOnly: true
                                        },
                                        layout: "vertical",
                                        mode: "simplified",
                                        onFinish: async values => {
                                          const $steps = {};

                                          $steps["defaultSubmit"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "6C2N6jYLs31t3Z2ygT9rD6",
                                                    opId: "81a36d92-0e6d-4040-b600-480713ff98f5",
                                                    userArgs: {
                                                      variables: [
                                                        $state.form5.value
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["defaultSubmit"] != null &&
                                            typeof $steps["defaultSubmit"] ===
                                              "object" &&
                                            typeof $steps["defaultSubmit"]
                                              .then === "function"
                                          ) {
                                            $steps["defaultSubmit"] =
                                              await $steps["defaultSubmit"];
                                          }
                                        },
                                        onIsSubmittingChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "isSubmitting",
                                            ["form5", "isSubmitting"],
                                            FormWrapper_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        ref: ref => {
                                          $refs["form5"] = ref;
                                        },
                                        submitSlot: (
                                          <AntdButton
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__lsBnH
                                            )}
                                            submitsForm={true}
                                            type={"primary"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__xjsVb
                                              )}
                                            >
                                              {"Submit"}
                                            </div>
                                          </AntdButton>
                                        ),
                                        wrapperCol: {
                                          span: 16,
                                          horizontalOnly: true
                                        }
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "form5.value"
                                          },
                                          {
                                            name: "isSubmitting",
                                            plasmicStateName:
                                              "form5.isSubmitting"
                                          }
                                        ],
                                        [],
                                        FormWrapper_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <FormWrapper
                                          data-plasmic-name={"form5"}
                                          data-plasmic-override={
                                            overrides.form5
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                </AntdModal>
                              </div>
                            </div>
                          </div>
                        </div>
                      </CustomAccordionItem>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__efv7J
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zs7A
                          )}
                        >
                          {"Add new module"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xWraY)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__oZtjB
                        )}
                        type={"bordered"}
                      />
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return (() => {
                      return $props.isEditable === false;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__vAhyq
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3L6Ff
                                  )}
                                >
                                  {"First Item"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bSaOj
                                )}
                              >
                                {"First Children"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__ntGNw
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__blS9N
                                  )}
                                >
                                  {"Second Item"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mAmDf
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion"}
                          data-plasmic-override={overrides.accordion}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
              </div>
            </AntdTabItem>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__xcMpf)}
              key={"3"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o8SYt
                  )}
                >
                  {"Resources"}
                </div>
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dximj
                )}
              >
                {"Tab Children 3"}
              </div>
            </AntdTabItem>
          </React.Fragment>
        }
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
            null,
            eventArgs
          );
        }}
        sticky={false}
        tabBarBackground={"#FFF"}
        tabBarExtraContentRight={
          <div className={classNames(projectcss.all, sty.freeBox__eXi9Y)}>
            {(() => {
              try {
                return $props?.courseStatus === "draft";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                className={classNames("__wab_instance", sty.button__tvvGj)}
                disabled={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gP9Ji
                    )}
                  >
                    {"Publish Course"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["useIntegration"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["useIntegration"] != null &&
                    typeof $steps["useIntegration"] === "object" &&
                    typeof $steps["useIntegration"].then === "function"
                  ) {
                    $steps["useIntegration"] = await $steps["useIntegration"];
                  }
                }}
              />
            ) : null}
            {(() => {
              try {
                return $props?.courseStatus === "published";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                className={classNames("__wab_instance", sty.button__t0S4I)}
                disabled={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ydDbR
                    )}
                  >
                    {"Update Course"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["useIntegration"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["useIntegration"] != null &&
                    typeof $steps["useIntegration"] === "object" &&
                    typeof $steps["useIntegration"].then === "function"
                  ) {
                    $steps["useIntegration"] = await $steps["useIntegration"];
                  }
                }}
              />
            ) : null}
            {(() => {
              try {
                return $state.currentCourseId !== undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xzOa
                )}
              >
                {
                  "Your course has been created. Finish by adding modules and lessons"
                }
              </div>
            ) : null}
          </div>
        }
        tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
        tabsScopeClassName={sty["tabs__tabs"]}
        type={"line"}
      />

      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        deps={(() => {
          try {
            return $state.currentCourseId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onMount={async () => {
          const $steps = {};

          $steps["updateCurrentCourseId"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["currentCourseId"]
                  },
                  operation: 0,
                  value: $props.activeCourseid
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCurrentCourseId"] != null &&
            typeof $steps["updateCurrentCourseId"] === "object" &&
            typeof $steps["updateCurrentCourseId"].then === "function"
          ) {
            $steps["updateCurrentCourseId"] = await $steps[
              "updateCurrentCourseId"
            ];
          }

          $steps["getModulesByCourseId"] =
            $state.currentCourseId !== undefined
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                      opId: "b01269c8-4332-4ad4-8281-c737d55ea9d7",
                      userArgs: {
                        filters: [$state.currentCourseId]
                      },
                      cacheKey: null,
                      invalidatedKeys: null,
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["getModulesByCourseId"] != null &&
            typeof $steps["getModulesByCourseId"] === "object" &&
            typeof $steps["getModulesByCourseId"].then === "function"
          ) {
            $steps["getModulesByCourseId"] = await $steps[
              "getModulesByCourseId"
            ];
          }

          $steps["updateCourseModules"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["courseModules"]
                  },
                  operation: 0,
                  value: $steps.getModulesByCourseId?.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCourseModules"] != null &&
            typeof $steps["updateCourseModules"] === "object" &&
            typeof $steps["updateCourseModules"].then === "function"
          ) {
            $steps["updateCourseModules"] = await $steps["updateCourseModules"];
          }

          $steps["getLessonsByModuleId"] = true
            ? (() => {
                const actionArgs = {
                  dataOp: {
                    sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                    opId: "937dc776-9761-4771-b9d0-811fdd37bb65",
                    userArgs: {
                      filters: [
                        $state.courseModules && $state.courseModules[0]?.id
                      ]
                    },
                    cacheKey: null,
                    invalidatedKeys: null,
                    roleId: null
                  }
                };
                return (async ({ dataOp, continueOnError }) => {
                  try {
                    const response = await executePlasmicDataOp(dataOp, {
                      userAuthToken: dataSourcesCtx?.userAuthToken,
                      user: dataSourcesCtx?.user
                    });
                    await plasmicInvalidate(dataOp.invalidatedKeys);
                    return response;
                  } catch (e) {
                    if (!continueOnError) {
                      throw e;
                    }
                    return e;
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["getLessonsByModuleId"] != null &&
            typeof $steps["getLessonsByModuleId"] === "object" &&
            typeof $steps["getLessonsByModuleId"].then === "function"
          ) {
            $steps["getLessonsByModuleId"] = await $steps[
              "getLessonsByModuleId"
            ];
          }

          $steps["updateCourseLessons"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["courseLessons"]
                  },
                  operation: 0,
                  value: $steps.getLessonsByModuleId?.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCourseLessons"] != null &&
            typeof $steps["updateCourseLessons"] === "object" &&
            typeof $steps["updateCourseLessons"].then === "function"
          ) {
            $steps["updateCourseLessons"] = await $steps["updateCourseLessons"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tabs",
    "img",
    "form",
    "form4",
    "existingModulesForm",
    "modal3",
    "form6",
    "form2",
    "form3",
    "modal2",
    "form5",
    "accordion",
    "sideEffect"
  ],
  tabs: [
    "tabs",
    "img",
    "form",
    "form4",
    "existingModulesForm",
    "modal3",
    "form6",
    "form2",
    "form3",
    "modal2",
    "form5",
    "accordion"
  ],
  img: ["img"],
  form: ["form"],
  form4: ["form4"],
  existingModulesForm: ["existingModulesForm"],
  modal3: ["modal3", "form6"],
  form6: ["form6"],
  form2: ["form2"],
  form3: ["form3"],
  modal2: ["modal2", "form5"],
  form5: ["form5"],
  accordion: ["accordion"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tabs: typeof AntdTabs;
  img: typeof PlasmicImg__;
  form: typeof FormWrapper;
  form4: typeof FormWrapper;
  existingModulesForm: typeof FormWrapper;
  modal3: typeof AntdModal;
  form6: typeof FormWrapper;
  form2: typeof FormWrapper;
  form3: typeof FormWrapper;
  modal2: typeof AntdModal;
  form5: typeof FormWrapper;
  accordion: typeof AntdAccordion;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCourseDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCourseDetails__VariantsArgs;
    args?: PlasmicCourseDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCourseDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCourseDetails__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCourseDetails__ArgProps,
          internalVariantPropNames: PlasmicCourseDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCourseDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCourseDetails";
  } else {
    func.displayName = `PlasmicCourseDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicCourseDetails = Object.assign(
  // Top-level PlasmicCourseDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabs: makeNodeComponent("tabs"),
    img: makeNodeComponent("img"),
    form: makeNodeComponent("form"),
    form4: makeNodeComponent("form4"),
    existingModulesForm: makeNodeComponent("existingModulesForm"),
    modal3: makeNodeComponent("modal3"),
    form6: makeNodeComponent("form6"),
    form2: makeNodeComponent("form2"),
    form3: makeNodeComponent("form3"),
    modal2: makeNodeComponent("modal2"),
    form5: makeNodeComponent("form5"),
    accordion: makeNodeComponent("accordion"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicCourseDetails
    internalVariantProps: PlasmicCourseDetails__VariantProps,
    internalArgProps: PlasmicCourseDetails__ArgProps
  }
);

export default PlasmicCourseDetails;
/* prettier-ignore-end */
