/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: cQ5WwEPS_AXG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import EditCourseModuleItem from "../../EditCourseModuleItem"; // plasmic-import: OZ09O_elizqY/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicCourseDetails.module.css"; // plasmic-import: cQ5WwEPS_AXG/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicCourseDetails__VariantMembers = {};
export type PlasmicCourseDetails__VariantsArgs = {};
type VariantPropType = keyof PlasmicCourseDetails__VariantsArgs;
export const PlasmicCourseDetails__VariantProps = new Array<VariantPropType>();

export type PlasmicCourseDetails__ArgsType = {
  isEditable?: boolean;
  courseStatus?:
    | "draft"
    | "published"
    | "in-progress"
    | "completed"
    | "not-enrolled"
    | "enrolled";
  courseData?: any;
  isNewCourse?: boolean;
  activeCourseid?: string;
};
type ArgPropType = keyof PlasmicCourseDetails__ArgsType;
export const PlasmicCourseDetails__ArgProps = new Array<ArgPropType>(
  "isEditable",
  "courseStatus",
  "courseData",
  "isNewCourse",
  "activeCourseid"
);

export type PlasmicCourseDetails__OverridesType = {
  root?: Flex__<"div">;
  tabs?: Flex__<typeof AntdTabs>;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  editCourseModuleItem?: Flex__<typeof EditCourseModuleItem>;
  modal4?: Flex__<typeof AntdModal>;
  form3?: Flex__<typeof FormWrapper>;
  accordion?: Flex__<typeof AntdAccordion>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultCourseDetailsProps {
  isEditable?: boolean;
  courseStatus?:
    | "draft"
    | "published"
    | "in-progress"
    | "completed"
    | "not-enrolled"
    | "enrolled";
  courseData?: any;
  isNewCourse?: boolean;
  activeCourseid?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCourseDetails__RenderFunc(props: {
  variants: PlasmicCourseDetails__VariantsArgs;
  args: PlasmicCourseDetails__ArgsType;
  overrides: PlasmicCourseDetails__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isEditable: false,
          isNewCourse: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "courseFormState",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "currentCourseId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.activeCourseid;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "courseModules",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "courseLessons",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "newModuleId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "newModuleData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "modal4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "newModuleFormStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "editCourseModuleItem[].newCoureLessonsList",
        type: "private",
        variableType: "array"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <AntdTabs
        data-plasmic-name={"tabs"}
        data-plasmic-override={overrides.tabs}
        activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
        animateTabBar={true}
        animateTabContent={false}
        animated={true}
        className={classNames("__wab_instance", sty.tabs)}
        defaultActiveKey={"1"}
        items={
          <React.Fragment>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__hSbRo)}
              disabled={false}
              key={"1"}
              label={
                <div className={classNames(projectcss.all, sty.freeBox__kVhF8)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fAx4V
                    )}
                  >
                    {"Details"}
                  </div>
                  <svg
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
              }
            >
              {(() => {
                try {
                  return (
                    $state.currentCourseId !== undefined &&
                    $state.currentCourseId !== ""
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__a3IIg)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r80T7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zzRt1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vjaQa
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__vzu7R
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props?.courseData?.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Course Name";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h4>
                      </div>
                    </div>
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jPs5
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.courseData?.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Enter some description";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1UFvg
                      )}
                    >
                      {"Enter some text"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3W54P
                      )}
                    >
                      {(() => {
                        try {
                          return $props.courseStatus === "not-enrolled";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__ldMti
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0E90E
                              )}
                            >
                              {"Start Learning"}
                            </div>
                          }
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $props.courseStatus === "enrolled" ||
                            $props.courseStatus === "in-progress"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__n5H6S
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cLcdq
                              )}
                            >
                              {"Continue Learning"}
                            </div>
                          }
                        />
                      ) : null}
                    </div>
                    <AntdModal
                      data-plasmic-name={"modal"}
                      data-plasmic-override={overrides.modal}
                      className={classNames("__wab_instance", sty.modal)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames
                      )}
                      hideFooter={true}
                      modalScopeClassName={sty["modal__modal"]}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "modal",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, ["modal", "open"])}
                      title={"Modal title"}
                      trigger={
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__xx2Tp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dv3Xp
                            )}
                          >
                            {"Show modal"}
                          </div>
                        </AntdButton>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l60Pv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pYfVd
                          )}
                        >
                          {"Modal content"}
                        </div>
                        {(() => {
                          try {
                            return $props.courseData !== undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.form
                                ),
                                data: {
                                  sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                  opId: "cdc293da-6a6c-4e4c-91c7-b9f3a836a5c2",
                                  userArgs: {
                                    filters: [$props.courseData?.id]
                                  },
                                  cacheKey: `plasmic.$.${(() => {
                                    try {
                                      return "getOne";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}.$.cdc293da-6a6c-4e4c-91c7-b9f3a836a5c2.$.`,
                                  invalidatedKeys: null,
                                  roleId: null
                                },
                                dataFormItems: (() => {
                                  const __composite = [
                                    {
                                      key: "id",
                                      inputType: "Text",
                                      fieldId: "id",
                                      label: "id",
                                      name: "id",
                                      hidden: null
                                    },
                                    {
                                      key: "created_at",
                                      inputType: "Text",
                                      fieldId: "created_at",
                                      label: "created_at",
                                      name: "created_at",
                                      hidden: null
                                    },
                                    {
                                      key: "created_by",
                                      inputType: "Text",
                                      fieldId: "created_by",
                                      label: "created_by",
                                      name: "created_by",
                                      initialValue: null,
                                      hidden: null
                                    },
                                    {
                                      key: "training_level",
                                      inputType: "Text",
                                      fieldId: "training_level",
                                      label: "training_level",
                                      name: "training_level"
                                    },
                                    {
                                      key: "instrument_category",
                                      inputType: "Text",
                                      fieldId: "instrument_category",
                                      label: "instrument_category",
                                      name: "instrument_category"
                                    },
                                    {
                                      key: "cover_image",
                                      inputType: "Text",
                                      fieldId: "cover_image",
                                      label: "cover_image",
                                      name: "cover_image"
                                    },
                                    {
                                      key: "instructor_name",
                                      inputType: "Text",
                                      fieldId: "instructor_name",
                                      label: "instructor_name",
                                      name: "instructor_name",
                                      hidden: null
                                    },
                                    {
                                      key: "title",
                                      inputType: "Text",
                                      fieldId: "title",
                                      label: "title",
                                      name: "title"
                                    },
                                    {
                                      key: "description",
                                      inputType: "Text",
                                      fieldId: "description",
                                      label: "description",
                                      name: "description"
                                    },
                                    {
                                      key: "status",
                                      inputType: "Text",
                                      fieldId: "status",
                                      label: "status",
                                      name: "status"
                                    }
                                  ];
                                  __composite["0"]["hidden"] = true;
                                  __composite["1"]["hidden"] = true;
                                  __composite["2"]["initialValue"] =
                                    $ctx.SupabaseUser?.user?.id;
                                  __composite["2"]["hidden"] = true;
                                  __composite["6"]["hidden"] = true;
                                  return __composite;
                                })(),

                                extendedOnValuesChange: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["form", "value"],
                                    FormWrapper_Helpers
                                  ).apply(null, eventArgs);
                                },
                                formItems: [],
                                labelCol: { span: 8, horizontalOnly: true },
                                layout: "vertical",
                                mode: "simplified",
                                onFinish: async values => {
                                  const $steps = {};

                                  $steps["defaultSubmit"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                            opId: "1854bf8b-a6bf-4430-9763-1fadfe1e5d5f",
                                            userArgs: {
                                              conditions: [
                                                $props.courseData?.id
                                              ],

                                              variables: [$state.form.value]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["defaultSubmit"] != null &&
                                    typeof $steps["defaultSubmit"] ===
                                      "object" &&
                                    typeof $steps["defaultSubmit"].then ===
                                      "function"
                                  ) {
                                    $steps["defaultSubmit"] = await $steps[
                                      "defaultSubmit"
                                    ];
                                  }
                                },
                                onIsSubmittingChange: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "isSubmitting",
                                    ["form", "isSubmitting"],
                                    FormWrapper_Helpers
                                  ).apply(null, eventArgs);
                                },
                                ref: ref => {
                                  $refs["form"] = ref;
                                },
                                submitSlot: (
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__tHoL
                                    )}
                                    submitsForm={true}
                                    type={"primary"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__keR0
                                      )}
                                    >
                                      {"Submit"}
                                    </div>
                                  </AntdButton>
                                ),
                                wrapperCol: { span: 16, horizontalOnly: true }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "form.value"
                                  },
                                  {
                                    name: "isSubmitting",
                                    plasmicStateName: "form.isSubmitting"
                                  }
                                ],
                                [],
                                FormWrapper_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <FormWrapper
                                  data-plasmic-name={"form"}
                                  data-plasmic-override={overrides.form}
                                  {...child$Props}
                                />
                              );
                            })()
                          : null}
                      </div>
                    </AntdModal>
                  </div>
                </div>
              ) : null}
            </AntdTabItem>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__k57QK)}
              key={"2"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mJlY
                  )}
                >
                  {"Course Outline"}
                </div>
              }
            >
              <div className={classNames(projectcss.all, sty.freeBox__cjcWm)}>
                {(() => {
                  try {
                    return $props?.isEditable;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iUwRx)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zmOpd)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.courseModules;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__npjW
                            )}
                            key={currentIndex}
                          >
                            <EditCourseModuleItem
                              data-plasmic-name={"editCourseModuleItem"}
                              data-plasmic-override={
                                overrides.editCourseModuleItem
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.editCourseModuleItem
                              )}
                              courseData={args.courseData}
                              courseLessons={$state.courseLessons}
                              courseModules={$state.courseModules}
                              currentIndex={currentIndex}
                              newModuleId={$state.newModuleId}
                              onNewCoureLessonsListChange={async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangeProp($state, [
                                  "editCourseModuleItem",
                                  __plasmic_idx_0,
                                  "newCoureLessonsList"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            />
                          </div>
                        );
                      })}
                      <AntdModal
                        data-plasmic-name={"modal4"}
                        data-plasmic-override={overrides.modal4}
                        className={classNames("__wab_instance", sty.modal4)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          styleTokensClassNames
                        )}
                        hideFooter={true}
                        modalScopeClassName={sty["modal4__modal"]}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "modal4",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "modal4",
                          "open"
                        ])}
                        title={"Modal title"}
                        trigger={
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__wCfQ
                            )}
                            onClick={async () => {
                              const $steps = {};

                              $steps["updateNewModuleFormStep"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["newModuleFormStep"]
                                      },
                                      operation: 0,
                                      value: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateNewModuleFormStep"] != null &&
                                typeof $steps["updateNewModuleFormStep"] ===
                                  "object" &&
                                typeof $steps["updateNewModuleFormStep"]
                                  .then === "function"
                              ) {
                                $steps["updateNewModuleFormStep"] =
                                  await $steps["updateNewModuleFormStep"];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sVcwx
                              )}
                            >
                              {"Show modal"}
                            </div>
                          </AntdButton>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__txBWt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uIxzj
                            )}
                          >
                            {"Modal content"}
                          </div>
                          {(() => {
                            try {
                              return $state.newModuleFormStep === 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.form3
                                  ),
                                  data: {
                                    sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                                    opId: "768eb389-cca8-4009-a49e-fdba05bcc295",
                                    userArgs: {},
                                    cacheKey: `plasmic.$.${(() => {
                                      try {
                                        return "getSchema";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}.$.768eb389-cca8-4009-a49e-fdba05bcc295.$.`,
                                    invalidatedKeys: null,
                                    roleId: null
                                  },
                                  dataFormItems: (() => {
                                    const __composite = [
                                      {
                                        key: "id",
                                        inputType: "Text",
                                        fieldId: "id",
                                        label: "id",
                                        name: "id",
                                        hidden: null
                                      },
                                      {
                                        key: "created_at",
                                        inputType: "Text",
                                        fieldId: "created_at",
                                        label: "created_at",
                                        name: "created_at",
                                        hidden: null
                                      },
                                      {
                                        key: "course_id",
                                        inputType: "Text",
                                        fieldId: "course_id",
                                        label: "course_id",
                                        name: "course_id",
                                        initialValue: null
                                      },
                                      {
                                        key: "position",
                                        inputType: "Number",
                                        fieldId: "position",
                                        label: "position",
                                        name: "position"
                                      },
                                      {
                                        key: "title",
                                        inputType: "Text",
                                        fieldId: "title",
                                        label: "title",
                                        name: "title"
                                      },
                                      {
                                        key: "description",
                                        inputType: "Text",
                                        fieldId: "description",
                                        label: "description",
                                        name: "description"
                                      },
                                      {
                                        key: "status",
                                        inputType: "Text",
                                        fieldId: "status",
                                        label: "status",
                                        name: "status"
                                      }
                                    ];
                                    __composite["0"]["hidden"] = true;
                                    __composite["1"]["hidden"] = true;
                                    __composite["2"]["initialValue"] =
                                      $props.courseData?.id;
                                    return __composite;
                                  })(),

                                  extendedOnValuesChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["form3", "value"],
                                      FormWrapper_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  formItems: [],
                                  labelCol: { span: 8, horizontalOnly: true },
                                  layout: "vertical",
                                  mode: "simplified",
                                  onFinish: async values => {
                                    const $steps = {};

                                    $steps["defaultSubmit"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "6C2N6jYLs31t3Z2ygT9rD6",
                                              opId: "589ae5f9-4a9d-45fe-9bd2-f1e680d5886d",
                                              userArgs: {
                                                variables: [$state.form3.value]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["defaultSubmit"] != null &&
                                      typeof $steps["defaultSubmit"] ===
                                        "object" &&
                                      typeof $steps["defaultSubmit"].then ===
                                        "function"
                                    ) {
                                      $steps["defaultSubmit"] = await $steps[
                                        "defaultSubmit"
                                      ];
                                    }

                                    $steps["updateNewModuleFormStep"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "newModuleFormStep"
                                              ]
                                            },
                                            operation: 0,
                                            value: 1
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateNewModuleFormStep"] !=
                                        null &&
                                      typeof $steps[
                                        "updateNewModuleFormStep"
                                      ] === "object" &&
                                      typeof $steps["updateNewModuleFormStep"]
                                        .then === "function"
                                    ) {
                                      $steps["updateNewModuleFormStep"] =
                                        await $steps["updateNewModuleFormStep"];
                                    }
                                  },
                                  onIsSubmittingChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "isSubmitting",
                                      ["form3", "isSubmitting"],
                                      FormWrapper_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  ref: ref => {
                                    $refs["form3"] = ref;
                                  },
                                  submitSlot: (
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__v4EQ8
                                      )}
                                      submitsForm={true}
                                      type={"primary"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__iJzOr
                                        )}
                                      >
                                        {"Submit"}
                                      </div>
                                    </AntdButton>
                                  ),
                                  wrapperCol: { span: 16, horizontalOnly: true }
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "form3.value"
                                    },
                                    {
                                      name: "isSubmitting",
                                      plasmicStateName: "form3.isSubmitting"
                                    }
                                  ],
                                  [],
                                  FormWrapper_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <FormWrapper
                                    data-plasmic-name={"form3"}
                                    data-plasmic-override={overrides.form3}
                                    {...child$Props}
                                  />
                                );
                              })()
                            : null}
                          {(() => {
                            try {
                              return $state.newModuleFormStep === 1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dff9D
                              )}
                            >
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__gXsWu
                                )}
                              >
                                {"The module has been created add new lessons"}
                              </h4>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8Xy3A
                                )}
                              >
                                {"Enter some text"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gRfu1
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___4JBi4
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["getModulesByCourseId"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "6C2N6jYLs31t3Z2ygT9rD6",
                                              opId: "b01269c8-4332-4ad4-8281-c737d55ea9d7",
                                              userArgs: {
                                                filters: [$props.courseData?.id]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: null,
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["getModulesByCourseId"] != null &&
                                      typeof $steps["getModulesByCourseId"] ===
                                        "object" &&
                                      typeof $steps["getModulesByCourseId"]
                                        .then === "function"
                                    ) {
                                      $steps["getModulesByCourseId"] =
                                        await $steps["getModulesByCourseId"];
                                    }

                                    $steps["updateCourseModules"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["courseModules"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.getModulesByCourseId?.data
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCourseModules"] != null &&
                                      typeof $steps["updateCourseModules"] ===
                                        "object" &&
                                      typeof $steps["updateCourseModules"]
                                        .then === "function"
                                    ) {
                                      $steps["updateCourseModules"] =
                                        await $steps["updateCourseModules"];
                                    }

                                    $steps["updateModal4Open"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["modal4", "open"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateModal4Open"] != null &&
                                      typeof $steps["updateModal4Open"] ===
                                        "object" &&
                                      typeof $steps["updateModal4Open"].then ===
                                        "function"
                                    ) {
                                      $steps["updateModal4Open"] = await $steps[
                                        "updateModal4Open"
                                      ];
                                    }
                                  }}
                                />
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </AntdModal>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xWraY)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__oZtjB
                        )}
                        type={"bordered"}
                      />
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $props.isEditable === false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__vAhyq
                              )}
                              id={1}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3L6Ff
                                  )}
                                >
                                  {"First Item"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bSaOj
                                )}
                              >
                                {"First Children"}
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__ntGNw
                              )}
                              id={2}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__blS9N
                                  )}
                                >
                                  {"Second Item"}
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mAmDf
                                )}
                              >
                                {"Second Children"}
                              </div>
                            </AntdAccordionItem>
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion"}
                          data-plasmic-override={overrides.accordion}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
              </div>
            </AntdTabItem>
            <AntdTabItem
              className={classNames("__wab_instance", sty.tabItem__xcMpf)}
              key={"3"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o8SYt
                  )}
                >
                  {"Resources"}
                </div>
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dximj
                )}
              >
                {"Tab Children 3"}
              </div>
            </AntdTabItem>
          </React.Fragment>
        }
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["tabs", "activeKey"]).apply(
            null,
            eventArgs
          );
        }}
        sticky={false}
        tabBarBackground={"#FFF"}
        tabBarExtraContentRight={
          <div className={classNames(projectcss.all, sty.freeBox__eXi9Y)}>
            {(() => {
              try {
                return (
                  $props.courseData?.status.toLocaleLowerCase() === "active"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                className={classNames("__wab_instance", sty.button__tvvGj)}
                disabled={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gP9Ji
                    )}
                  >
                    {"Publish Course"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["useIntegration"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["useIntegration"] != null &&
                    typeof $steps["useIntegration"] === "object" &&
                    typeof $steps["useIntegration"].then === "function"
                  ) {
                    $steps["useIntegration"] = await $steps["useIntegration"];
                  }
                }}
              />
            ) : null}
            {(() => {
              try {
                return (
                  $props.courseData?.data[0].status.toLocaleLowerCase() ===
                  "inactive"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                className={classNames("__wab_instance", sty.button__t0S4I)}
                disabled={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ydDbR
                    )}
                  >
                    {"Update Course"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["useIntegration"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["useIntegration"] != null &&
                    typeof $steps["useIntegration"] === "object" &&
                    typeof $steps["useIntegration"].then === "function"
                  ) {
                    $steps["useIntegration"] = await $steps["useIntegration"];
                  }
                }}
              />
            ) : null}
          </div>
        }
        tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
        tabsScopeClassName={sty["tabs__tabs"]}
        type={"line"}
      />

      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        deps={(() => {
          try {
            return $state.currentCourseId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onMount={async () => {
          const $steps = {};

          $steps["updateCurrentCourseId"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["currentCourseId"]
                  },
                  operation: 0,
                  value: $props.activeCourseid
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCurrentCourseId"] != null &&
            typeof $steps["updateCurrentCourseId"] === "object" &&
            typeof $steps["updateCurrentCourseId"].then === "function"
          ) {
            $steps["updateCurrentCourseId"] = await $steps[
              "updateCurrentCourseId"
            ];
          }

          $steps["getModulesByCourseId"] =
            $state.currentCourseId !== undefined
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                      opId: "b01269c8-4332-4ad4-8281-c737d55ea9d7",
                      userArgs: {
                        filters: [$state.currentCourseId]
                      },
                      cacheKey: null,
                      invalidatedKeys: null,
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["getModulesByCourseId"] != null &&
            typeof $steps["getModulesByCourseId"] === "object" &&
            typeof $steps["getModulesByCourseId"].then === "function"
          ) {
            $steps["getModulesByCourseId"] = await $steps[
              "getModulesByCourseId"
            ];
          }

          $steps["updateCourseModules"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["courseModules"]
                  },
                  operation: 0,
                  value: $steps.getModulesByCourseId?.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCourseModules"] != null &&
            typeof $steps["updateCourseModules"] === "object" &&
            typeof $steps["updateCourseModules"].then === "function"
          ) {
            $steps["updateCourseModules"] = await $steps["updateCourseModules"];
          }

          $steps["getLessonsByModuleId"] = true
            ? (() => {
                const actionArgs = {
                  dataOp: {
                    sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                    opId: "937dc776-9761-4771-b9d0-811fdd37bb65",
                    userArgs: {
                      filters: [
                        $state.courseModules && $state.courseModules[0]?.id
                      ]
                    },
                    cacheKey: null,
                    invalidatedKeys: null,
                    roleId: null
                  }
                };
                return (async ({ dataOp, continueOnError }) => {
                  try {
                    const response = await executePlasmicDataOp(dataOp, {
                      userAuthToken: dataSourcesCtx?.userAuthToken,
                      user: dataSourcesCtx?.user
                    });
                    await plasmicInvalidate(dataOp.invalidatedKeys);
                    return response;
                  } catch (e) {
                    if (!continueOnError) {
                      throw e;
                    }
                    return e;
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["getLessonsByModuleId"] != null &&
            typeof $steps["getLessonsByModuleId"] === "object" &&
            typeof $steps["getLessonsByModuleId"].then === "function"
          ) {
            $steps["getLessonsByModuleId"] = await $steps[
              "getLessonsByModuleId"
            ];
          }

          $steps["updateCourseLessons"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["courseLessons"]
                  },
                  operation: 0,
                  value: $steps.getLessonsByModuleId?.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCourseLessons"] != null &&
            typeof $steps["updateCourseLessons"] === "object" &&
            typeof $steps["updateCourseLessons"].then === "function"
          ) {
            $steps["updateCourseLessons"] = await $steps["updateCourseLessons"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tabs",
    "svg",
    "img",
    "modal",
    "form",
    "editCourseModuleItem",
    "modal4",
    "form3",
    "accordion",
    "sideEffect"
  ],
  tabs: [
    "tabs",
    "svg",
    "img",
    "modal",
    "form",
    "editCourseModuleItem",
    "modal4",
    "form3",
    "accordion"
  ],
  svg: ["svg"],
  img: ["img"],
  modal: ["modal", "form"],
  form: ["form"],
  editCourseModuleItem: ["editCourseModuleItem"],
  modal4: ["modal4", "form3"],
  form3: ["form3"],
  accordion: ["accordion"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  tabs: typeof AntdTabs;
  svg: "svg";
  img: typeof PlasmicImg__;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  editCourseModuleItem: typeof EditCourseModuleItem;
  modal4: typeof AntdModal;
  form3: typeof FormWrapper;
  accordion: typeof AntdAccordion;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCourseDetails__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCourseDetails__VariantsArgs;
    args?: PlasmicCourseDetails__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCourseDetails__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCourseDetails__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCourseDetails__ArgProps,
          internalVariantPropNames: PlasmicCourseDetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCourseDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCourseDetails";
  } else {
    func.displayName = `PlasmicCourseDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicCourseDetails = Object.assign(
  // Top-level PlasmicCourseDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabs: makeNodeComponent("tabs"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    editCourseModuleItem: makeNodeComponent("editCourseModuleItem"),
    modal4: makeNodeComponent("modal4"),
    form3: makeNodeComponent("form3"),
    accordion: makeNodeComponent("accordion"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicCourseDetails
    internalVariantProps: PlasmicCourseDetails__VariantProps,
    internalArgProps: PlasmicCourseDetails__ArgProps
  }
);

export default PlasmicCourseDetails;
/* prettier-ignore-end */
