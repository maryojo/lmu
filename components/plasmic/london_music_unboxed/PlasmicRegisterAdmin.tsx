/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: 4MkgNp9BeNBY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsiz19XCyodOuv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Iz19XCyodOuv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicRegisterAdmin.module.css"; // plasmic-import: 4MkgNp9BeNBY/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicRegisterAdmin__VariantMembers = {};
export type PlasmicRegisterAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicRegisterAdmin__VariantsArgs;
export const PlasmicRegisterAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicRegisterAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicRegisterAdmin__ArgsType;
export const PlasmicRegisterAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicRegisterAdmin__OverridesType = {
  root?: Flex__<"div">;
  register?: Flex__<"div">;
  section?: Flex__<"section">;
  form?: Flex__<typeof FormWrapper>;
  columns?: Flex__<"div">;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  passwordInput?: Flex__<typeof AntdPassword>;
};

export interface DefaultRegisterAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRegisterAdmin__RenderFunc(props: {
  variants: PlasmicRegisterAdmin__VariantsArgs;
  args: PlasmicRegisterAdmin__ArgsType;
  overrides: PlasmicRegisterAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "isUserAuthorized",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsiz19XCyodOuv()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"register"}
            data-plasmic-override={overrides.register}
            className={classNames(projectcss.all, sty.register)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__m0QTq)}>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rqOmJ)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/london_music_unboxed/images/logoExportLmuArtboard2Copy4Png.png",
                    fullWidth: 3438,
                    fullHeight: 1065,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__eTe9W)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"43.66%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/london_music_unboxed/images/asset19Png.png",
                    fullWidth: 3468,
                    fullHeight: 2506,
                    aspectRatio: undefined
                  }}
                />

                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__sYIdW
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Join Us. "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#55DABE" }}
                    >
                      {"Start"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FEB241" }}
                    >
                      {" "}
                    </span>
                    <React.Fragment>{"your music journey."}</React.Fragment>
                  </React.Fragment>
                </h1>
              </section>
              <div className={classNames(projectcss.all, sty.freeBox__zt8V8)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xjIbL)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6A8Ip
                    )}
                  >
                    {"Already have an account?"}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button___17Nm)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___62B7Y
                        )}
                      >
                        {"Login"}
                      </div>
                    }
                    linkTo={`/login`}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___09YFo)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__f9FgS
                    )}
                  >
                    {"Register as an Admin"}
                  </h1>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if (
                                      $state.form.value?.specialCode ===
                                      "ENTREELAB101"
                                    ) {
                                      $state.isUserAuthorized = true;
                                      return true;
                                    } else {
                                      return false;
                                    }
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["signup"] =
                          $state.isUserAuthorized === true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return $state.form.value.email;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return $state.form.value.password;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    "/login?registered=true",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          userRole: "admin",
                                          isOnboarded: false,
                                          firstName:
                                            $state.form.value?.firstName,
                                          lastName: $state.form.value?.lastName,
                                          attemptedQuiz: false,
                                          lastQuizStatus: "UNDEFINED",
                                          lastQuizStarted: "UNDEFINED",
                                          lastQuizCompleted: "UNDEFINED"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "SupabaseUserGlobalContext.signup"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["signup"] != null &&
                          typeof $steps["signup"] === "object" &&
                          typeof $steps["signup"].then === "function"
                        ) {
                          $steps["signup"] = await $steps["signup"];
                        }

                        $steps["invokeGlobalAction"] = (() => {
                          return $state.isUserAuthorized === false;
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "You are not authorized to create an admin account",
                                  undefined,
                                  undefined,
                                  "top"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      },
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      requiredMark: false,
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"columns"}
                          data-plasmic-override={overrides.columns}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.columns)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__vzzqk
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__yjhG
                              )}
                              label={"First Name"}
                              name={"firstName"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "First name is required"
                                }
                              ]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "input",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input"}
                                    data-plasmic-override={overrides.input}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__nBf
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__hvGJy
                              )}
                              label={"Last Name"}
                              name={"lastName"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Last name is required"
                                }
                              ]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input2
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input2", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "input2",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input2.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input2"}
                                    data-plasmic-override={overrides.input2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          </div>
                        </Stack__>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___8Ni99
                          )}
                          label={"Email"}
                          name={"email"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Email address is required"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input3
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input3", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              value: generateStateValueProp($state, [
                                "input3",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input3.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input3"}
                                data-plasmic-override={overrides.input3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__mtswG
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oF7UP
                              )}
                            >
                              {"Special Code"}
                            </div>
                          }
                          name={"specialCode"}
                          rules={[
                            { ruleType: "required", message: "Is Required" }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input4
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input4", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              value: generateStateValueProp($state, [
                                "input4",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input4.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input4"}
                                data-plasmic-override={overrides.input4}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__dmPgH
                          )}
                          label={"Password"}
                          name={"password"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Password is required"
                            },

                            {
                              ruleType: "min",
                              length: 6,
                              message: "Password must be at least 6 characters"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.passwordInput
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["passwordInput", "value"],
                                  AntdPassword_Helpers
                                ).apply(null, eventArgs);
                              },
                              value: generateStateValueProp($state, [
                                "passwordInput",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "passwordInput.value"
                                }
                              ],
                              [],
                              AntdPassword_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdPassword
                                data-plasmic-name={"passwordInput"}
                                data-plasmic-override={overrides.passwordInput}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__upr8W
                          )}
                          disabled={(() => {
                            try {
                              return $state.form.isSubmitting;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dMByh
                            )}
                          >
                            {"Register"}
                          </div>
                        </AntdButton>
                      </FormWrapper>
                    );
                  })()}
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__xNjU)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "register",
    "section",
    "form",
    "columns",
    "input",
    "input2",
    "input3",
    "input4",
    "passwordInput"
  ],
  register: [
    "register",
    "section",
    "form",
    "columns",
    "input",
    "input2",
    "input3",
    "input4",
    "passwordInput"
  ],
  section: ["section"],
  form: [
    "form",
    "columns",
    "input",
    "input2",
    "input3",
    "input4",
    "passwordInput"
  ],
  columns: ["columns", "input", "input2"],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  passwordInput: ["passwordInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  register: "div";
  section: "section";
  form: typeof FormWrapper;
  columns: "div";
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  passwordInput: typeof AntdPassword;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRegisterAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRegisterAdmin__VariantsArgs;
    args?: PlasmicRegisterAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRegisterAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRegisterAdmin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRegisterAdmin__ArgProps,
          internalVariantPropNames: PlasmicRegisterAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegisterAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegisterAdmin";
  } else {
    func.displayName = `PlasmicRegisterAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicRegisterAdmin = Object.assign(
  // Top-level PlasmicRegisterAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    register: makeNodeComponent("register"),
    section: makeNodeComponent("section"),
    form: makeNodeComponent("form"),
    columns: makeNodeComponent("columns"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    passwordInput: makeNodeComponent("passwordInput"),

    // Metadata about props expected for PlasmicRegisterAdmin
    internalVariantProps: PlasmicRegisterAdmin__VariantProps,
    internalArgProps: PlasmicRegisterAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRegisterAdmin;
/* prettier-ignore-end */
