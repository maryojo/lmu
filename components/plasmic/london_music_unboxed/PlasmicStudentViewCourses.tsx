/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: VsNotozGA0t4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import StudentPageLayout from "../../StudentPageLayout"; // plasmic-import: Itd9tHC_WCDz/component
import CourseDetails from "../../CourseDetails"; // plasmic-import: cQ5WwEPS_AXG/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicStudentViewCourses.module.css"; // plasmic-import: VsNotozGA0t4/css

createPlasmicElementProxy;

export type PlasmicStudentViewCourses__VariantMembers = {};
export type PlasmicStudentViewCourses__VariantsArgs = {};
type VariantPropType = keyof PlasmicStudentViewCourses__VariantsArgs;
export const PlasmicStudentViewCourses__VariantProps =
  new Array<VariantPropType>();

export type PlasmicStudentViewCourses__ArgsType = {};
type ArgPropType = keyof PlasmicStudentViewCourses__ArgsType;
export const PlasmicStudentViewCourses__ArgProps = new Array<ArgPropType>();

export type PlasmicStudentViewCourses__OverridesType = {
  root?: Flex__<typeof StudentPageLayout>;
  h4?: Flex__<"h4">;
  courseDetails?: Flex__<typeof CourseDetails>;
};

export interface DefaultStudentViewCoursesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStudentViewCourses__RenderFunc(props: {
  variants: PlasmicStudentViewCourses__VariantsArgs;
  args: PlasmicStudentViewCourses__ArgsType;
  overrides: PlasmicStudentViewCourses__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCourseById: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "b1ee7e65-768d-4a74-8dec-1f910378dd5b",
        userArgs: {
          keys: [$ctx.query?.id]
        },
        cacheKey: `plasmic.$.b1ee7e65-768d-4a74-8dec-1f910378dd5b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <StudentPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__kOOyo)}>
                <div className={classNames(projectcss.all, sty.freeBox__y0ABz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vrPm8)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"Add New Course"}
                    </h4>
                  </div>
                </div>
                <CourseDetails
                  data-plasmic-name={"courseDetails"}
                  data-plasmic-override={overrides.courseDetails}
                  className={classNames("__wab_instance", sty.courseDetails)}
                  courseData={(() => {
                    try {
                      return $queries.getCourseById?.data[0];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  courseStatus={"not-enrolled"}
                />
              </div>
            )}
          </DataCtxReader__>
        </StudentPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "courseDetails"],
  h4: ["h4"],
  courseDetails: ["courseDetails"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof StudentPageLayout;
  h4: "h4";
  courseDetails: typeof CourseDetails;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStudentViewCourses__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStudentViewCourses__VariantsArgs;
    args?: PlasmicStudentViewCourses__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStudentViewCourses__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStudentViewCourses__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStudentViewCourses__ArgProps,
          internalVariantPropNames: PlasmicStudentViewCourses__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStudentViewCourses__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStudentViewCourses";
  } else {
    func.displayName = `PlasmicStudentViewCourses.${nodeName}`;
  }
  return func;
}

export const PlasmicStudentViewCourses = Object.assign(
  // Top-level PlasmicStudentViewCourses renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    courseDetails: makeNodeComponent("courseDetails"),

    // Metadata about props expected for PlasmicStudentViewCourses
    internalVariantProps: PlasmicStudentViewCourses__VariantProps,
    internalArgProps: PlasmicStudentViewCourses__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStudentViewCourses;
/* prettier-ignore-end */
