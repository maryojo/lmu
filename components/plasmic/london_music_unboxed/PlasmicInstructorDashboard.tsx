/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: E8oG8qUjXc-o

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import InstructorPageLayout from "../../InstructorPageLayout"; // plasmic-import: KRlgGOfWJ9fO/component
import Button from "../../Button"; // plasmic-import: jI-x_NzEFX2Q/component
import CourseCard from "../../CourseCard"; // plasmic-import: lU_2619e8-pr/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicInstructorDashboard.module.css"; // plasmic-import: E8oG8qUjXc-o/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: IG49PCNfzFCB/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: jkQ1pOWd7e68/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 0fflnDuvI7c1/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: IuQNgVybgFcd/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -jkcn7GwAM4v/icon

createPlasmicElementProxy;

export type PlasmicInstructorDashboard__VariantMembers = {};
export type PlasmicInstructorDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstructorDashboard__VariantsArgs;
export const PlasmicInstructorDashboard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInstructorDashboard__ArgsType = {};
type ArgPropType = keyof PlasmicInstructorDashboard__ArgsType;
export const PlasmicInstructorDashboard__ArgProps = new Array<ArgPropType>();

export type PlasmicInstructorDashboard__OverridesType = {
  root?: Flex__<typeof InstructorPageLayout>;
  h4?: Flex__<"h4">;
  button?: Flex__<typeof Button>;
};

export interface DefaultInstructorDashboardProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInstructorDashboard__RenderFunc(props: {
  variants: PlasmicInstructorDashboard__VariantsArgs;
  args: PlasmicInstructorDashboard__ArgsType;
  overrides: PlasmicInstructorDashboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getAllAvatars: usePlasmicDataOp(() => {
      return {
        sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
        opId: "da219814-b24a-421a-8f90-0724e06ba8a9",
        userArgs: {},
        cacheKey: `plasmic.$.da219814-b24a-421a-8f90-0724e06ba8a9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <InstructorPageLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
        >
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__jw2UF)}>
                <div className={classNames(projectcss.all, sty.columns__todDp)}>
                  <div
                    className={classNames(projectcss.all, sty.column__aAojT)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mnTsm)}
                    >
                      <Icon15Icon
                        className={classNames(projectcss.all, sty.svg__yAby2)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lhBYc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sc3K8
                          )}
                        >
                          {"21"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v9LsH
                          )}
                        >
                          {"Enrolled Courses"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___9ABz7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m7Qev)}
                    >
                      <Icon11Icon
                        className={classNames(projectcss.all, sty.svg__bOpxP)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jIGJ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__utFrk
                          )}
                        >
                          {"Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__drzp8
                          )}
                        >
                          {"Completed Courses"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__pWCaj)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lqUcU)}
                    >
                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg___2AfZz)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2G17
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vd86Q
                          )}
                        >
                          {"Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fmsw3
                          )}
                        >
                          {"Active Courses"}
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__jnyN4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gdxQt)}
                    >
                      <Icon13Icon
                        className={classNames(projectcss.all, sty.svg__ai5Q)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0RxD3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jsalo
                          )}
                        >
                          {"Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x8RGp
                          )}
                        >
                          {"Students"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wOrT3)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__boLCr)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"Popular Courses"}
                    </h4>
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.columns__d4GV)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__bxEnz)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard__igcrH
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__c3Zv3)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard__djilW
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__gNwFq)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard__mexMx
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__aCJt3)}
                    >
                      <CourseCard
                        className={classNames(
                          "__wab_instance",
                          sty.courseCard__zPVnd
                        )}
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </DataCtxReader__>
        </InstructorPageLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "button"],
  h4: ["h4"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof InstructorPageLayout;
  h4: "h4";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstructorDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstructorDashboard__VariantsArgs;
    args?: PlasmicInstructorDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstructorDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstructorDashboard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInstructorDashboard__ArgProps,
          internalVariantPropNames: PlasmicInstructorDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInstructorDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstructorDashboard";
  } else {
    func.displayName = `PlasmicInstructorDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicInstructorDashboard = Object.assign(
  // Top-level PlasmicInstructorDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicInstructorDashboard
    internalVariantProps: PlasmicInstructorDashboard__VariantProps,
    internalArgProps: PlasmicInstructorDashboard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInstructorDashboard;
/* prettier-ignore-end */
