/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: xJvF3d0NbFPY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicCourseLessonItem.module.css"; // plasmic-import: xJvF3d0NbFPY/css

createPlasmicElementProxy;

export type PlasmicCourseLessonItem__VariantMembers = {};
export type PlasmicCourseLessonItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicCourseLessonItem__VariantsArgs;
export const PlasmicCourseLessonItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCourseLessonItem__ArgsType = {
  form6Value?: any;
  currentIndex?: any;
  courseLessonsList?: any;
};
type ArgPropType = keyof PlasmicCourseLessonItem__ArgsType;
export const PlasmicCourseLessonItem__ArgProps = new Array<ArgPropType>(
  "form6Value",
  "currentIndex",
  "courseLessonsList"
);

export type PlasmicCourseLessonItem__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  freeBox?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
};

export interface DefaultCourseLessonItemProps {
  form6Value?: any;
  currentIndex?: any;
  courseLessonsList?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCourseLessonItem__RenderFunc(props: {
  variants: PlasmicCourseLessonItem__VariantsArgs;
  args: PlasmicCourseLessonItem__ArgsType;
  overrides: PlasmicCourseLessonItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__s2HPz
        )}
      >
        {"Enter some text"}
      </div>
      <AntdModal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        className={classNames("__wab_instance", sty.modal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        hideFooter={true}
        modalScopeClassName={sty["modal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={"Modal title"}
        trigger={
          <AntdButton
            className={classNames("__wab_instance", sty.button__g12V)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0OGv1
              )}
            >
              {"Show modal"}
            </div>
          </AntdButton>
        }
        width={"700px"}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zAkEk
            )}
          >
            {"Modal content"}
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              data: {
                sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                opId: "979a45e1-b781-4c68-8a52-6f716227539a",
                userArgs: {
                  filters: [$props.courseLessonsList[$props?.currentIndex]?.id]
                },
                cacheKey: `plasmic.$.${(() => {
                  try {
                    return "getOne";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}.$.979a45e1-b781-4c68-8a52-6f716227539a.$.`,
                invalidatedKeys: null,
                roleId: null
              },
              dataFormItems: (() => {
                const __composite = [
                  {
                    key: "course_id",
                    inputType: "Text",
                    fieldId: "course_id",
                    label: "course_id",
                    name: "course_id",
                    hidden: null
                  },
                  {
                    key: "id",
                    inputType: "Text",
                    fieldId: "id",
                    label: "id",
                    name: "id",
                    hidden: null
                  },
                  {
                    key: "created_at",
                    inputType: "Text",
                    fieldId: "created_at",
                    label: "created_at",
                    name: "created_at",
                    hidden: null
                  },
                  {
                    key: "module_id",
                    inputType: "Text",
                    fieldId: "module_id",
                    label: "module_id",
                    name: "module_id",
                    hidden: null
                  },
                  {
                    key: "resources",
                    inputType: "Text",
                    fieldId: "resources",
                    label: "resources",
                    name: "resources"
                  },
                  {
                    key: "status",
                    inputType: "Text",
                    fieldId: "status",
                    label: "status",
                    name: "status"
                  },
                  {
                    key: "description",
                    inputType: "Text",
                    fieldId: "description",
                    label: "description",
                    name: "description"
                  },
                  {
                    key: "content",
                    inputType: "Text",
                    fieldId: "content",
                    label: "content",
                    name: "content"
                  },
                  {
                    key: "title",
                    inputType: "Text",
                    fieldId: "title",
                    label: "title",
                    name: "title"
                  }
                ];
                __composite["0"]["hidden"] = true;
                __composite["1"]["hidden"] = true;
                __composite["2"]["hidden"] = true;
                __composite["3"]["hidden"] = true;
                return __composite;
              })(),

              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              formItems: [],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "simplified",
              onFinish: async values => {
                const $steps = {};

                $steps["defaultSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "6C2N6jYLs31t3Z2ygT9rD6",
                          opId: "12568e04-8074-4026-8e04-dabf35fbccd3",
                          userArgs: {
                            conditions: [
                              $props.courseLessonsList[$props?.currentIndex]?.id
                            ],

                            variables: [$state.form.value]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["defaultSubmit"] != null &&
                  typeof $steps["defaultSubmit"] === "object" &&
                  typeof $steps["defaultSubmit"].then === "function"
                ) {
                  $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                }
              },
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["form", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: (
                <AntdButton
                  className={classNames("__wab_instance", sty.button__uwG6Y)}
                  submitsForm={true}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qjbqX
                    )}
                  >
                    {"Submit"}
                  </div>
                </AntdButton>
              ),
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              />
            );
          })()}
        </div>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "freeBox", "form"],
  modal: ["modal", "freeBox", "form"],
  freeBox: ["freeBox", "form"],
  form: ["form"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  freeBox: "div";
  form: typeof FormWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCourseLessonItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCourseLessonItem__VariantsArgs;
    args?: PlasmicCourseLessonItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCourseLessonItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCourseLessonItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCourseLessonItem__ArgProps,
          internalVariantPropNames: PlasmicCourseLessonItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCourseLessonItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCourseLessonItem";
  } else {
    func.displayName = `PlasmicCourseLessonItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCourseLessonItem = Object.assign(
  // Top-level PlasmicCourseLessonItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    freeBox: makeNodeComponent("freeBox"),
    form: makeNodeComponent("form"),

    // Metadata about props expected for PlasmicCourseLessonItem
    internalVariantProps: PlasmicCourseLessonItem__VariantProps,
    internalArgProps: PlasmicCourseLessonItem__ArgProps
  }
);

export default PlasmicCourseLessonItem;
/* prettier-ignore-end */
