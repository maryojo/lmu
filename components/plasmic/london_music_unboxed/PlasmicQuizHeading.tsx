/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 43GLDCvnvwFaSntiZWsgtz
// Component: u5QUcEvtH2vy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextField from "../../TextField"; // plasmic-import: k-Qv5DzxGbDH/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 43GLDCvnvwFaSntiZWsgtz/projectcss
import sty from "./PlasmicQuizHeading.module.css"; // plasmic-import: u5QUcEvtH2vy/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: yZz0P1JDPQwS/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: dYXFQotiGoff/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: fqIOvX4azUg2/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 9jWhbyexBI6r/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: AT3U1U2gTxsA/icon

createPlasmicElementProxy;

export type PlasmicQuizHeading__VariantMembers = {
  editingVariant: "editingVariant";
};
export type PlasmicQuizHeading__VariantsArgs = {
  editingVariant?: SingleBooleanChoiceArg<"editingVariant">;
};
type VariantPropType = keyof PlasmicQuizHeading__VariantsArgs;
export const PlasmicQuizHeading__VariantProps = new Array<VariantPropType>(
  "editingVariant"
);

export type PlasmicQuizHeading__ArgsType = {
  heading?: string;
  isSaving?: boolean;
  handleSaveClick?: (newTitle: string) => void;
};
type ArgPropType = keyof PlasmicQuizHeading__ArgsType;
export const PlasmicQuizHeading__ArgProps = new Array<ArgPropType>(
  "heading",
  "isSaving",
  "handleSaveClick"
);

export type PlasmicQuizHeading__OverridesType = {
  root?: Flex__<"div">;
  h4?: Flex__<"h4">;
  quizTitle?: Flex__<typeof TextField>;
};

export interface DefaultQuizHeadingProps {
  heading?: string;
  isSaving?: boolean;
  handleSaveClick?: (newTitle: string) => void;
  editingVariant?: SingleBooleanChoiceArg<"editingVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuizHeading__RenderFunc(props: {
  variants: PlasmicQuizHeading__VariantsArgs;
  args: PlasmicQuizHeading__ArgsType;
  overrides: PlasmicQuizHeading__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isSaving: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "editingVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.editingVariant
      },
      {
        path: "quizTitle.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.heading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rooteditingVariant]: hasVariant(
            $state,
            "editingVariant",
            "editingVariant"
          )
        }
      )}
    >
      <h4
        data-plasmic-name={"h4"}
        data-plasmic-override={overrides.h4}
        className={classNames(
          projectcss.all,
          projectcss.h4,
          projectcss.__wab_text,
          sty.h4,
          {
            [sty.h4editingVariant]: hasVariant(
              $state,
              "editingVariant",
              "editingVariant"
            )
          }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.heading ?? "Quiz Heading";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "You won't believe what happens next.";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </h4>
      <TextField
        data-plasmic-name={"quizTitle"}
        data-plasmic-override={overrides.quizTitle}
        className={classNames("__wab_instance", sty.quizTitle, {
          [sty.quizTitleeditingVariant]: hasVariant(
            $state,
            "editingVariant",
            "editingVariant"
          )
        })}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["quizTitle", "value"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        showLabel={false}
        value={generateStateValueProp($state, ["quizTitle", "value"])}
      />

      <Icon17Icon
        className={classNames(projectcss.all, sty.svg__zhq0X, {
          [sty.svgeditingVariant__zhq0XePkoK]: hasVariant(
            $state,
            "editingVariant",
            "editingVariant"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateEditingVariant"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "editingVariant",
                  operation: 4,
                  value: "editingVariant"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, true);
                  return true;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateEditingVariant"] != null &&
            typeof $steps["updateEditingVariant"] === "object" &&
            typeof $steps["updateEditingVariant"].then === "function"
          ) {
            $steps["updateEditingVariant"] = await $steps[
              "updateEditingVariant"
            ];
          }
        }}
        role={"img"}
      />

      {(
        hasVariant($state, "editingVariant", "editingVariant")
          ? (() => {
              try {
                return $props.isSaving === false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : true
      ) ? (
        <Icon18Icon
          className={classNames(projectcss.all, sty.svg__oVqaJ, {
            [sty.svgeditingVariant__oVqaJePkoK]: hasVariant(
              $state,
              "editingVariant",
              "editingVariant"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["runHandleSaveClick"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["handleSaveClick"],
                    args: [
                      (() => {
                        try {
                          return $state.quizTitle?.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runHandleSaveClick"] != null &&
              typeof $steps["runHandleSaveClick"] === "object" &&
              typeof $steps["runHandleSaveClick"].then === "function"
            ) {
              $steps["runHandleSaveClick"] = await $steps["runHandleSaveClick"];
            }

            $steps["updateEditingVariant"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "editingVariant",
                    operation: 6,
                    value: "editingVariant"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEditingVariant"] != null &&
              typeof $steps["updateEditingVariant"] === "object" &&
              typeof $steps["updateEditingVariant"].then === "function"
            ) {
              $steps["updateEditingVariant"] = await $steps[
                "updateEditingVariant"
              ];
            }
          }}
          role={"img"}
        />
      ) : null}
      {(
        hasVariant($state, "editingVariant", "editingVariant")
          ? (() => {
              try {
                return $props.isSaving === true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : true
      ) ? (
        <IconIcon
          className={classNames(projectcss.all, sty.svg__yJiX, {
            [sty.svgeditingVariant__yJiXePkoK]: hasVariant(
              $state,
              "editingVariant",
              "editingVariant"
            )
          })}
          role={"img"}
        />
      ) : null}
      {(
        hasVariant($state, "editingVariant", "editingVariant")
          ? (() => {
              try {
                return $props.isSaving === false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : true
      ) ? (
        <Icon4Icon
          className={classNames(projectcss.all, sty.svg__xtG37, {
            [sty.svgeditingVariant__xtG37EPkoK]: hasVariant(
              $state,
              "editingVariant",
              "editingVariant"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateEditingVariant"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "editingVariant",
                    operation: 6,
                    value: "editingVariant"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEditingVariant"] != null &&
              typeof $steps["updateEditingVariant"] === "object" &&
              typeof $steps["updateEditingVariant"].then === "function"
            ) {
              $steps["updateEditingVariant"] = await $steps[
                "updateEditingVariant"
              ];
            }
          }}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h4", "quizTitle"],
  h4: ["h4"],
  quizTitle: ["quizTitle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h4: "h4";
  quizTitle: typeof TextField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuizHeading__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuizHeading__VariantsArgs;
    args?: PlasmicQuizHeading__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuizHeading__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQuizHeading__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuizHeading__ArgProps,
          internalVariantPropNames: PlasmicQuizHeading__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuizHeading__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuizHeading";
  } else {
    func.displayName = `PlasmicQuizHeading.${nodeName}`;
  }
  return func;
}

export const PlasmicQuizHeading = Object.assign(
  // Top-level PlasmicQuizHeading renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    quizTitle: makeNodeComponent("quizTitle"),

    // Metadata about props expected for PlasmicQuizHeading
    internalVariantProps: PlasmicQuizHeading__VariantProps,
    internalArgProps: PlasmicQuizHeading__ArgProps
  }
);

export default PlasmicQuizHeading;
/* prettier-ignore-end */
